/* tslint:disable */
/* eslint-disable */
/**
 * Entitlements
 * Service for determining subscriptions in cloud management [cloud.redhat.com](http://cloud.redhat.com/api/v1/entitlements)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: ihands@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ServiceDetails
 */
export interface ServiceDetails {
    /**
     *
     * @type {boolean}
     * @memberof ServiceDetails
     */
    'isEntitled'?: boolean;
}

/**
 * ServicesGetApi - axios parameter creator
 * @export
 */
export const ServicesGetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary get a list of services a user is entitled to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServicesGetApi - functional programming interface
 * @export
 */
export const ServicesGetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServicesGetApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary get a list of services a user is entitled to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: ServiceDetails; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServicesGetApi - factory interface
 * @export
 */
export const ServicesGetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServicesGetApiFp(configuration)
    return {
        /**
         *
         * @summary get a list of services a user is entitled to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGet(options?: any): AxiosPromise<{ [key: string]: ServiceDetails; }> {
            return localVarFp.servicesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServicesGetApi - object-oriented interface
 * @export
 * @class ServicesGetApi
 * @extends {BaseAPI}
 */
export class ServicesGetApi extends BaseAPI {
    /**
     *
     * @summary get a list of services a user is entitled to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServicesGetApi
     */
    public servicesGet(options?: AxiosRequestConfig) {
        return ServicesGetApiFp(this.configuration).servicesGet(options).then((request) => request(this.axios, this.basePath));
    }
}



