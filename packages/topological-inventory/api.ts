// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Topological Inventory
 * Topological Inventory
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "https://cloud.redhat.com//api/topological-inventory/v1.0".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface AppliedInventoriesParametersServicePlan
 */
export interface AppliedInventoriesParametersServicePlan {
    /**
     * The provider specific parameters needed to compute list of used service inventories
     * @type {any}
     * @memberof AppliedInventoriesParametersServicePlan
     */
    serviceParameters?: any;
}

/**
 *
 * @export
 * @interface AvailabilitiesCollection
 */
export interface AvailabilitiesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof AvailabilitiesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof AvailabilitiesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Availability>}
     * @memberof AvailabilitiesCollection
     */
    data?: Array<Availability>;
}

/**
 *
 * @export
 * @interface Availability
 */
export interface Availability {
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    action?: string;
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    availability?: string;
    /**
     *
     * @type {Date}
     * @memberof Availability
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Availability
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    identifier?: string;
    /**
     *
     * @type {Date}
     * @memberof Availability
     */
    lastCheckedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Availability
     */
    lastValidAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Availability
     */
    resourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    resourceType?: string;
    /**
     *
     * @type {Date}
     * @memberof Availability
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface Cluster
 */
export interface Cluster {
    /**
     *
     * @type {Date}
     * @memberof Cluster
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Cluster
     */
    createdAt?: Date;
    /**
     *
     * @type {any}
     * @memberof Cluster
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Cluster
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Cluster
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    name?: string;
    /**
     *
     * @type {Date}
     * @memberof Cluster
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Cluster
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Cluster
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    sourceRef?: string;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    uidEms?: string;
    /**
     *
     * @type {Date}
     * @memberof Cluster
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ClustersCollection
 */
export interface ClustersCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ClustersCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ClustersCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Cluster>}
     * @memberof ClustersCollection
     */
    data?: Array<Cluster>;
}

/**
 *
 * @export
 * @interface CollectionLinks
 */
export interface CollectionLinks {
    /**
     *
     * @type {string}
     * @memberof CollectionLinks
     */
    first?: string;
    /**
     *
     * @type {string}
     * @memberof CollectionLinks
     */
    last?: string;
    /**
     *
     * @type {string}
     * @memberof CollectionLinks
     */
    next?: string;
    /**
     *
     * @type {string}
     * @memberof CollectionLinks
     */
    prev?: string;
}

/**
 *
 * @export
 * @interface CollectionMetadata
 */
export interface CollectionMetadata {
    /**
     *
     * @type {number}
     * @memberof CollectionMetadata
     */
    count?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetadata
     */
    limit?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetadata
     */
    offset?: number;
}

/**
 *
 * @export
 * @interface Container
 */
export interface Container {
    /**
     *
     * @type {Date}
     * @memberof Container
     */
    archivedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Container
     */
    containerGroupId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Container
     */
    containerImageId?: string;
    /**
     *
     * @type {number}
     * @memberof Container
     */
    cpuLimit?: number;
    /**
     *
     * @type {number}
     * @memberof Container
     */
    cpuRequest?: number;
    /**
     *
     * @type {Date}
     * @memberof Container
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Container
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Container
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {number}
     * @memberof Container
     */
    memoryLimit?: number;
    /**
     *
     * @type {number}
     * @memberof Container
     */
    memoryRequest?: number;
    /**
     *
     * @type {string}
     * @memberof Container
     */
    name?: string;
    /**
     *
     * @type {Date}
     * @memberof Container
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ContainerGroup
 */
export interface ContainerGroup {
    /**
     *
     * @type {Date}
     * @memberof ContainerGroup
     */
    archivedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerGroup
     */
    containerNodeId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerGroup
     */
    containerProjectId?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerGroup
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerGroup
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    ipaddress?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerGroup
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    resourceVersion?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerGroup
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ContainerGroup
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerGroup
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerGroup
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ContainerGroupsCollection
 */
export interface ContainerGroupsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerGroupsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerGroupsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerGroup>}
     * @memberof ContainerGroupsCollection
     */
    data?: Array<ContainerGroup>;
}

/**
 *
 * @export
 * @interface ContainerImage
 */
export interface ContainerImage {
    /**
     *
     * @type {Date}
     * @memberof ContainerImage
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ContainerImage
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerImage
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerImage
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    resourceVersion?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerImage
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ContainerImage
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerImage
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    sourceRef?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    tag?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerImage
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ContainerImagesCollection
 */
export interface ContainerImagesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerImagesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerImagesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerImage>}
     * @memberof ContainerImagesCollection
     */
    data?: Array<ContainerImage>;
}

/**
 *
 * @export
 * @interface ContainerNode
 */
export interface ContainerNode {
    /**
     *
     * @type {any}
     * @memberof ContainerNode
     */
    addresses?: any;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    allocatableCpus?: number;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    allocatableMemory?: number;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    allocatablePods?: number;
    /**
     *
     * @type {Date}
     * @memberof ContainerNode
     */
    archivedAt?: Date;
    /**
     *
     * @type {any}
     * @memberof ContainerNode
     */
    conditions?: any;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    cpus?: number;
    /**
     *
     * @type {Date}
     * @memberof ContainerNode
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerNode
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerNode
     */
    lastSeenAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerNode
     */
    livesOnId?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    livesOnType?: string;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    memory?: number;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    name?: string;
    /**
     *
     * @type {any}
     * @memberof ContainerNode
     */
    nodeInfo?: any;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    pods?: number;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    resourceVersion?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerNode
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ContainerNode
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerNode
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerNode
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ContainerNodesCollection
 */
export interface ContainerNodesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerNodesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerNodesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerNode>}
     * @memberof ContainerNodesCollection
     */
    data?: Array<ContainerNode>;
}

/**
 *
 * @export
 * @interface ContainerProject
 */
export interface ContainerProject {
    /**
     *
     * @type {Date}
     * @memberof ContainerProject
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ContainerProject
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    displayName?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerProject
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerProject
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    resourceVersion?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerProject
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ContainerProject
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerProject
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    sourceRef?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    statusPhase?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerProject
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ContainerProjectsCollection
 */
export interface ContainerProjectsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerProjectsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerProjectsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerProject>}
     * @memberof ContainerProjectsCollection
     */
    data?: Array<ContainerProject>;
}

/**
 *
 * @export
 * @interface ContainerResourceQuota
 */
export interface ContainerResourceQuota {
    /**
     *
     * @type {Date}
     * @memberof ContainerResourceQuota
     */
    archivedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    containerProjectId?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerResourceQuota
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerResourceQuota
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    resourceVersion?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerResourceQuota
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ContainerResourceQuota
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    sourceRef?: string;
    /**
     *
     * @type {any}
     * @memberof ContainerResourceQuota
     */
    spec?: any;
    /**
     *
     * @type {any}
     * @memberof ContainerResourceQuota
     */
    status?: any;
    /**
     *
     * @type {Date}
     * @memberof ContainerResourceQuota
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ContainerResourceQuotaCollection
 */
export interface ContainerResourceQuotaCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerResourceQuotaCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerResourceQuotaCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerResourceQuota>}
     * @memberof ContainerResourceQuotaCollection
     */
    data?: Array<ContainerResourceQuota>;
}

/**
 *
 * @export
 * @interface ContainerTemplate
 */
export interface ContainerTemplate {
    /**
     *
     * @type {Date}
     * @memberof ContainerTemplate
     */
    archivedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerTemplate
     */
    containerProjectId?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerTemplate
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerTemplate
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerTemplate
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    resourceVersion?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerTemplate
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ContainerTemplate
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerTemplate
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof ContainerTemplate
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ContainerTemplatesCollection
 */
export interface ContainerTemplatesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerTemplatesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerTemplatesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerTemplate>}
     * @memberof ContainerTemplatesCollection
     */
    data?: Array<ContainerTemplate>;
}

/**
 *
 * @export
 * @interface ContainersCollection
 */
export interface ContainersCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainersCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainersCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Container>}
     * @memberof ContainersCollection
     */
    data?: Array<Container>;
}

/**
 *
 * @export
 * @interface Datastore
 */
export interface Datastore {
    /**
     *
     * @type {boolean}
     * @memberof Datastore
     */
    accessible?: boolean;
    /**
     *
     * @type {Date}
     * @memberof Datastore
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Datastore
     */
    createdAt?: Date;
    /**
     *
     * @type {any}
     * @memberof Datastore
     */
    extra?: any;
    /**
     *
     * @type {number}
     * @memberof Datastore
     */
    freeSpace?: number;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Datastore
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Datastore
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    location?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    name?: string;
    /**
     *
     * @type {Date}
     * @memberof Datastore
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Datastore
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Datastore
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    sourceRef?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    status?: string;
    /**
     *
     * @type {number}
     * @memberof Datastore
     */
    totalSpace?: number;
    /**
     *
     * @type {Date}
     * @memberof Datastore
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface DatastoresCollection
 */
export interface DatastoresCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof DatastoresCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof DatastoresCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Datastore>}
     * @memberof DatastoresCollection
     */
    data?: Array<Datastore>;
}

/**
 *
 * @export
 * @interface ErrorNotFound
 */
export interface ErrorNotFound {
    /**
     *
     * @type {Array<ErrorNotFoundErrors>}
     * @memberof ErrorNotFound
     */
    errors?: Array<ErrorNotFoundErrors>;
}

/**
 *
 * @export
 * @interface ErrorNotFoundErrors
 */
export interface ErrorNotFoundErrors {
    /**
     *
     * @type {number}
     * @memberof ErrorNotFoundErrors
     */
    status?: number;
    /**
     *
     * @type {string}
     * @memberof ErrorNotFoundErrors
     */
    detail?: string;
}

/**
 *
 * @export
 * @interface Flavor
 */
export interface Flavor {
    /**
     *
     * @type {Date}
     * @memberof Flavor
     */
    archivedAt?: Date;
    /**
     * Number of CPUs
     * @type {number}
     * @memberof Flavor
     */
    cpus?: number;
    /**
     *
     * @type {Date}
     * @memberof Flavor
     */
    createdAt?: Date;
    /**
     * The number of default disks
     * @type {number}
     * @memberof Flavor
     */
    diskCount?: number;
    /**
     * Size of the default disks in bytes
     * @type {number}
     * @memberof Flavor
     */
    diskSize?: number;
    /**
     *
     * @type {any}
     * @memberof Flavor
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Flavor
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Flavor
     */
    lastSeenAt?: Date;
    /**
     * Amount of RAM in bytes
     * @type {number}
     * @memberof Flavor
     */
    memory?: number;
    /**
     *
     * @type {string}
     * @memberof Flavor
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Flavor
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Flavor
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof Flavor
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface FlavorsCollection
 */
export interface FlavorsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof FlavorsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof FlavorsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Flavor>}
     * @memberof FlavorsCollection
     */
    data?: Array<Flavor>;
}

/**
 *
 * @export
 * @interface GraphQLRequest
 */
export interface GraphQLRequest {
    /**
     * The GraphQL query
     * @type {string}
     * @memberof GraphQLRequest
     */
    query: string;
    /**
     * If the Query contains several named operations, the operationName controls which one should be executed
     * @type {string}
     * @memberof GraphQLRequest
     */
    operationName?: string;
    /**
     * Optional Query variables
     * @type {any}
     * @memberof GraphQLRequest
     */
    variables?: any | null;
}

/**
 *
 * @export
 * @interface GraphQLResponse
 */
export interface GraphQLResponse {
    /**
     * Results from the GraphQL query
     * @type {any}
     * @memberof GraphQLResponse
     */
    data?: any;
    /**
     * Errors resulting from the GraphQL query
     * @type {Array<any>}
     * @memberof GraphQLResponse
     */
    errors?: Array<any>;
}

/**
 *
 * @export
 * @interface Host
 */
export interface Host {
    /**
     *
     * @type {Date}
     * @memberof Host
     */
    archivedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Host
     */
    clusterId?: string;
    /**
     *
     * @type {number}
     * @memberof Host
     */
    cpus?: number;
    /**
     *
     * @type {Date}
     * @memberof Host
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    description?: string;
    /**
     *
     * @type {any}
     * @memberof Host
     */
    extra?: any;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    hostname?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Host
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Host
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {number}
     * @memberof Host
     */
    memory?: number;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    powerState?: string;
    /**
     *
     * @type {Date}
     * @memberof Host
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Host
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Host
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    sourceRef?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    uidEms?: string;
    /**
     *
     * @type {Date}
     * @memberof Host
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface HostsCollection
 */
export interface HostsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof HostsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof HostsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Host>}
     * @memberof HostsCollection
     */
    data?: Array<Host>;
}

/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200
     */
    taskId?: string;
}

/**
 *
 * @export
 * @interface Ipaddress
 */
export interface Ipaddress {
    /**
     *
     * @type {Date}
     * @memberof Ipaddress
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Ipaddress
     */
    createdAt?: Date;
    /**
     *
     * @type {any}
     * @memberof Ipaddress
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    ipaddress?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    kind?: string;
    /**
     *
     * @type {Date}
     * @memberof Ipaddress
     */
    lastSeenAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    networkAdapterId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    orchestrationStackId?: string;
    /**
     *
     * @type {Date}
     * @memberof Ipaddress
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Ipaddress
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    sourceRegionId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    subnetId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    subscriptionId?: string;
    /**
     *
     * @type {Date}
     * @memberof Ipaddress
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface IpaddressesCollection
 */
export interface IpaddressesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof IpaddressesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof IpaddressesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Ipaddress>}
     * @memberof IpaddressesCollection
     */
    data?: Array<Ipaddress>;
}

/**
 *
 * @export
 * @interface Network
 */
export interface Network {
    /**
     *
     * @type {Date}
     * @memberof Network
     */
    archivedAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    cidr?: string;
    /**
     *
     * @type {Date}
     * @memberof Network
     */
    createdAt?: Date;
    /**
     *
     * @type {any}
     * @memberof Network
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Network
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Network
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Network
     */
    orchestrationStackId?: string;
    /**
     *
     * @type {Date}
     * @memberof Network
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Network
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Network
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Network
     */
    sourceRegionId?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    status?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Network
     */
    subscriptionId?: string;
    /**
     *
     * @type {Date}
     * @memberof Network
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface NetworkAdapter
 */
export interface NetworkAdapter {
    /**
     *
     * @type {Date}
     * @memberof NetworkAdapter
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof NetworkAdapter
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    deviceId?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    deviceType?: string;
    /**
     *
     * @type {any}
     * @memberof NetworkAdapter
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof NetworkAdapter
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    macAddress?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    orchestrationStackId?: string;
    /**
     *
     * @type {Date}
     * @memberof NetworkAdapter
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof NetworkAdapter
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    sourceRegionId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    subscriptionId?: string;
    /**
     *
     * @type {Date}
     * @memberof NetworkAdapter
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface NetworkAdaptersCollection
 */
export interface NetworkAdaptersCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof NetworkAdaptersCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof NetworkAdaptersCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<NetworkAdapter>}
     * @memberof NetworkAdaptersCollection
     */
    data?: Array<NetworkAdapter>;
}

/**
 *
 * @export
 * @interface NetworksCollection
 */
export interface NetworksCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof NetworksCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof NetworksCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Network>}
     * @memberof NetworksCollection
     */
    data?: Array<Network>;
}

/**
 *
 * @export
 * @interface OrchestrationStack
 */
export interface OrchestrationStack {
    /**
     *
     * @type {Date}
     * @memberof OrchestrationStack
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof OrchestrationStack
     */
    createdAt?: Date;
    /**
     * Description of the OrchestrationStack
     * @type {string}
     * @memberof OrchestrationStack
     */
    description?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrchestrationStack
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof OrchestrationStack
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof OrchestrationStack
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrchestrationStack
     */
    parentOrchestrationStackId?: string;
    /**
     *
     * @type {Date}
     * @memberof OrchestrationStack
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof OrchestrationStack
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrchestrationStack
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof OrchestrationStack
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrchestrationStack
     */
    sourceRegionId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrchestrationStack
     */
    subscriptionId?: string;
    /**
     *
     * @type {Date}
     * @memberof OrchestrationStack
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface OrchestrationStacksCollection
 */
export interface OrchestrationStacksCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof OrchestrationStacksCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof OrchestrationStacksCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<OrchestrationStack>}
     * @memberof OrchestrationStacksCollection
     */
    data?: Array<OrchestrationStack>;
}

/**
 *
 * @export
 * @interface OrderParametersServiceOffering
 */
export interface OrderParametersServiceOffering {
    /**
     * JSON object with provisioning parameters
     * @type {any}
     * @memberof OrderParametersServiceOffering
     */
    serviceParameters?: any;
    /**
     * The provider specific parameters needed to provision this service. This might include namespaces, special keys
     * @type {any}
     * @memberof OrderParametersServiceOffering
     */
    providerControlParameters?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrderParametersServiceOffering
     */
    servicePlanId?: string;
}

/**
 *
 * @export
 * @interface OrderParametersServicePlan
 */
export interface OrderParametersServicePlan {
    /**
     * JSON object with provisioning parameters
     * @type {any}
     * @memberof OrderParametersServicePlan
     */
    serviceParameters?: any;
    /**
     * The provider specific parameters needed to provision this service. This might include namespaces, special keys
     * @type {any}
     * @memberof OrderParametersServicePlan
     */
    providerControlParameters?: any;
}

/**
 *
 * @export
 * @interface SecurityGroup
 */
export interface SecurityGroup {
    /**
     *
     * @type {Date}
     * @memberof SecurityGroup
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof SecurityGroup
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    description?: string;
    /**
     *
     * @type {any}
     * @memberof SecurityGroup
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof SecurityGroup
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    networkId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    orchestrationStackId?: string;
    /**
     *
     * @type {Date}
     * @memberof SecurityGroup
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof SecurityGroup
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    sourceRegionId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    subscriptionId?: string;
    /**
     *
     * @type {Date}
     * @memberof SecurityGroup
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface SecurityGroupsCollection
 */
export interface SecurityGroupsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof SecurityGroupsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof SecurityGroupsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<SecurityGroup>}
     * @memberof SecurityGroupsCollection
     */
    data?: Array<SecurityGroup>;
}

/**
 *
 * @export
 * @interface ServiceInstance
 */
export interface ServiceInstance {
    /**
     *
     * @type {Date}
     * @memberof ServiceInstance
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServiceInstance
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    externalUrl?: string;
    /**
     * Extra information about this object in JSON format
     * @type {any}
     * @memberof ServiceInstance
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceInstance
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    rootServiceInstanceId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    serviceInventoryId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    serviceOfferingId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    servicePlanId?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceInstance
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServiceInstance
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    sourceRegionId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    subscriptionId?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceInstance
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ServiceInstanceNode
 */
export interface ServiceInstanceNode {
    /**
     *
     * @type {Date}
     * @memberof ServiceInstanceNode
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServiceInstanceNode
     */
    createdAt?: Date;
    /**
     *
     * @type {any}
     * @memberof ServiceInstanceNode
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceInstanceNode
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    rootServiceInstanceId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    serviceInstanceId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    serviceInventoryId?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceInstanceNode
     */
    sourceCreatedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceInstanceNode
     */
    sourceUpdatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServiceInstanceNode
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ServiceInstanceNodesCollection
 */
export interface ServiceInstanceNodesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceInstanceNodesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceInstanceNodesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceInstanceNode>}
     * @memberof ServiceInstanceNodesCollection
     */
    data?: Array<ServiceInstanceNode>;
}

/**
 *
 * @export
 * @interface ServiceInstancesCollection
 */
export interface ServiceInstancesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceInstancesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceInstancesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceInstance>}
     * @memberof ServiceInstancesCollection
     */
    data?: Array<ServiceInstance>;
}

/**
 *
 * @export
 * @interface ServiceInventoriesCollection
 */
export interface ServiceInventoriesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceInventoriesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceInventoriesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceInventory>}
     * @memberof ServiceInventoriesCollection
     */
    data?: Array<ServiceInventory>;
}

/**
 *
 * @export
 * @interface ServiceInventory
 */
export interface ServiceInventory {
    /**
     *
     * @type {Date}
     * @memberof ServiceInventory
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServiceInventory
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    description?: string;
    /**
     *
     * @type {any}
     * @memberof ServiceInventory
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInventory
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceInventory
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    name?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceInventory
     */
    sourceCreatedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInventory
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceInventory
     */
    sourceUpdatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServiceInventory
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ServiceOffering
 */
export interface ServiceOffering {
    /**
     *
     * @type {Date}
     * @memberof ServiceOffering
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServiceOffering
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    displayName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    distributor?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    documentationUrl?: string;
    /**
     * Extra information about this object in JSON format
     * @type {any}
     * @memberof ServiceOffering
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceOffering
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    longDescription?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    serviceInventoryId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    serviceOfferingIconId?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceOffering
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServiceOffering
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    sourceId?: string;
    /**
     * The native reference used by the Source to refer to this object
     * @type {string}
     * @memberof ServiceOffering
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    sourceRegionId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    subscriptionId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    supportUrl?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceOffering
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ServiceOfferingIcon
 */
export interface ServiceOfferingIcon {
    /**
     *
     * @type {Date}
     * @memberof ServiceOfferingIcon
     */
    createdAt?: Date;
    /**
     * Raw icon data
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    data?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceOfferingIcon
     */
    lastSeenAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceOfferingIcon
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ServiceOfferingIconsCollection
 */
export interface ServiceOfferingIconsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceOfferingIconsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceOfferingIconsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceOfferingIcon>}
     * @memberof ServiceOfferingIconsCollection
     */
    data?: Array<ServiceOfferingIcon>;
}

/**
 *
 * @export
 * @interface ServiceOfferingNode
 */
export interface ServiceOfferingNode {
    /**
     *
     * @type {Date}
     * @memberof ServiceOfferingNode
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServiceOfferingNode
     */
    createdAt?: Date;
    /**
     *
     * @type {any}
     * @memberof ServiceOfferingNode
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceOfferingNode
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    rootServiceOfferingId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    serviceInventoryId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    serviceOfferingId?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceOfferingNode
     */
    sourceCreatedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof ServiceOfferingNode
     */
    sourceUpdatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServiceOfferingNode
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ServiceOfferingNodesCollection
 */
export interface ServiceOfferingNodesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceOfferingNodesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceOfferingNodesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceOfferingNode>}
     * @memberof ServiceOfferingNodesCollection
     */
    data?: Array<ServiceOfferingNode>;
}

/**
 *
 * @export
 * @interface ServiceOfferingsCollection
 */
export interface ServiceOfferingsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceOfferingsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceOfferingsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceOffering>}
     * @memberof ServiceOfferingsCollection
     */
    data?: Array<ServiceOffering>;
}

/**
 *
 * @export
 * @interface ServicePlan
 */
export interface ServicePlan {
    /**
     *
     * @type {Date}
     * @memberof ServicePlan
     */
    archivedAt?: Date;
    /**
     *
     * @type {any}
     * @memberof ServicePlan
     */
    createJsonSchema?: any;
    /**
     *
     * @type {Date}
     * @memberof ServicePlan
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    description?: string;
    /**
     * Extra information about this object in JSON format
     * @type {any}
     * @memberof ServicePlan
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServicePlan
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof ServicePlan
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    resourceVersion?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServicePlan
     */
    serviceOfferingId?: string;
    /**
     *
     * @type {Date}
     * @memberof ServicePlan
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof ServicePlan
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServicePlan
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServicePlan
     */
    sourceRegionId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServicePlan
     */
    subscriptionId?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    updateJsonSchema?: string;
    /**
     *
     * @type {Date}
     * @memberof ServicePlan
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface ServicePlansCollection
 */
export interface ServicePlansCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServicePlansCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServicePlansCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<ServicePlan>}
     * @memberof ServicePlansCollection
     */
    data?: Array<ServicePlan>;
}

/**
 *
 * @export
 * @interface Source
 */
export interface Source {
    /**
     *
     * @type {Date}
     * @memberof Source
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Source
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Source
     */
    refreshStatus?: string;
    /**
     *
     * @type {string}
     * @memberof Source
     */
    uid?: string;
    /**
     *
     * @type {Date}
     * @memberof Source
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface SourceRegion
 */
export interface SourceRegion {
    /**
     *
     * @type {Date}
     * @memberof SourceRegion
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof SourceRegion
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof SourceRegion
     */
    endpoint?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SourceRegion
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof SourceRegion
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof SourceRegion
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SourceRegion
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof SourceRegion
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof SourceRegion
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface SourceRegionsCollection
 */
export interface SourceRegionsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof SourceRegionsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof SourceRegionsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<SourceRegion>}
     * @memberof SourceRegionsCollection
     */
    data?: Array<SourceRegion>;
}

/**
 *
 * @export
 * @interface SourcesCollection
 */
export interface SourcesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof SourcesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof SourcesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Source>}
     * @memberof SourcesCollection
     */
    data?: Array<Source>;
}

/**
 *
 * @export
 * @interface Subnet
 */
export interface Subnet {
    /**
     *
     * @type {Date}
     * @memberof Subnet
     */
    archivedAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    cidr?: string;
    /**
     *
     * @type {Date}
     * @memberof Subnet
     */
    createdAt?: Date;
    /**
     *
     * @type {any}
     * @memberof Subnet
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Subnet
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    networkId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    orchestrationStackId?: string;
    /**
     *
     * @type {Date}
     * @memberof Subnet
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Subnet
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    sourceRegionId?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    status?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    subscriptionId?: string;
    /**
     *
     * @type {Date}
     * @memberof Subnet
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface SubnetsCollection
 */
export interface SubnetsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof SubnetsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof SubnetsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Subnet>}
     * @memberof SubnetsCollection
     */
    data?: Array<Subnet>;
}

/**
 *
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     *
     * @type {Date}
     * @memberof Subscription
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Subscription
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subscription
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Subscription
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subscription
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof Subscription
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface SubscriptionsCollection
 */
export interface SubscriptionsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof SubscriptionsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof SubscriptionsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Subscription>}
     * @memberof SubscriptionsCollection
     */
    data?: Array<Subscription>;
}

/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     *
     * @type {Date}
     * @memberof Tag
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    description?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Tag
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Tag
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    namespace?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    value?: string;
}

/**
 *
 * @export
 * @interface Tagging
 */
export interface Tagging {
    /**
     * ID of the resource
     * @type {string}
     * @memberof Tagging
     */
    tagId?: string;
    /**
     *
     * @type {string}
     * @memberof Tagging
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Tagging
     */
    value?: string;
}

/**
 *
 * @export
 * @interface TagsCollection
 */
export interface TagsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof TagsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof TagsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Tag>}
     * @memberof TagsCollection
     */
    data?: Array<Tag>;
}

/**
 *
 * @export
 * @interface Task
 */
export interface Task {
    /**
     *
     * @type {Date}
     * @memberof Task
     */
    completedAt?: Date;
    /**
     *
     * @type {any}
     * @memberof Task
     */
    context?: any;
    /**
     *
     * @type {Date}
     * @memberof Task
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Task
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Task
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Task
     */
    state?: string;
    /**
     *
     * @type {string}
     * @memberof Task
     */
    status?: string;
    /**
     *
     * @type {Date}
     * @memberof Task
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface TasksCollection
 */
export interface TasksCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof TasksCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof TasksCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Task>}
     * @memberof TasksCollection
     */
    data?: Array<Task>;
}

/**
 *
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * ID of the resource
     * @type {string}
     * @memberof Tenant
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    externalTenant?: string;
}

/**
 *
 * @export
 * @interface Vm
 */
export interface Vm {
    /**
     *
     * @type {Date}
     * @memberof Vm
     */
    archivedAt?: Date;
    /**
     * Total number of CPUs
     * @type {number}
     * @memberof Vm
     */
    cpus?: number;
    /**
     *
     * @type {Date}
     * @memberof Vm
     */
    createdAt?: Date;
    /**
     * Description of the Vm
     * @type {string}
     * @memberof Vm
     */
    description?: string;
    /**
     *
     * @type {any}
     * @memberof Vm
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    flavorId?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    hostInventoryUuid?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    hostname?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Vm
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {Array<string>}
     * @memberof Vm
     */
    macAddresses?: Array<string>;
    /**
     * Total RAM in bytes
     * @type {number}
     * @memberof Vm
     */
    memory?: number;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    orchestrationStackId?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    powerState?: string;
    /**
     *
     * @type {Date}
     * @memberof Vm
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Vm
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    sourceRegionId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    subscriptionId?: string;
    /**
     * Cross-Source Unique Reference
     * @type {string}
     * @memberof Vm
     */
    uidEms?: string;
    /**
     *
     * @type {Date}
     * @memberof Vm
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface VmsCollection
 */
export interface VmsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof VmsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof VmsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Vm>}
     * @memberof VmsCollection
     */
    data?: Array<Vm>;
}

/**
 *
 * @export
 * @interface Volume
 */
export interface Volume {
    /**
     *
     * @type {Date}
     * @memberof Volume
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Volume
     */
    createdAt?: Date;
    /**
     *
     * @type {any}
     * @memberof Volume
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof Volume
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    orchestrationStackId?: string;
    /**
     * Size of the volume in bytes
     * @type {number}
     * @memberof Volume
     */
    size?: number;
    /**
     *
     * @type {Date}
     * @memberof Volume
     */
    sourceCreatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof Volume
     */
    sourceDeletedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    sourceRef?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    sourceRegionId?: string;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    state?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    subscriptionId?: string;
    /**
     *
     * @type {Date}
     * @memberof Volume
     */
    updatedAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    volumeTypeId?: string;
}

/**
 *
 * @export
 * @interface VolumeAttachment
 */
export interface VolumeAttachment {
    /**
     *
     * @type {string}
     * @memberof VolumeAttachment
     */
    device?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof VolumeAttachment
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof VolumeAttachment
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof VolumeAttachment
     */
    state?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof VolumeAttachment
     */
    vmId?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof VolumeAttachment
     */
    volumeId?: string;
}

/**
 *
 * @export
 * @interface VolumeAttachmentsCollection
 */
export interface VolumeAttachmentsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof VolumeAttachmentsCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof VolumeAttachmentsCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<VolumeAttachment>}
     * @memberof VolumeAttachmentsCollection
     */
    data?: Array<VolumeAttachment>;
}

/**
 *
 * @export
 * @interface VolumeType
 */
export interface VolumeType {
    /**
     *
     * @type {Date}
     * @memberof VolumeType
     */
    archivedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof VolumeType
     */
    createdAt?: Date;
    /**
     *
     * @type {string}
     * @memberof VolumeType
     */
    description?: string;
    /**
     *
     * @type {any}
     * @memberof VolumeType
     */
    extra?: any;
    /**
     * ID of the resource
     * @type {string}
     * @memberof VolumeType
     */
    id?: string;
    /**
     *
     * @type {Date}
     * @memberof VolumeType
     */
    lastSeenAt?: Date;
    /**
     *
     * @type {string}
     * @memberof VolumeType
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof VolumeType
     */
    sourceId?: string;
    /**
     *
     * @type {string}
     * @memberof VolumeType
     */
    sourceRef?: string;
    /**
     *
     * @type {Date}
     * @memberof VolumeType
     */
    updatedAt?: Date;
}

/**
 *
 * @export
 * @interface VolumeTypesCollection
 */
export interface VolumeTypesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof VolumeTypesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof VolumeTypesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<VolumeType>}
     * @memberof VolumeTypesCollection
     */
    data?: Array<VolumeType>;
}

/**
 *
 * @export
 * @interface VolumesCollection
 */
export interface VolumesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof VolumesCollection
     */
    meta?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof VolumesCollection
     */
    links?: CollectionLinks;
    /**
     *
     * @type {Array<Volume>}
     * @memberof VolumesCollection
     */
    data?: Array<Volume>;
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Task id
         * @summary Invokes computing of ServiceInventories for given ServiceOffering
         * @param {string} id ID of the resource
         * @param {AppliedInventoriesParametersServicePlan} appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedInventoriesForServiceOffering(id: string, appliedInventoriesParametersServicePlan: AppliedInventoriesParametersServicePlan, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling appliedInventoriesForServiceOffering.');
            }
            // verify required parameter 'appliedInventoriesParametersServicePlan' is not null or undefined
            if (appliedInventoriesParametersServicePlan === null || appliedInventoriesParametersServicePlan === undefined) {
                throw new RequiredError('appliedInventoriesParametersServicePlan','Required parameter appliedInventoriesParametersServicePlan was null or undefined when calling appliedInventoriesForServiceOffering.');
            }
            const localVarPath = `/service_offerings/{id}/applied_inventories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AppliedInventoriesParametersServicePlan" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(appliedInventoriesParametersServicePlan || {}) : (appliedInventoriesParametersServicePlan || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentation(options: any = {}): RequestArgs {
            const localVarPath = `/openapi.json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Cluster
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusterHosts(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listClusterHosts.');
            }
            const localVarPath = `/clusters/{id}/hosts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusters(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/clusters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Container objects
         * @summary List Containers for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroupContainers(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listContainerGroupContainers.');
            }
            const localVarPath = `/container_groups/{id}/containers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroupTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listContainerGroupTags.');
            }
            const localVarPath = `/container_groups/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroups(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/container_groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerImage
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerImageTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listContainerImageTags.');
            }
            const localVarPath = `/container_images/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerImages(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/container_images`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodeContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listContainerNodeContainerGroups.');
            }
            const localVarPath = `/container_nodes/{id}/container_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodeTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listContainerNodeTags.');
            }
            const localVarPath = `/container_nodes/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/container_nodes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listContainerProjectContainerGroups.');
            }
            const localVarPath = `/container_projects/{id}/container_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerResourceQuota(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listContainerProjectContainerResourceQuota.');
            }
            const localVarPath = `/container_projects/{id}/container_resource_quotas`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listContainerProjectContainerTemplates.');
            }
            const localVarPath = `/container_projects/{id}/container_templates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listContainerProjectTags.');
            }
            const localVarPath = `/container_projects/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjects(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/container_projects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerResourceQuota(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/container_resource_quotas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerTemplate
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerTemplateTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listContainerTemplateTags.');
            }
            const localVarPath = `/container_templates/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerTemplates(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/container_templates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Container objects
         * @summary List Containers
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainers(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/containers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatastores(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/datastores`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Flavor objects
         * @summary List Flavors
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlavors(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/flavors`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Host objects
         * @summary List Hosts
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHosts(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/hosts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Ipaddress
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIpaddressTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listIpaddressTags.');
            }
            const localVarPath = `/ipaddresses/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIpaddresses(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/ipaddresses`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapterIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listNetworkAdapterIpaddresses.');
            }
            const localVarPath = `/network_adapters/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapterTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listNetworkAdapterTags.');
            }
            const localVarPath = `/network_adapters/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapters(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/network_adapters`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listNetworkSubnets.');
            }
            const localVarPath = `/networks/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listNetworkTags.');
            }
            const localVarPath = `/networks/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/networks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listOrchestrationStackIpaddresses.');
            }
            const localVarPath = `/orchestration_stacks/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listOrchestrationStackNetworkAdapters.');
            }
            const localVarPath = `/orchestration_stacks/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listOrchestrationStackNetworks.');
            }
            const localVarPath = `/orchestration_stacks/{id}/networks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listOrchestrationStackSecurityGroups.');
            }
            const localVarPath = `/orchestration_stacks/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listOrchestrationStackSubnets.');
            }
            const localVarPath = `/orchestration_stacks/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listOrchestrationStackVms.');
            }
            const localVarPath = `/orchestration_stacks/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listOrchestrationStackVolumes.');
            }
            const localVarPath = `/orchestration_stacks/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStacks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/orchestration_stacks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroupTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSecurityGroupTags.');
            }
            const localVarPath = `/security_groups/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroupVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSecurityGroupVms.');
            }
            const localVarPath = `/security_groups/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroups(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/security_groups`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstanceNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/service_instance_nodes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for ServiceInstance
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstanceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listServiceInstanceServiceInstanceNodes.');
            }
            const localVarPath = `/service_instances/{id}/service_instance_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstances(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/service_instances`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInventories(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/service_inventories`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceInventory
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInventoryTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listServiceInventoryTags.');
            }
            const localVarPath = `/service_inventories/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceOfferingIcon objects
         * @summary List ServiceOfferingIcons
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingIcons(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/service_offering_icons`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/service_offering_nodes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listServiceOfferingServiceInstances.');
            }
            const localVarPath = `/service_offerings/{id}/service_instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listServiceOfferingServiceOfferingNodes.');
            }
            const localVarPath = `/service_offerings/{id}/service_offering_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listServiceOfferingServicePlans.');
            }
            const localVarPath = `/service_offerings/{id}/service_plans`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listServiceOfferingTags.');
            }
            const localVarPath = `/service_offerings/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferings(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/service_offerings`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServicePlan
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServicePlanServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listServicePlanServiceInstances.');
            }
            const localVarPath = `/service_plans/{id}/service_instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServicePlans(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/service_plans`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Availability objects
         * @summary List Availabilities for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceAvailabilities(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceAvailabilities.');
            }
            const localVarPath = `/sources/{id}/availabilities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceClusters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceClusters.');
            }
            const localVarPath = `/sources/{id}/clusters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceContainerGroups.');
            }
            const localVarPath = `/sources/{id}/container_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerImages(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceContainerImages.');
            }
            const localVarPath = `/sources/{id}/container_images`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceContainerNodes.');
            }
            const localVarPath = `/sources/{id}/container_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerProjects(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceContainerProjects.');
            }
            const localVarPath = `/sources/{id}/container_projects`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceContainerTemplates.');
            }
            const localVarPath = `/sources/{id}/container_templates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Container objects
         * @summary List Containers for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainers(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceContainers.');
            }
            const localVarPath = `/sources/{id}/containers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceDatastores(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceDatastores.');
            }
            const localVarPath = `/sources/{id}/datastores`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceHosts(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceHosts.');
            }
            const localVarPath = `/sources/{id}/hosts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceIpaddresses.');
            }
            const localVarPath = `/sources/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceNetworkAdapters.');
            }
            const localVarPath = `/sources/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceNetworks.');
            }
            const localVarPath = `/sources/{id}/networks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceOrchestrationStacks.');
            }
            const localVarPath = `/sources/{id}/orchestration_stacks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionIpaddresses.');
            }
            const localVarPath = `/source_regions/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionNetworkAdapters.');
            }
            const localVarPath = `/source_regions/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionNetworks.');
            }
            const localVarPath = `/source_regions/{id}/networks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionOrchestrationStacks.');
            }
            const localVarPath = `/source_regions/{id}/orchestration_stacks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionSecurityGroups.');
            }
            const localVarPath = `/source_regions/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionServiceInstances.');
            }
            const localVarPath = `/source_regions/{id}/service_instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionServiceOfferings.');
            }
            const localVarPath = `/source_regions/{id}/service_offerings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionServicePlans.');
            }
            const localVarPath = `/source_regions/{id}/service_plans`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionSubnets.');
            }
            const localVarPath = `/source_regions/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionVms.');
            }
            const localVarPath = `/source_regions/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceRegionVolumes.');
            }
            const localVarPath = `/source_regions/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegions(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/source_regions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceSecurityGroups.');
            }
            const localVarPath = `/sources/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceServiceInstanceNodes.');
            }
            const localVarPath = `/sources/{id}/service_instance_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceServiceInstances.');
            }
            const localVarPath = `/sources/{id}/service_instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInventories(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceServiceInventories.');
            }
            const localVarPath = `/sources/{id}/service_inventories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceServiceOfferingNodes.');
            }
            const localVarPath = `/sources/{id}/service_offering_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceServiceOfferings.');
            }
            const localVarPath = `/sources/{id}/service_offerings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceServicePlans.');
            }
            const localVarPath = `/sources/{id}/service_plans`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSourceRegions(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceSourceRegions.');
            }
            const localVarPath = `/sources/{id}/source_regions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceSubnets.');
            }
            const localVarPath = `/sources/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSubscriptions(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceSubscriptions.');
            }
            const localVarPath = `/sources/{id}/subscriptions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceVms.');
            }
            const localVarPath = `/sources/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVolumeTypes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceVolumeTypes.');
            }
            const localVarPath = `/sources/{id}/volume_types`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceVolumes.');
            }
            const localVarPath = `/sources/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Source objects
         * @summary List Sources
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/sources`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubnetIpaddresses.');
            }
            const localVarPath = `/subnets/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubnetNetworkAdapters.');
            }
            const localVarPath = `/subnets/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubnetTags.');
            }
            const localVarPath = `/subnets/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnets(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/subnets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionIpaddresses.');
            }
            const localVarPath = `/subscriptions/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionNetworkAdapters.');
            }
            const localVarPath = `/subscriptions/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionNetworks.');
            }
            const localVarPath = `/subscriptions/{id}/networks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionOrchestrationStacks.');
            }
            const localVarPath = `/subscriptions/{id}/orchestration_stacks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionSecurityGroups.');
            }
            const localVarPath = `/subscriptions/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionServiceInstances.');
            }
            const localVarPath = `/subscriptions/{id}/service_instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionServiceOfferings.');
            }
            const localVarPath = `/subscriptions/{id}/service_offerings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionServicePlans.');
            }
            const localVarPath = `/subscriptions/{id}/service_plans`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionSubnets.');
            }
            const localVarPath = `/subscriptions/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionVms.');
            }
            const localVarPath = `/subscriptions/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSubscriptionVolumes.');
            }
            const localVarPath = `/subscriptions/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/subscriptions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagContainerGroups.');
            }
            const localVarPath = `/tags/{id}/container_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerImages(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagContainerImages.');
            }
            const localVarPath = `/tags/{id}/container_images`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagContainerNodes.');
            }
            const localVarPath = `/tags/{id}/container_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerProjects(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagContainerProjects.');
            }
            const localVarPath = `/tags/{id}/container_projects`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagContainerTemplates.');
            }
            const localVarPath = `/tags/{id}/container_templates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagIpaddresses.');
            }
            const localVarPath = `/tags/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagNetworkAdapters.');
            }
            const localVarPath = `/tags/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagNetworks.');
            }
            const localVarPath = `/tags/{id}/networks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagSecurityGroups.');
            }
            const localVarPath = `/tags/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagServiceInventories(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagServiceInventories.');
            }
            const localVarPath = `/tags/{id}/service_inventories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagServiceOfferings.');
            }
            const localVarPath = `/tags/{id}/service_offerings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagSubnets.');
            }
            const localVarPath = `/tags/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listTagVms.');
            }
            const localVarPath = `/tags/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/tags`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Task objects
         * @summary List Tasks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/tasks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listVmNetworkAdapters.');
            }
            const localVarPath = `/vms/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listVmSecurityGroups.');
            }
            const localVarPath = `/vms/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listVmTags.');
            }
            const localVarPath = `/vms/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmVolumeAttachments(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listVmVolumeAttachments.');
            }
            const localVarPath = `/vms/{id}/volume_attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listVmVolumes.');
            }
            const localVarPath = `/vms/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVms(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/vms`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeAttachments(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/volume_attachments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for VolumeType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypeVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listVolumeTypeVolumes.');
            }
            const localVarPath = `/volume_types/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/volume_types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Volume
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listVolumeVms.');
            }
            const localVarPath = `/volumes/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options: any = {}): RequestArgs {
            const localVarPath = `/volumes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Task id
         * @summary Order an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {OrderParametersServiceOffering} orderParametersServiceOffering Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderServiceOffering(id: string, orderParametersServiceOffering: OrderParametersServiceOffering, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling orderServiceOffering.');
            }
            // verify required parameter 'orderParametersServiceOffering' is not null or undefined
            if (orderParametersServiceOffering === null || orderParametersServiceOffering === undefined) {
                throw new RequiredError('orderParametersServiceOffering','Required parameter orderParametersServiceOffering was null or undefined when calling orderServiceOffering.');
            }
            const localVarPath = `/service_offerings/{id}/order`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrderParametersServiceOffering" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(orderParametersServiceOffering || {}) : (orderParametersServiceOffering || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Task id
         * @summary Order an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {OrderParametersServicePlan} orderParametersServicePlan Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderServicePlan(id: string, orderParametersServicePlan: OrderParametersServicePlan, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling orderServicePlan.');
            }
            // verify required parameter 'orderParametersServicePlan' is not null or undefined
            if (orderParametersServicePlan === null || orderParametersServicePlan === undefined) {
                throw new RequiredError('orderParametersServicePlan','Required parameter orderParametersServicePlan was null or undefined when calling orderServicePlan.');
            }
            const localVarPath = `/service_plans/{id}/order`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OrderParametersServicePlan" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(orderParametersServicePlan || {}) : (orderParametersServicePlan || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs a GraphQL Query
         * @summary Perform a GraphQL Query
         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphQL(graphQLRequest: GraphQLRequest, options: any = {}): RequestArgs {
            // verify required parameter 'graphQLRequest' is not null or undefined
            if (graphQLRequest === null || graphQLRequest === undefined) {
                throw new RequiredError('graphQLRequest','Required parameter graphQLRequest was null or undefined when calling postGraphQL.');
            }
            const localVarPath = `/graphql`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"GraphQLRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(graphQLRequest || {}) : (graphQLRequest || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Cluster object
         * @summary Show an existing Cluster
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showCluster(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showCluster.');
            }
            const localVarPath = `/clusters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Container object
         * @summary Show an existing Container
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainer(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showContainer.');
            }
            const localVarPath = `/containers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ContainerGroup object
         * @summary Show an existing ContainerGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerGroup(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showContainerGroup.');
            }
            const localVarPath = `/container_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ContainerImage object
         * @summary Show an existing ContainerImage
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerImage(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showContainerImage.');
            }
            const localVarPath = `/container_images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ContainerNode object
         * @summary Show an existing ContainerNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerNode(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showContainerNode.');
            }
            const localVarPath = `/container_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ContainerProject object
         * @summary Show an existing ContainerProject
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerProject(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showContainerProject.');
            }
            const localVarPath = `/container_projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ContainerResourceQuota object
         * @summary Show an existing ContainerResourceQuota
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerResourceQuota(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showContainerResourceQuota.');
            }
            const localVarPath = `/container_resource_quotas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ContainerTemplate object
         * @summary Show an existing ContainerTemplate
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerTemplate(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showContainerTemplate.');
            }
            const localVarPath = `/container_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Datastore object
         * @summary Show an existing Datastore
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDatastore(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showDatastore.');
            }
            const localVarPath = `/datastores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Flavor object
         * @summary Show an existing Flavor
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFlavor(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showFlavor.');
            }
            const localVarPath = `/flavors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Host object
         * @summary Show an existing Host
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showHost(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showHost.');
            }
            const localVarPath = `/hosts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Ipaddress object
         * @summary Show an existing Ipaddress
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showIpaddress(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showIpaddress.');
            }
            const localVarPath = `/ipaddresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Network object
         * @summary Show an existing Network
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNetwork(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showNetwork.');
            }
            const localVarPath = `/networks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a NetworkAdapter object
         * @summary Show an existing NetworkAdapter
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNetworkAdapter(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showNetworkAdapter.');
            }
            const localVarPath = `/network_adapters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a OrchestrationStack object
         * @summary Show an existing OrchestrationStack
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showOrchestrationStack(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showOrchestrationStack.');
            }
            const localVarPath = `/orchestration_stacks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a SecurityGroup object
         * @summary Show an existing SecurityGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSecurityGroup(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showSecurityGroup.');
            }
            const localVarPath = `/security_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ServiceInstance object
         * @summary Show an existing ServiceInstance
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInstance(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showServiceInstance.');
            }
            const localVarPath = `/service_instances/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ServiceInstanceNode object
         * @summary Show an existing ServiceInstanceNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInstanceNode(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showServiceInstanceNode.');
            }
            const localVarPath = `/service_instance_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ServiceInventory object
         * @summary Show an existing ServiceInventory
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInventory(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showServiceInventory.');
            }
            const localVarPath = `/service_inventories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ServiceOffering object
         * @summary Show an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOffering(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showServiceOffering.');
            }
            const localVarPath = `/service_offerings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ServiceOfferingIcon object
         * @summary Show an existing ServiceOfferingIcon
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingIcon(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showServiceOfferingIcon.');
            }
            const localVarPath = `/service_offering_icons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ServiceOfferingIcon IconData
         * @summary Show an existing ServiceOfferingIcon IconData
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingIconIconData(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showServiceOfferingIconIconData.');
            }
            const localVarPath = `/service_offering_icons/{id}/icon_data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ServiceOfferingNode object
         * @summary Show an existing ServiceOfferingNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingNode(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showServiceOfferingNode.');
            }
            const localVarPath = `/service_offering_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ServicePlan object
         * @summary Show an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServicePlan(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showServicePlan.');
            }
            const localVarPath = `/service_plans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSource(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showSource.');
            }
            const localVarPath = `/sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a SourceRegion object
         * @summary Show an existing SourceRegion
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSourceRegion(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showSourceRegion.');
            }
            const localVarPath = `/source_regions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Subnet object
         * @summary Show an existing Subnet
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSubnet(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showSubnet.');
            }
            const localVarPath = `/subnets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Subscription object
         * @summary Show an existing Subscription
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSubscription(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showSubscription.');
            }
            const localVarPath = `/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Tag object
         * @summary Show an existing Tag
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTag(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showTag.');
            }
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Task object
         * @summary Show an existing Task
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTask(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showTask.');
            }
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Vm object
         * @summary Show an existing Vm
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVm(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showVm.');
            }
            const localVarPath = `/vms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Volume object
         * @summary Show an existing Volume
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolume(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showVolume.');
            }
            const localVarPath = `/volumes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a VolumeAttachment object
         * @summary Show an existing VolumeAttachment
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolumeAttachment(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showVolumeAttachment.');
            }
            const localVarPath = `/volume_attachments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a VolumeType object
         * @summary Show an existing VolumeType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolumeType(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showVolumeType.');
            }
            const localVarPath = `/volume_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Task object
         * @summary Update an existing Task
         * @param {string} id ID of the resource
         * @param {Task} task Task attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(id: string, task: Task, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateTask.');
            }
            // verify required parameter 'task' is not null or undefined
            if (task === null || task === undefined) {
                throw new RequiredError('task','Required parameter task was null or undefined when calling updateTask.');
            }
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Task" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(task || {}) : (task || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a Task id
         * @summary Invokes computing of ServiceInventories for given ServiceOffering
         * @param {string} id ID of the resource
         * @param {AppliedInventoriesParametersServicePlan} appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedInventoriesForServiceOffering(id: string, appliedInventoriesParametersServicePlan: AppliedInventoriesParametersServicePlan, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).appliedInventoriesForServiceOffering(id, appliedInventoriesParametersServicePlan, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentation(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getDocumentation(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Cluster
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusterHosts(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listClusterHosts(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusters(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClustersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listClusters(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Container objects
         * @summary List Containers for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroupContainers(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerGroupContainers(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroupTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerGroupTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroups(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerGroups(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerImage
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerImageTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerImageTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerImages(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImagesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerImages(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodeContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerNodeContainerGroups(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodeTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerNodeTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerNodesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerNodes(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerProjectContainerGroups(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerResourceQuota(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerResourceQuotaCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerProjectContainerResourceQuota(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTemplatesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerProjectContainerTemplates(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerProjectTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjects(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerProjectsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerProjects(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerResourceQuota(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerResourceQuotaCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerResourceQuota(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerTemplate
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerTemplateTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerTemplateTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerTemplates(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTemplatesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainerTemplates(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Container objects
         * @summary List Containers
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainers(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listContainers(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatastores(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatastoresCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listDatastores(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Flavor objects
         * @summary List Flavors
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlavors(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlavorsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listFlavors(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Host objects
         * @summary List Hosts
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHosts(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listHosts(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Ipaddress
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIpaddressTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listIpaddressTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIpaddresses(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listIpaddresses(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapterIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listNetworkAdapterIpaddresses(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapterTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listNetworkAdapterTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapters(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listNetworkAdapters(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listNetworkSubnets(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listNetworkTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listNetworks(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listOrchestrationStackIpaddresses(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listOrchestrationStackNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listOrchestrationStackNetworks(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listOrchestrationStackSecurityGroups(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listOrchestrationStackSubnets(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listOrchestrationStackVms(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listOrchestrationStackVolumes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStacks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrchestrationStacksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listOrchestrationStacks(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroupTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSecurityGroupTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroupVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSecurityGroupVms(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroups(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSecurityGroups(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstanceNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstanceNodesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceInstanceNodes(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for ServiceInstance
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstanceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstanceNodesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceInstanceServiceInstanceNodes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstances(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceInstances(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInventories(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInventoriesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceInventories(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceInventory
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInventoryTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceInventoryTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceOfferingIcon objects
         * @summary List ServiceOfferingIcons
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingIcons(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingIconsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceOfferingIcons(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingNodesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceOfferingNodes(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceOfferingServiceInstances(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingNodesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceOfferingServiceOfferingNodes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlansCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceOfferingServicePlans(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceOfferingTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferings(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServiceOfferings(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServicePlan
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServicePlanServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServicePlanServiceInstances(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServicePlans(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlansCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listServicePlans(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Availability objects
         * @summary List Availabilities for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceAvailabilities(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilitiesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceAvailabilities(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceClusters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClustersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceClusters(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceContainerGroups(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerImages(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImagesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceContainerImages(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerNodesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceContainerNodes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerProjects(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerProjectsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceContainerProjects(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTemplatesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceContainerTemplates(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Container objects
         * @summary List Containers for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainers(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceContainers(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceDatastores(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatastoresCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceDatastores(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceHosts(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceHosts(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceIpaddresses(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceNetworks(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrchestrationStacksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceOrchestrationStacks(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionIpaddresses(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionNetworks(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrchestrationStacksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionOrchestrationStacks(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionSecurityGroups(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionServiceInstances(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionServiceOfferings(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlansCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionServicePlans(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionSubnets(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionVms(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegionVolumes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegions(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceRegionsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceRegions(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceSecurityGroups(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstanceNodesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceServiceInstanceNodes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceServiceInstances(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInventories(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInventoriesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceServiceInventories(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingNodesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceServiceOfferingNodes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceServiceOfferings(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlansCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceServicePlans(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSourceRegions(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceRegionsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceSourceRegions(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceSubnets(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSubscriptions(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceSubscriptions(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceVms(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVolumeTypes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeTypesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceVolumeTypes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceVolumes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Source objects
         * @summary List Sources
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSources(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubnetIpaddresses(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubnetNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubnetTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnets(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubnets(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionIpaddresses(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionNetworks(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrchestrationStacksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionOrchestrationStacks(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionSecurityGroups(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionServiceInstances(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionServiceOfferings(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlansCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionServicePlans(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionSubnets(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionVms(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptionVolumes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSubscriptions(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagContainerGroups(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerImages(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImagesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagContainerImages(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerNodesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagContainerNodes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerProjects(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerProjectsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagContainerProjects(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTemplatesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagContainerTemplates(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagIpaddresses(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagNetworks(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagSecurityGroups(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagServiceInventories(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInventoriesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagServiceInventories(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagServiceOfferings(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagSubnets(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTagVms(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTags(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Task objects
         * @summary List Tasks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listTasks(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVmNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVmSecurityGroups(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVmTags(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmVolumeAttachments(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeAttachmentsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVmVolumeAttachments(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVmVolumes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVms(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVms(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeAttachments(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeAttachmentsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVolumeAttachments(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for VolumeType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypeVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVolumeTypeVolumes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeTypesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVolumeTypes(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Volume
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVolumeVms(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listVolumes(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Task id
         * @summary Order an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {OrderParametersServiceOffering} orderParametersServiceOffering Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderServiceOffering(id: string, orderParametersServiceOffering: OrderParametersServiceOffering, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).orderServiceOffering(id, orderParametersServiceOffering, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Task id
         * @summary Order an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {OrderParametersServicePlan} orderParametersServicePlan Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderServicePlan(id: string, orderParametersServicePlan: OrderParametersServicePlan, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).orderServicePlan(id, orderParametersServicePlan, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Performs a GraphQL Query
         * @summary Perform a GraphQL Query
         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphQL(graphQLRequest: GraphQLRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphQLResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).postGraphQL(graphQLRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Cluster object
         * @summary Show an existing Cluster
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showCluster(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cluster> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showCluster(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Container object
         * @summary Show an existing Container
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainer(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Container> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showContainer(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ContainerGroup object
         * @summary Show an existing ContainerGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerGroup(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroup> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showContainerGroup(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ContainerImage object
         * @summary Show an existing ContainerImage
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerImage(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImage> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showContainerImage(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ContainerNode object
         * @summary Show an existing ContainerNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerNode(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerNode> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showContainerNode(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ContainerProject object
         * @summary Show an existing ContainerProject
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerProject(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerProject> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showContainerProject(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ContainerResourceQuota object
         * @summary Show an existing ContainerResourceQuota
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerResourceQuota(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerResourceQuota> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showContainerResourceQuota(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ContainerTemplate object
         * @summary Show an existing ContainerTemplate
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerTemplate(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTemplate> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showContainerTemplate(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Datastore object
         * @summary Show an existing Datastore
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDatastore(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastore> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showDatastore(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Flavor object
         * @summary Show an existing Flavor
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFlavor(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Flavor> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showFlavor(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Host object
         * @summary Show an existing Host
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showHost(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Host> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showHost(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Ipaddress object
         * @summary Show an existing Ipaddress
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showIpaddress(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ipaddress> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showIpaddress(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Network object
         * @summary Show an existing Network
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNetwork(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Network> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showNetwork(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a NetworkAdapter object
         * @summary Show an existing NetworkAdapter
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNetworkAdapter(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdapter> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showNetworkAdapter(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a OrchestrationStack object
         * @summary Show an existing OrchestrationStack
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showOrchestrationStack(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrchestrationStack> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showOrchestrationStack(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a SecurityGroup object
         * @summary Show an existing SecurityGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSecurityGroup(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroup> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showSecurityGroup(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ServiceInstance object
         * @summary Show an existing ServiceInstance
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInstance(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstance> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showServiceInstance(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ServiceInstanceNode object
         * @summary Show an existing ServiceInstanceNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInstanceNode(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstanceNode> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showServiceInstanceNode(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ServiceInventory object
         * @summary Show an existing ServiceInventory
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInventory(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInventory> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showServiceInventory(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ServiceOffering object
         * @summary Show an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOffering(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOffering> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showServiceOffering(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ServiceOfferingIcon object
         * @summary Show an existing ServiceOfferingIcon
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingIcon(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingIcon> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showServiceOfferingIcon(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ServiceOfferingIcon IconData
         * @summary Show an existing ServiceOfferingIcon IconData
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingIconIconData(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showServiceOfferingIconIconData(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ServiceOfferingNode object
         * @summary Show an existing ServiceOfferingNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingNode(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingNode> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showServiceOfferingNode(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ServicePlan object
         * @summary Show an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServicePlan(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlan> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showServicePlan(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSource(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showSource(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a SourceRegion object
         * @summary Show an existing SourceRegion
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSourceRegion(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceRegion> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showSourceRegion(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Subnet object
         * @summary Show an existing Subnet
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSubnet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subnet> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showSubnet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Subscription object
         * @summary Show an existing Subscription
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSubscription(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showSubscription(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Tag object
         * @summary Show an existing Tag
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTag(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showTag(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Task object
         * @summary Show an existing Task
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTask(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showTask(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Vm object
         * @summary Show an existing Vm
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVm(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vm> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showVm(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Volume object
         * @summary Show an existing Volume
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolume(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volume> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showVolume(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a VolumeAttachment object
         * @summary Show an existing VolumeAttachment
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolumeAttachment(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeAttachment> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showVolumeAttachment(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a VolumeType object
         * @summary Show an existing VolumeType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolumeType(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeType> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showVolumeType(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a Task object
         * @summary Update an existing Task
         * @param {string} id ID of the resource
         * @param {Task} task Task attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(id: string, task: Task, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updateTask(id, task, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns a Task id
         * @summary Invokes computing of ServiceInventories for given ServiceOffering
         * @param {string} id ID of the resource
         * @param {AppliedInventoriesParametersServicePlan} appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedInventoriesForServiceOffering(id: string, appliedInventoriesParametersServicePlan: AppliedInventoriesParametersServicePlan, options?: any) {
            return DefaultApiFp(configuration).appliedInventoriesForServiceOffering(id, appliedInventoriesParametersServicePlan, options)(axios, basePath);
        },
        /**
         *
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentation(options?: any) {
            return DefaultApiFp(configuration).getDocumentation(options)(axios, basePath);
        },
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Cluster
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusterHosts(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listClusterHosts(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusters(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listClusters(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Container objects
         * @summary List Containers for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroupContainers(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerGroupContainers(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroupTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerGroupTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroups(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerGroups(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerImage
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerImageTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerImageTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerImages(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerImages(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodeContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerNodeContainerGroups(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodeTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerNodeTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerNodes(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerProjectContainerGroups(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerResourceQuota(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerProjectContainerResourceQuota(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerProjectContainerTemplates(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerProjectTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjects(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerProjects(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerResourceQuota(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerResourceQuota(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerTemplate
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerTemplateTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerTemplateTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerTemplates(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainerTemplates(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Container objects
         * @summary List Containers
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainers(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listContainers(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatastores(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listDatastores(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Flavor objects
         * @summary List Flavors
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlavors(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listFlavors(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Host objects
         * @summary List Hosts
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHosts(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listHosts(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Ipaddress
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIpaddressTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listIpaddressTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIpaddresses(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listIpaddresses(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapterIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listNetworkAdapterIpaddresses(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapterTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listNetworkAdapterTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapters(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listNetworkAdapters(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listNetworkSubnets(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listNetworkTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listNetworks(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listOrchestrationStackIpaddresses(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listOrchestrationStackNetworkAdapters(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listOrchestrationStackNetworks(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listOrchestrationStackSecurityGroups(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listOrchestrationStackSubnets(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listOrchestrationStackVms(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listOrchestrationStackVolumes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStacks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listOrchestrationStacks(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroupTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSecurityGroupTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroupVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSecurityGroupVms(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroups(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSecurityGroups(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstanceNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceInstanceNodes(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for ServiceInstance
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstanceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceInstanceServiceInstanceNodes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstances(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceInstances(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInventories(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceInventories(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceInventory
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInventoryTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceInventoryTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceOfferingIcon objects
         * @summary List ServiceOfferingIcons
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingIcons(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceOfferingIcons(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceOfferingNodes(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceOfferingServiceInstances(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceOfferingServiceOfferingNodes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceOfferingServicePlans(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceOfferingTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferings(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServiceOfferings(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServicePlan
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServicePlanServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServicePlanServiceInstances(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServicePlans(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listServicePlans(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Availability objects
         * @summary List Availabilities for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceAvailabilities(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceAvailabilities(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceClusters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceClusters(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceContainerGroups(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerImages(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceContainerImages(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceContainerNodes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerProjects(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceContainerProjects(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceContainerTemplates(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Container objects
         * @summary List Containers for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainers(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceContainers(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceDatastores(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceDatastores(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceHosts(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceHosts(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceIpaddresses(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceNetworkAdapters(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceNetworks(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceOrchestrationStacks(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionIpaddresses(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionNetworkAdapters(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionNetworks(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionOrchestrationStacks(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionSecurityGroups(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionServiceInstances(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionServiceOfferings(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionServicePlans(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionSubnets(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionVms(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegionVolumes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegions(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceRegions(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceSecurityGroups(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceServiceInstanceNodes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceServiceInstances(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInventories(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceServiceInventories(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceServiceOfferingNodes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceServiceOfferings(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceServicePlans(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSourceRegions(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceSourceRegions(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceSubnets(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSubscriptions(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceSubscriptions(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceVms(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVolumeTypes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceVolumeTypes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSourceVolumes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Source objects
         * @summary List Sources
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSources(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubnetIpaddresses(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubnetNetworkAdapters(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubnetTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnets(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubnets(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionIpaddresses(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionNetworkAdapters(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionNetworks(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionOrchestrationStacks(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionSecurityGroups(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionServiceInstances(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionServiceOfferings(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionServicePlans(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionSubnets(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionVms(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptionVolumes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listSubscriptions(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagContainerGroups(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerImages(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagContainerImages(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagContainerNodes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerProjects(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagContainerProjects(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagContainerTemplates(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagIpaddresses(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagNetworkAdapters(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Network objects
         * @summary List Networks for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagNetworks(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagSecurityGroups(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagServiceInventories(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagServiceInventories(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagServiceOfferings(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagSubnets(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTagVms(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTags(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Task objects
         * @summary List Tasks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listTasks(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVmNetworkAdapters(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVmSecurityGroups(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVmTags(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmVolumeAttachments(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVmVolumeAttachments(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVmVolumes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVms(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVms(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeAttachments(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVolumeAttachments(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for VolumeType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypeVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVolumeTypeVolumes(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVolumeTypes(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Volume
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVolumeVms(id, limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns an array of Volume objects
         * @summary List Volumes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {any} [filter] Filter for querying collections.
         * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
            return DefaultApiFp(configuration).listVolumes(limit, offset, filter, sortBy, options)(axios, basePath);
        },
        /**
         * Returns a Task id
         * @summary Order an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {OrderParametersServiceOffering} orderParametersServiceOffering Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderServiceOffering(id: string, orderParametersServiceOffering: OrderParametersServiceOffering, options?: any) {
            return DefaultApiFp(configuration).orderServiceOffering(id, orderParametersServiceOffering, options)(axios, basePath);
        },
        /**
         * Returns a Task id
         * @summary Order an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {OrderParametersServicePlan} orderParametersServicePlan Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderServicePlan(id: string, orderParametersServicePlan: OrderParametersServicePlan, options?: any) {
            return DefaultApiFp(configuration).orderServicePlan(id, orderParametersServicePlan, options)(axios, basePath);
        },
        /**
         * Performs a GraphQL Query
         * @summary Perform a GraphQL Query
         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphQL(graphQLRequest: GraphQLRequest, options?: any) {
            return DefaultApiFp(configuration).postGraphQL(graphQLRequest, options)(axios, basePath);
        },
        /**
         * Returns a Cluster object
         * @summary Show an existing Cluster
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showCluster(id: string, options?: any) {
            return DefaultApiFp(configuration).showCluster(id, options)(axios, basePath);
        },
        /**
         * Returns a Container object
         * @summary Show an existing Container
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainer(id: string, options?: any) {
            return DefaultApiFp(configuration).showContainer(id, options)(axios, basePath);
        },
        /**
         * Returns a ContainerGroup object
         * @summary Show an existing ContainerGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerGroup(id: string, options?: any) {
            return DefaultApiFp(configuration).showContainerGroup(id, options)(axios, basePath);
        },
        /**
         * Returns a ContainerImage object
         * @summary Show an existing ContainerImage
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerImage(id: string, options?: any) {
            return DefaultApiFp(configuration).showContainerImage(id, options)(axios, basePath);
        },
        /**
         * Returns a ContainerNode object
         * @summary Show an existing ContainerNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerNode(id: string, options?: any) {
            return DefaultApiFp(configuration).showContainerNode(id, options)(axios, basePath);
        },
        /**
         * Returns a ContainerProject object
         * @summary Show an existing ContainerProject
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerProject(id: string, options?: any) {
            return DefaultApiFp(configuration).showContainerProject(id, options)(axios, basePath);
        },
        /**
         * Returns a ContainerResourceQuota object
         * @summary Show an existing ContainerResourceQuota
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerResourceQuota(id: string, options?: any) {
            return DefaultApiFp(configuration).showContainerResourceQuota(id, options)(axios, basePath);
        },
        /**
         * Returns a ContainerTemplate object
         * @summary Show an existing ContainerTemplate
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerTemplate(id: string, options?: any) {
            return DefaultApiFp(configuration).showContainerTemplate(id, options)(axios, basePath);
        },
        /**
         * Returns a Datastore object
         * @summary Show an existing Datastore
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDatastore(id: string, options?: any) {
            return DefaultApiFp(configuration).showDatastore(id, options)(axios, basePath);
        },
        /**
         * Returns a Flavor object
         * @summary Show an existing Flavor
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFlavor(id: string, options?: any) {
            return DefaultApiFp(configuration).showFlavor(id, options)(axios, basePath);
        },
        /**
         * Returns a Host object
         * @summary Show an existing Host
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showHost(id: string, options?: any) {
            return DefaultApiFp(configuration).showHost(id, options)(axios, basePath);
        },
        /**
         * Returns a Ipaddress object
         * @summary Show an existing Ipaddress
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showIpaddress(id: string, options?: any) {
            return DefaultApiFp(configuration).showIpaddress(id, options)(axios, basePath);
        },
        /**
         * Returns a Network object
         * @summary Show an existing Network
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNetwork(id: string, options?: any) {
            return DefaultApiFp(configuration).showNetwork(id, options)(axios, basePath);
        },
        /**
         * Returns a NetworkAdapter object
         * @summary Show an existing NetworkAdapter
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNetworkAdapter(id: string, options?: any) {
            return DefaultApiFp(configuration).showNetworkAdapter(id, options)(axios, basePath);
        },
        /**
         * Returns a OrchestrationStack object
         * @summary Show an existing OrchestrationStack
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showOrchestrationStack(id: string, options?: any) {
            return DefaultApiFp(configuration).showOrchestrationStack(id, options)(axios, basePath);
        },
        /**
         * Returns a SecurityGroup object
         * @summary Show an existing SecurityGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSecurityGroup(id: string, options?: any) {
            return DefaultApiFp(configuration).showSecurityGroup(id, options)(axios, basePath);
        },
        /**
         * Returns a ServiceInstance object
         * @summary Show an existing ServiceInstance
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInstance(id: string, options?: any) {
            return DefaultApiFp(configuration).showServiceInstance(id, options)(axios, basePath);
        },
        /**
         * Returns a ServiceInstanceNode object
         * @summary Show an existing ServiceInstanceNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInstanceNode(id: string, options?: any) {
            return DefaultApiFp(configuration).showServiceInstanceNode(id, options)(axios, basePath);
        },
        /**
         * Returns a ServiceInventory object
         * @summary Show an existing ServiceInventory
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInventory(id: string, options?: any) {
            return DefaultApiFp(configuration).showServiceInventory(id, options)(axios, basePath);
        },
        /**
         * Returns a ServiceOffering object
         * @summary Show an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOffering(id: string, options?: any) {
            return DefaultApiFp(configuration).showServiceOffering(id, options)(axios, basePath);
        },
        /**
         * Returns a ServiceOfferingIcon object
         * @summary Show an existing ServiceOfferingIcon
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingIcon(id: string, options?: any) {
            return DefaultApiFp(configuration).showServiceOfferingIcon(id, options)(axios, basePath);
        },
        /**
         * Returns a ServiceOfferingIcon IconData
         * @summary Show an existing ServiceOfferingIcon IconData
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingIconIconData(id: string, options?: any) {
            return DefaultApiFp(configuration).showServiceOfferingIconIconData(id, options)(axios, basePath);
        },
        /**
         * Returns a ServiceOfferingNode object
         * @summary Show an existing ServiceOfferingNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingNode(id: string, options?: any) {
            return DefaultApiFp(configuration).showServiceOfferingNode(id, options)(axios, basePath);
        },
        /**
         * Returns a ServicePlan object
         * @summary Show an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServicePlan(id: string, options?: any) {
            return DefaultApiFp(configuration).showServicePlan(id, options)(axios, basePath);
        },
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSource(id: string, options?: any) {
            return DefaultApiFp(configuration).showSource(id, options)(axios, basePath);
        },
        /**
         * Returns a SourceRegion object
         * @summary Show an existing SourceRegion
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSourceRegion(id: string, options?: any) {
            return DefaultApiFp(configuration).showSourceRegion(id, options)(axios, basePath);
        },
        /**
         * Returns a Subnet object
         * @summary Show an existing Subnet
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSubnet(id: string, options?: any) {
            return DefaultApiFp(configuration).showSubnet(id, options)(axios, basePath);
        },
        /**
         * Returns a Subscription object
         * @summary Show an existing Subscription
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSubscription(id: string, options?: any) {
            return DefaultApiFp(configuration).showSubscription(id, options)(axios, basePath);
        },
        /**
         * Returns a Tag object
         * @summary Show an existing Tag
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTag(id: string, options?: any) {
            return DefaultApiFp(configuration).showTag(id, options)(axios, basePath);
        },
        /**
         * Returns a Task object
         * @summary Show an existing Task
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTask(id: string, options?: any) {
            return DefaultApiFp(configuration).showTask(id, options)(axios, basePath);
        },
        /**
         * Returns a Vm object
         * @summary Show an existing Vm
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVm(id: string, options?: any) {
            return DefaultApiFp(configuration).showVm(id, options)(axios, basePath);
        },
        /**
         * Returns a Volume object
         * @summary Show an existing Volume
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolume(id: string, options?: any) {
            return DefaultApiFp(configuration).showVolume(id, options)(axios, basePath);
        },
        /**
         * Returns a VolumeAttachment object
         * @summary Show an existing VolumeAttachment
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolumeAttachment(id: string, options?: any) {
            return DefaultApiFp(configuration).showVolumeAttachment(id, options)(axios, basePath);
        },
        /**
         * Returns a VolumeType object
         * @summary Show an existing VolumeType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolumeType(id: string, options?: any) {
            return DefaultApiFp(configuration).showVolumeType(id, options)(axios, basePath);
        },
        /**
         * Updates a Task object
         * @summary Update an existing Task
         * @param {string} id ID of the resource
         * @param {Task} task Task attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(id: string, task: Task, options?: any) {
            return DefaultApiFp(configuration).updateTask(id, task, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns a Task id
     * @summary Invokes computing of ServiceInventories for given ServiceOffering
     * @param {string} id ID of the resource
     * @param {AppliedInventoriesParametersServicePlan} appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appliedInventoriesForServiceOffering(id: string, appliedInventoriesParametersServicePlan: AppliedInventoriesParametersServicePlan, options?: any) {
        return DefaultApiFp(this.configuration).appliedInventoriesForServiceOffering(id, appliedInventoriesParametersServicePlan, options)(this.axios, this.basePath);
    }

    /**
     *
     * @summary Return this API document in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDocumentation(options?: any) {
        return DefaultApiFp(this.configuration).getDocumentation(options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Host objects
     * @summary List Hosts for Cluster
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listClusterHosts(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listClusterHosts(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Cluster objects
     * @summary List Clusters
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listClusters(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listClusters(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Container objects
     * @summary List Containers for ContainerGroup
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerGroupContainers(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerGroupContainers(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for ContainerGroup
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerGroupTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerGroupTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerGroup objects
     * @summary List ContainerGroups
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerGroups(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerGroups(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for ContainerImage
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerImageTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerImageTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerImage objects
     * @summary List ContainerImages
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerImages(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerImages(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerGroup objects
     * @summary List ContainerGroups for ContainerNode
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerNodeContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerNodeContainerGroups(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for ContainerNode
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerNodeTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerNodeTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerNode objects
     * @summary List ContainerNodes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerNodes(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerGroup objects
     * @summary List ContainerGroups for ContainerProject
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerProjectContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerProjectContainerGroups(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerResourceQuota objects
     * @summary List ContainerResourceQuota for ContainerProject
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerProjectContainerResourceQuota(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerProjectContainerResourceQuota(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerTemplate objects
     * @summary List ContainerTemplates for ContainerProject
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerProjectContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerProjectContainerTemplates(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for ContainerProject
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerProjectTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerProjectTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerProject objects
     * @summary List ContainerProjects
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerProjects(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerProjects(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerResourceQuota objects
     * @summary List ContainerResourceQuota
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerResourceQuota(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerResourceQuota(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for ContainerTemplate
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerTemplateTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerTemplateTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerTemplate objects
     * @summary List ContainerTemplates
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainerTemplates(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainerTemplates(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Container objects
     * @summary List Containers
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listContainers(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listContainers(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Datastore objects
     * @summary List Datastores
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listDatastores(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listDatastores(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Flavor objects
     * @summary List Flavors
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listFlavors(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listFlavors(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Host objects
     * @summary List Hosts
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listHosts(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listHosts(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for Ipaddress
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listIpaddressTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listIpaddressTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listIpaddresses(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listIpaddresses(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for NetworkAdapter
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listNetworkAdapterIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listNetworkAdapterIpaddresses(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for NetworkAdapter
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listNetworkAdapterTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listNetworkAdapterTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listNetworkAdapters(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listNetworkAdapters(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for Network
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listNetworkSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listNetworkSubnets(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for Network
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listNetworkTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listNetworkTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Network objects
     * @summary List Networks
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listNetworks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listNetworks(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listOrchestrationStackIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listOrchestrationStackIpaddresses(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listOrchestrationStackNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listOrchestrationStackNetworkAdapters(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Network objects
     * @summary List Networks for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listOrchestrationStackNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listOrchestrationStackNetworks(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listOrchestrationStackSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listOrchestrationStackSecurityGroups(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listOrchestrationStackSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listOrchestrationStackSubnets(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Vm objects
     * @summary List Vms for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listOrchestrationStackVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listOrchestrationStackVms(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Volume objects
     * @summary List Volumes for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listOrchestrationStackVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listOrchestrationStackVolumes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of OrchestrationStack objects
     * @summary List OrchestrationStacks
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listOrchestrationStacks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listOrchestrationStacks(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for SecurityGroup
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSecurityGroupTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSecurityGroupTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Vm objects
     * @summary List Vms for SecurityGroup
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSecurityGroupVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSecurityGroupVms(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSecurityGroups(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSecurityGroups(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInstanceNode objects
     * @summary List ServiceInstanceNodes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceInstanceNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceInstanceNodes(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInstanceNode objects
     * @summary List ServiceInstanceNodes for ServiceInstance
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceInstanceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceInstanceServiceInstanceNodes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceInstances(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceInstances(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInventory objects
     * @summary List ServiceInventories
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceInventories(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceInventories(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for ServiceInventory
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceInventoryTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceInventoryTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceOfferingIcon objects
     * @summary List ServiceOfferingIcons
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceOfferingIcons(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceOfferingIcons(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceOfferingNode objects
     * @summary List ServiceOfferingNodes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceOfferingNodes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceOfferingNodes(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances for ServiceOffering
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceOfferingServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceOfferingServiceInstances(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceOfferingNode objects
     * @summary List ServiceOfferingNodes for ServiceOffering
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceOfferingServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceOfferingServiceOfferingNodes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServicePlan objects
     * @summary List ServicePlans for ServiceOffering
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceOfferingServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceOfferingServicePlans(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for ServiceOffering
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceOfferingTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceOfferingTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceOffering objects
     * @summary List ServiceOfferings
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServiceOfferings(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServiceOfferings(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances for ServicePlan
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServicePlanServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServicePlanServiceInstances(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServicePlan objects
     * @summary List ServicePlans
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listServicePlans(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listServicePlans(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Availability objects
     * @summary List Availabilities for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceAvailabilities(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceAvailabilities(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Cluster objects
     * @summary List Clusters for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceClusters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceClusters(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerGroup objects
     * @summary List ContainerGroups for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceContainerGroups(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerImage objects
     * @summary List ContainerImages for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceContainerImages(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceContainerImages(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerNode objects
     * @summary List ContainerNodes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceContainerNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceContainerNodes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerProject objects
     * @summary List ContainerProjects for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceContainerProjects(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceContainerProjects(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerTemplate objects
     * @summary List ContainerTemplates for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceContainerTemplates(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Container objects
     * @summary List Containers for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceContainers(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceContainers(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Datastore objects
     * @summary List Datastores for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceDatastores(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceDatastores(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Host objects
     * @summary List Hosts for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceHosts(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceHosts(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceIpaddresses(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceNetworkAdapters(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Network objects
     * @summary List Networks for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceNetworks(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of OrchestrationStack objects
     * @summary List OrchestrationStacks for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceOrchestrationStacks(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionIpaddresses(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionNetworkAdapters(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Network objects
     * @summary List Networks for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionNetworks(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of OrchestrationStack objects
     * @summary List OrchestrationStacks for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionOrchestrationStacks(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionSecurityGroups(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionServiceInstances(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceOffering objects
     * @summary List ServiceOfferings for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionServiceOfferings(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServicePlan objects
     * @summary List ServicePlans for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionServicePlans(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionSubnets(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Vm objects
     * @summary List Vms for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionVms(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Volume objects
     * @summary List Volumes for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegionVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegionVolumes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of SourceRegion objects
     * @summary List SourceRegions
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceRegions(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceRegions(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceSecurityGroups(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInstanceNode objects
     * @summary List ServiceInstanceNodes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceServiceInstanceNodes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceServiceInstances(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInventory objects
     * @summary List ServiceInventories for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceServiceInventories(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceServiceInventories(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceOfferingNode objects
     * @summary List ServiceOfferingNodes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceServiceOfferingNodes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceOffering objects
     * @summary List ServiceOfferings for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceServiceOfferings(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServicePlan objects
     * @summary List ServicePlans for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceServicePlans(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of SourceRegion objects
     * @summary List SourceRegions for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceSourceRegions(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceSourceRegions(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceSubnets(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Subscription objects
     * @summary List Subscriptions for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceSubscriptions(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceSubscriptions(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Vm objects
     * @summary List Vms for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceVms(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of VolumeType objects
     * @summary List VolumeTypes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceVolumeTypes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceVolumeTypes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Volume objects
     * @summary List Volumes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSourceVolumes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Source objects
     * @summary List Sources
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSources(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSources(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for Subnet
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubnetIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubnetIpaddresses(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for Subnet
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubnetNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubnetNetworkAdapters(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for Subnet
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubnetTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubnetTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Subnet objects
     * @summary List Subnets
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubnets(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubnets(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionIpaddresses(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionNetworkAdapters(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Network objects
     * @summary List Networks for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionNetworks(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of OrchestrationStack objects
     * @summary List OrchestrationStacks for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionOrchestrationStacks(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionSecurityGroups(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionServiceInstances(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionServiceInstances(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceOffering objects
     * @summary List ServiceOfferings for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionServiceOfferings(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServicePlan objects
     * @summary List ServicePlans for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionServicePlans(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionServicePlans(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionSubnets(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Vm objects
     * @summary List Vms for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionVms(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Volume objects
     * @summary List Volumes for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptionVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptionVolumes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Subscription objects
     * @summary List Subscriptions
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSubscriptions(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listSubscriptions(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerGroup objects
     * @summary List ContainerGroups for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagContainerGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagContainerGroups(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerImage objects
     * @summary List ContainerImages for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagContainerImages(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagContainerImages(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerNode objects
     * @summary List ContainerNodes for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagContainerNodes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagContainerNodes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerProject objects
     * @summary List ContainerProjects for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagContainerProjects(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagContainerProjects(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ContainerTemplate objects
     * @summary List ContainerTemplates for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagContainerTemplates(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagContainerTemplates(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagIpaddresses(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagIpaddresses(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagNetworkAdapters(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Network objects
     * @summary List Networks for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagNetworks(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagNetworks(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagSecurityGroups(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceInventory objects
     * @summary List ServiceInventories for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagServiceInventories(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagServiceInventories(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ServiceOffering objects
     * @summary List ServiceOfferings for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagServiceOfferings(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagServiceOfferings(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagSubnets(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagSubnets(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Vm objects
     * @summary List Vms for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTagVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTagVms(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTags(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTags(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Task objects
     * @summary List Tasks
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTasks(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listTasks(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for Vm
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVmNetworkAdapters(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVmNetworkAdapters(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for Vm
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVmSecurityGroups(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVmSecurityGroups(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Tag objects
     * @summary List Tags for Vm
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVmTags(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVmTags(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of VolumeAttachment objects
     * @summary List VolumeAttachments for Vm
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVmVolumeAttachments(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVmVolumeAttachments(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Volume objects
     * @summary List Volumes for Vm
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVmVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVmVolumes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Vm objects
     * @summary List Vms
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVms(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVms(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of VolumeAttachment objects
     * @summary List VolumeAttachments
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVolumeAttachments(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVolumeAttachments(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Volume objects
     * @summary List Volumes for VolumeType
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVolumeTypeVolumes(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVolumeTypeVolumes(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of VolumeType objects
     * @summary List VolumeTypes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVolumeTypes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVolumeTypes(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Vm objects
     * @summary List Vms for Volume
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVolumeVms(id: string, limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVolumeVms(id, limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Volume objects
     * @summary List Volumes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {any} [filter] Filter for querying collections.
     * @param {Object} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listVolumes(limit?: number, offset?: number, filter?: any, sortBy?: Object, options?: any) {
        return DefaultApiFp(this.configuration).listVolumes(limit, offset, filter, sortBy, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Task id
     * @summary Order an existing ServiceOffering
     * @param {string} id ID of the resource
     * @param {OrderParametersServiceOffering} orderParametersServiceOffering Order parameters defining the service and provider control
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orderServiceOffering(id: string, orderParametersServiceOffering: OrderParametersServiceOffering, options?: any) {
        return DefaultApiFp(this.configuration).orderServiceOffering(id, orderParametersServiceOffering, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Task id
     * @summary Order an existing ServicePlan
     * @param {string} id ID of the resource
     * @param {OrderParametersServicePlan} orderParametersServicePlan Order parameters defining the service and provider control
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public orderServicePlan(id: string, orderParametersServicePlan: OrderParametersServicePlan, options?: any) {
        return DefaultApiFp(this.configuration).orderServicePlan(id, orderParametersServicePlan, options)(this.axios, this.basePath);
    }

    /**
     * Performs a GraphQL Query
     * @summary Perform a GraphQL Query
     * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postGraphQL(graphQLRequest: GraphQLRequest, options?: any) {
        return DefaultApiFp(this.configuration).postGraphQL(graphQLRequest, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Cluster object
     * @summary Show an existing Cluster
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showCluster(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showCluster(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Container object
     * @summary Show an existing Container
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showContainer(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showContainer(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ContainerGroup object
     * @summary Show an existing ContainerGroup
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showContainerGroup(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showContainerGroup(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ContainerImage object
     * @summary Show an existing ContainerImage
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showContainerImage(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showContainerImage(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ContainerNode object
     * @summary Show an existing ContainerNode
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showContainerNode(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showContainerNode(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ContainerProject object
     * @summary Show an existing ContainerProject
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showContainerProject(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showContainerProject(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ContainerResourceQuota object
     * @summary Show an existing ContainerResourceQuota
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showContainerResourceQuota(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showContainerResourceQuota(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ContainerTemplate object
     * @summary Show an existing ContainerTemplate
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showContainerTemplate(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showContainerTemplate(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Datastore object
     * @summary Show an existing Datastore
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showDatastore(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showDatastore(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Flavor object
     * @summary Show an existing Flavor
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showFlavor(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showFlavor(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Host object
     * @summary Show an existing Host
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showHost(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showHost(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Ipaddress object
     * @summary Show an existing Ipaddress
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showIpaddress(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showIpaddress(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Network object
     * @summary Show an existing Network
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showNetwork(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showNetwork(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a NetworkAdapter object
     * @summary Show an existing NetworkAdapter
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showNetworkAdapter(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showNetworkAdapter(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a OrchestrationStack object
     * @summary Show an existing OrchestrationStack
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showOrchestrationStack(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showOrchestrationStack(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a SecurityGroup object
     * @summary Show an existing SecurityGroup
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSecurityGroup(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showSecurityGroup(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ServiceInstance object
     * @summary Show an existing ServiceInstance
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showServiceInstance(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showServiceInstance(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ServiceInstanceNode object
     * @summary Show an existing ServiceInstanceNode
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showServiceInstanceNode(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showServiceInstanceNode(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ServiceInventory object
     * @summary Show an existing ServiceInventory
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showServiceInventory(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showServiceInventory(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ServiceOffering object
     * @summary Show an existing ServiceOffering
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showServiceOffering(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showServiceOffering(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ServiceOfferingIcon object
     * @summary Show an existing ServiceOfferingIcon
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showServiceOfferingIcon(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showServiceOfferingIcon(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ServiceOfferingIcon IconData
     * @summary Show an existing ServiceOfferingIcon IconData
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showServiceOfferingIconIconData(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showServiceOfferingIconIconData(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ServiceOfferingNode object
     * @summary Show an existing ServiceOfferingNode
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showServiceOfferingNode(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showServiceOfferingNode(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ServicePlan object
     * @summary Show an existing ServicePlan
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showServicePlan(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showServicePlan(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Source object
     * @summary Show an existing Source
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSource(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showSource(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a SourceRegion object
     * @summary Show an existing SourceRegion
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSourceRegion(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showSourceRegion(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Subnet object
     * @summary Show an existing Subnet
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSubnet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showSubnet(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Subscription object
     * @summary Show an existing Subscription
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSubscription(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showSubscription(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Tag object
     * @summary Show an existing Tag
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showTag(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showTag(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Task object
     * @summary Show an existing Task
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showTask(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showTask(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Vm object
     * @summary Show an existing Vm
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showVm(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showVm(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Volume object
     * @summary Show an existing Volume
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showVolume(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showVolume(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a VolumeAttachment object
     * @summary Show an existing VolumeAttachment
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showVolumeAttachment(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showVolumeAttachment(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a VolumeType object
     * @summary Show an existing VolumeType
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showVolumeType(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showVolumeType(id, options)(this.axios, this.basePath);
    }

    /**
     * Updates a Task object
     * @summary Update an existing Task
     * @param {string} id ID of the resource
     * @param {Task} task Task attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTask(id: string, task: Task, options?: any) {
        return DefaultApiFp(this.configuration).updateTask(id, task, options)(this.axios, this.basePath);
    }

}

