/* tslint:disable */
/* eslint-disable */
/**
 * Topological Inventory
 * Topological Inventory
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AppliedInventoriesForServiceOffering200Response
 */
export interface AppliedInventoriesForServiceOffering200Response {
    /**
     *
     * @type {string}
     * @memberof AppliedInventoriesForServiceOffering200Response
     */
    'task_id'?: string;
}
/**
 *
 * @export
 * @interface AppliedInventoriesParametersServicePlan
 */
export interface AppliedInventoriesParametersServicePlan {
    /**
     * The provider specific parameters needed to compute list of used service inventories
     * @type {object}
     * @memberof AppliedInventoriesParametersServicePlan
     */
    'service_parameters'?: object;
}
/**
 *
 * @export
 * @interface AvailabilitiesCollection
 */
export interface AvailabilitiesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof AvailabilitiesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof AvailabilitiesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Availability>}
     * @memberof AvailabilitiesCollection
     */
    'data'?: Array<Availability>;
}
/**
 *
 * @export
 * @interface Availability
 */
export interface Availability {
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    'action'?: string;
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    'availability'?: string;
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Availability
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    'identifier'?: string;
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    'last_checked_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    'last_valid_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Availability
     */
    'resource_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    'resource_type'?: string;
    /**
     *
     * @type {string}
     * @memberof Availability
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface Cluster
 */
export interface Cluster {
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    'created_at'?: string;
    /**
     *
     * @type {object}
     * @memberof Cluster
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Cluster
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Cluster
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    'uid_ems'?: string;
    /**
     *
     * @type {string}
     * @memberof Cluster
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ClustersCollection
 */
export interface ClustersCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ClustersCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ClustersCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Cluster>}
     * @memberof ClustersCollection
     */
    'data'?: Array<Cluster>;
}
/**
 *
 * @export
 * @interface CollectionLinks
 */
export interface CollectionLinks {
    /**
     *
     * @type {string}
     * @memberof CollectionLinks
     */
    'first'?: string;
    /**
     *
     * @type {string}
     * @memberof CollectionLinks
     */
    'last'?: string;
    /**
     *
     * @type {string}
     * @memberof CollectionLinks
     */
    'next'?: string;
    /**
     *
     * @type {string}
     * @memberof CollectionLinks
     */
    'prev'?: string;
}
/**
 *
 * @export
 * @interface CollectionMetadata
 */
export interface CollectionMetadata {
    /**
     *
     * @type {number}
     * @memberof CollectionMetadata
     */
    'count'?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetadata
     */
    'limit'?: number;
    /**
     *
     * @type {number}
     * @memberof CollectionMetadata
     */
    'offset'?: number;
}
/**
 *
 * @export
 * @interface Container
 */
export interface Container {
    /**
     *
     * @type {string}
     * @memberof Container
     */
    'archived_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Container
     */
    'container_group_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Container
     */
    'container_image_id'?: string;
    /**
     *
     * @type {number}
     * @memberof Container
     */
    'cpu_limit'?: number;
    /**
     *
     * @type {number}
     * @memberof Container
     */
    'cpu_request'?: number;
    /**
     *
     * @type {string}
     * @memberof Container
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Container
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Container
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {number}
     * @memberof Container
     */
    'memory_limit'?: number;
    /**
     *
     * @type {number}
     * @memberof Container
     */
    'memory_request'?: number;
    /**
     *
     * @type {string}
     * @memberof Container
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Container
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ContainerGroup
 */
export interface ContainerGroup {
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    'archived_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerGroup
     */
    'container_node_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerGroup
     */
    'container_project_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerGroup
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    'ipaddress'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    'resource_version'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerGroup
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerGroup
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ContainerGroupsCollection
 */
export interface ContainerGroupsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerGroupsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerGroupsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerGroup>}
     * @memberof ContainerGroupsCollection
     */
    'data'?: Array<ContainerGroup>;
}
/**
 *
 * @export
 * @interface ContainerImage
 */
export interface ContainerImage {
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerImage
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    'resource_version'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerImage
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    'tag'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerImage
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ContainerImagesCollection
 */
export interface ContainerImagesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerImagesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerImagesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerImage>}
     * @memberof ContainerImagesCollection
     */
    'data'?: Array<ContainerImage>;
}
/**
 *
 * @export
 * @interface ContainerNode
 */
export interface ContainerNode {
    /**
     *
     * @type {object}
     * @memberof ContainerNode
     */
    'addresses'?: object;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    'allocatable_cpus'?: number;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    'allocatable_memory'?: number;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    'allocatable_pods'?: number;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    'archived_at'?: string;
    /**
     *
     * @type {object}
     * @memberof ContainerNode
     */
    'conditions'?: object;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    'cpus'?: number;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerNode
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    'last_seen_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerNode
     */
    'lives_on_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    'lives_on_type'?: string;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    'memory'?: number;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    'name'?: string;
    /**
     *
     * @type {object}
     * @memberof ContainerNode
     */
    'node_info'?: object;
    /**
     *
     * @type {number}
     * @memberof ContainerNode
     */
    'pods'?: number;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    'resource_version'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerNode
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerNode
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ContainerNodesCollection
 */
export interface ContainerNodesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerNodesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerNodesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerNode>}
     * @memberof ContainerNodesCollection
     */
    'data'?: Array<ContainerNode>;
}
/**
 *
 * @export
 * @interface ContainerProject
 */
export interface ContainerProject {
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'display_name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerProject
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'resource_version'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerProject
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'status_phase'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerProject
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ContainerProjectsCollection
 */
export interface ContainerProjectsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerProjectsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerProjectsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerProject>}
     * @memberof ContainerProjectsCollection
     */
    'data'?: Array<ContainerProject>;
}
/**
 *
 * @export
 * @interface ContainerResourceQuota
 */
export interface ContainerResourceQuota {
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'archived_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'container_project_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'resource_version'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'source_ref'?: string;
    /**
     *
     * @type {object}
     * @memberof ContainerResourceQuota
     */
    'spec'?: object;
    /**
     *
     * @type {object}
     * @memberof ContainerResourceQuota
     */
    'status'?: object;
    /**
     *
     * @type {string}
     * @memberof ContainerResourceQuota
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ContainerResourceQuotaCollection
 */
export interface ContainerResourceQuotaCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerResourceQuotaCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerResourceQuotaCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerResourceQuota>}
     * @memberof ContainerResourceQuotaCollection
     */
    'data'?: Array<ContainerResourceQuota>;
}
/**
 *
 * @export
 * @interface ContainerTemplate
 */
export interface ContainerTemplate {
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    'archived_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerTemplate
     */
    'container_project_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerTemplate
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    'resource_version'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ContainerTemplate
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof ContainerTemplate
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ContainerTemplatesCollection
 */
export interface ContainerTemplatesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainerTemplatesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainerTemplatesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ContainerTemplate>}
     * @memberof ContainerTemplatesCollection
     */
    'data'?: Array<ContainerTemplate>;
}
/**
 *
 * @export
 * @interface ContainersCollection
 */
export interface ContainersCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ContainersCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ContainersCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Container>}
     * @memberof ContainersCollection
     */
    'data'?: Array<Container>;
}
/**
 *
 * @export
 * @interface Datastore
 */
export interface Datastore {
    /**
     *
     * @type {boolean}
     * @memberof Datastore
     */
    'accessible'?: boolean;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    'created_at'?: string;
    /**
     *
     * @type {object}
     * @memberof Datastore
     */
    'extra'?: object;
    /**
     *
     * @type {number}
     * @memberof Datastore
     */
    'free_space'?: number;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Datastore
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    'location'?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Datastore
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    'status'?: string;
    /**
     *
     * @type {number}
     * @memberof Datastore
     */
    'total_space'?: number;
    /**
     *
     * @type {string}
     * @memberof Datastore
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface DatastoresCollection
 */
export interface DatastoresCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof DatastoresCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof DatastoresCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Datastore>}
     * @memberof DatastoresCollection
     */
    'data'?: Array<Datastore>;
}
/**
 *
 * @export
 * @interface ErrorNotFound
 */
export interface ErrorNotFound {
    /**
     *
     * @type {Array<ErrorNotFoundErrorsInner>}
     * @memberof ErrorNotFound
     */
    'errors'?: Array<ErrorNotFoundErrorsInner>;
}
/**
 *
 * @export
 * @interface ErrorNotFoundErrorsInner
 */
export interface ErrorNotFoundErrorsInner {
    /**
     *
     * @type {number}
     * @memberof ErrorNotFoundErrorsInner
     */
    'status'?: number;
    /**
     *
     * @type {string}
     * @memberof ErrorNotFoundErrorsInner
     */
    'detail'?: string;
}
/**
 *
 * @export
 * @interface Flavor
 */
export interface Flavor {
    /**
     *
     * @type {string}
     * @memberof Flavor
     */
    'archived_at'?: string;
    /**
     * Number of CPUs
     * @type {number}
     * @memberof Flavor
     */
    'cpus'?: number;
    /**
     *
     * @type {string}
     * @memberof Flavor
     */
    'created_at'?: string;
    /**
     * The number of default disks
     * @type {number}
     * @memberof Flavor
     */
    'disk_count'?: number;
    /**
     * Size of the default disks in bytes
     * @type {number}
     * @memberof Flavor
     */
    'disk_size'?: number;
    /**
     *
     * @type {object}
     * @memberof Flavor
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Flavor
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Flavor
     */
    'last_seen_at'?: string;
    /**
     * Amount of RAM in bytes
     * @type {number}
     * @memberof Flavor
     */
    'memory'?: number;
    /**
     *
     * @type {string}
     * @memberof Flavor
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Flavor
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Flavor
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof Flavor
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface FlavorsCollection
 */
export interface FlavorsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof FlavorsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof FlavorsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Flavor>}
     * @memberof FlavorsCollection
     */
    'data'?: Array<Flavor>;
}
/**
 *
 * @export
 * @interface GraphQLRequest
 */
export interface GraphQLRequest {
    /**
     * The GraphQL query
     * @type {string}
     * @memberof GraphQLRequest
     */
    'query': string;
    /**
     * If the Query contains several named operations, the operationName controls which one should be executed
     * @type {string}
     * @memberof GraphQLRequest
     */
    'operationName'?: string;
    /**
     * Optional Query variables
     * @type {object}
     * @memberof GraphQLRequest
     */
    'variables'?: object | null;
}
/**
 *
 * @export
 * @interface GraphQLResponse
 */
export interface GraphQLResponse {
    /**
     * Results from the GraphQL query
     * @type {object}
     * @memberof GraphQLResponse
     */
    'data'?: object;
    /**
     * Errors resulting from the GraphQL query
     * @type {Array<object>}
     * @memberof GraphQLResponse
     */
    'errors'?: Array<object>;
}
/**
 *
 * @export
 * @interface Host
 */
export interface Host {
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'archived_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Host
     */
    'cluster_id'?: string;
    /**
     *
     * @type {number}
     * @memberof Host
     */
    'cpus'?: number;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'description'?: string;
    /**
     *
     * @type {object}
     * @memberof Host
     */
    'extra'?: object;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'hostname'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Host
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {number}
     * @memberof Host
     */
    'memory'?: number;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'power_state'?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Host
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'uid_ems'?: string;
    /**
     *
     * @type {string}
     * @memberof Host
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface HostsCollection
 */
export interface HostsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof HostsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof HostsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Host>}
     * @memberof HostsCollection
     */
    'data'?: Array<Host>;
}
/**
 *
 * @export
 * @interface Ipaddress
 */
export interface Ipaddress {
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    'created_at'?: string;
    /**
     *
     * @type {object}
     * @memberof Ipaddress
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    'ipaddress'?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    'kind'?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    'last_seen_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    'network_adapter_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    'orchestration_stack_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    'source_region_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    'subnet_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Ipaddress
     */
    'subscription_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Ipaddress
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface IpaddressesCollection
 */
export interface IpaddressesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof IpaddressesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof IpaddressesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Ipaddress>}
     * @memberof IpaddressesCollection
     */
    'data'?: Array<Ipaddress>;
}
/**
 * @type ListClustersSortByParameter
 * @export
 */
export type ListClustersSortByParameter = Array<string> | string;

/**
 *
 * @export
 * @interface Network
 */
export interface Network {
    /**
     *
     * @type {string}
     * @memberof Network
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    'cidr'?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    'created_at'?: string;
    /**
     *
     * @type {object}
     * @memberof Network
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Network
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Network
     */
    'orchestration_stack_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Network
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Network
     */
    'source_region_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    'status'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Network
     */
    'subscription_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Network
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface NetworkAdapter
 */
export interface NetworkAdapter {
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    'device_id'?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'device_type'?: string;
    /**
     *
     * @type {object}
     * @memberof NetworkAdapter
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'mac_address'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    'orchestration_stack_id'?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    'source_region_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof NetworkAdapter
     */
    'subscription_id'?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface NetworkAdaptersCollection
 */
export interface NetworkAdaptersCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof NetworkAdaptersCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof NetworkAdaptersCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<NetworkAdapter>}
     * @memberof NetworkAdaptersCollection
     */
    'data'?: Array<NetworkAdapter>;
}
/**
 *
 * @export
 * @interface NetworksCollection
 */
export interface NetworksCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof NetworksCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof NetworksCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Network>}
     * @memberof NetworksCollection
     */
    'data'?: Array<Network>;
}
/**
 *
 * @export
 * @interface OrchestrationStack
 */
export interface OrchestrationStack {
    /**
     *
     * @type {string}
     * @memberof OrchestrationStack
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof OrchestrationStack
     */
    'created_at'?: string;
    /**
     * Description of the OrchestrationStack
     * @type {string}
     * @memberof OrchestrationStack
     */
    'description'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrchestrationStack
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof OrchestrationStack
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof OrchestrationStack
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrchestrationStack
     */
    'parent_orchestration_stack_id'?: string;
    /**
     *
     * @type {string}
     * @memberof OrchestrationStack
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof OrchestrationStack
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrchestrationStack
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof OrchestrationStack
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrchestrationStack
     */
    'source_region_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrchestrationStack
     */
    'subscription_id'?: string;
    /**
     *
     * @type {string}
     * @memberof OrchestrationStack
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface OrchestrationStacksCollection
 */
export interface OrchestrationStacksCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof OrchestrationStacksCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof OrchestrationStacksCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<OrchestrationStack>}
     * @memberof OrchestrationStacksCollection
     */
    'data'?: Array<OrchestrationStack>;
}
/**
 *
 * @export
 * @interface OrderParametersServiceOffering
 */
export interface OrderParametersServiceOffering {
    /**
     * JSON object with provisioning parameters
     * @type {object}
     * @memberof OrderParametersServiceOffering
     */
    'service_parameters'?: object;
    /**
     * The provider specific parameters needed to provision this service. This might include namespaces, special keys
     * @type {object}
     * @memberof OrderParametersServiceOffering
     */
    'provider_control_parameters'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof OrderParametersServiceOffering
     */
    'service_plan_id'?: string;
}
/**
 *
 * @export
 * @interface OrderParametersServicePlan
 */
export interface OrderParametersServicePlan {
    /**
     * JSON object with provisioning parameters
     * @type {object}
     * @memberof OrderParametersServicePlan
     */
    'service_parameters'?: object;
    /**
     * The provider specific parameters needed to provision this service. This might include namespaces, special keys
     * @type {object}
     * @memberof OrderParametersServicePlan
     */
    'provider_control_parameters'?: object;
}
/**
 *
 * @export
 * @interface SecurityGroup
 */
export interface SecurityGroup {
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    'description'?: string;
    /**
     *
     * @type {object}
     * @memberof SecurityGroup
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    'network_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    'orchestration_stack_id'?: string;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    'source_region_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SecurityGroup
     */
    'subscription_id'?: string;
    /**
     *
     * @type {string}
     * @memberof SecurityGroup
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface SecurityGroupsCollection
 */
export interface SecurityGroupsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof SecurityGroupsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof SecurityGroupsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<SecurityGroup>}
     * @memberof SecurityGroupsCollection
     */
    'data'?: Array<SecurityGroup>;
}
/**
 *
 * @export
 * @interface ServiceInstance
 */
export interface ServiceInstance {
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    'external_url'?: string;
    /**
     * Extra information about this object in JSON format
     * @type {object}
     * @memberof ServiceInstance
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    'root_service_instance_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    'service_inventory_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    'service_offering_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    'service_plan_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    'source_region_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstance
     */
    'subscription_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstance
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ServiceInstanceNode
 */
export interface ServiceInstanceNode {
    /**
     *
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'created_at'?: string;
    /**
     *
     * @type {object}
     * @memberof ServiceInstanceNode
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'root_service_instance_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'service_instance_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'service_inventory_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'source_created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'source_updated_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInstanceNode
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ServiceInstanceNodesCollection
 */
export interface ServiceInstanceNodesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceInstanceNodesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceInstanceNodesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceInstanceNode>}
     * @memberof ServiceInstanceNodesCollection
     */
    'data'?: Array<ServiceInstanceNode>;
}
/**
 *
 * @export
 * @interface ServiceInstancesCollection
 */
export interface ServiceInstancesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceInstancesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceInstancesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceInstance>}
     * @memberof ServiceInstancesCollection
     */
    'data'?: Array<ServiceInstance>;
}
/**
 *
 * @export
 * @interface ServiceInventoriesCollection
 */
export interface ServiceInventoriesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceInventoriesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceInventoriesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceInventory>}
     * @memberof ServiceInventoriesCollection
     */
    'data'?: Array<ServiceInventory>;
}
/**
 *
 * @export
 * @interface ServiceInventory
 */
export interface ServiceInventory {
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    'description'?: string;
    /**
     *
     * @type {object}
     * @memberof ServiceInventory
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInventory
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    'source_created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceInventory
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    'source_updated_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceInventory
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ServiceOffering
 */
export interface ServiceOffering {
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'display_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'distributor'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'documentation_url'?: string;
    /**
     * Extra information about this object in JSON format
     * @type {object}
     * @memberof ServiceOffering
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'long_description'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    'service_inventory_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    'service_offering_icon_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    'source_id'?: string;
    /**
     * The native reference used by the Source to refer to this object
     * @type {string}
     * @memberof ServiceOffering
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    'source_region_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOffering
     */
    'subscription_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'support_url'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOffering
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ServiceOfferingIcon
 */
export interface ServiceOfferingIcon {
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    'created_at'?: string;
    /**
     * Raw icon data
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    'data'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    'last_seen_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingIcon
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ServiceOfferingIconsCollection
 */
export interface ServiceOfferingIconsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceOfferingIconsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceOfferingIconsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceOfferingIcon>}
     * @memberof ServiceOfferingIconsCollection
     */
    'data'?: Array<ServiceOfferingIcon>;
}
/**
 *
 * @export
 * @interface ServiceOfferingNode
 */
export interface ServiceOfferingNode {
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'created_at'?: string;
    /**
     *
     * @type {object}
     * @memberof ServiceOfferingNode
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'root_service_offering_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'service_inventory_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'service_offering_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'source_created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'source_updated_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceOfferingNode
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ServiceOfferingNodesCollection
 */
export interface ServiceOfferingNodesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceOfferingNodesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceOfferingNodesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceOfferingNode>}
     * @memberof ServiceOfferingNodesCollection
     */
    'data'?: Array<ServiceOfferingNode>;
}
/**
 *
 * @export
 * @interface ServiceOfferingsCollection
 */
export interface ServiceOfferingsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServiceOfferingsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServiceOfferingsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ServiceOffering>}
     * @memberof ServiceOfferingsCollection
     */
    'data'?: Array<ServiceOffering>;
}
/**
 *
 * @export
 * @interface ServicePlan
 */
export interface ServicePlan {
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'archived_at'?: string;
    /**
     *
     * @type {object}
     * @memberof ServicePlan
     */
    'create_json_schema'?: object;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'description'?: string;
    /**
     * Extra information about this object in JSON format
     * @type {object}
     * @memberof ServicePlan
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServicePlan
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'resource_version'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServicePlan
     */
    'service_offering_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServicePlan
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServicePlan
     */
    'source_region_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ServicePlan
     */
    'subscription_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'update_json_schema'?: string;
    /**
     *
     * @type {string}
     * @memberof ServicePlan
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface ServicePlansCollection
 */
export interface ServicePlansCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof ServicePlansCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof ServicePlansCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<ServicePlan>}
     * @memberof ServicePlansCollection
     */
    'data'?: Array<ServicePlan>;
}
/**
 *
 * @export
 * @interface Source
 */
export interface Source {
    /**
     *
     * @type {string}
     * @memberof Source
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Source
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Source
     */
    'refresh_status'?: string;
    /**
     *
     * @type {string}
     * @memberof Source
     */
    'uid'?: string;
    /**
     *
     * @type {string}
     * @memberof Source
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface SourceRegion
 */
export interface SourceRegion {
    /**
     *
     * @type {string}
     * @memberof SourceRegion
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof SourceRegion
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof SourceRegion
     */
    'endpoint'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SourceRegion
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof SourceRegion
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof SourceRegion
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SourceRegion
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof SourceRegion
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof SourceRegion
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface SourceRegionsCollection
 */
export interface SourceRegionsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof SourceRegionsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof SourceRegionsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<SourceRegion>}
     * @memberof SourceRegionsCollection
     */
    'data'?: Array<SourceRegion>;
}
/**
 *
 * @export
 * @interface SourcesCollection
 */
export interface SourcesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof SourcesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof SourcesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Source>}
     * @memberof SourcesCollection
     */
    'data'?: Array<Source>;
}
/**
 *
 * @export
 * @interface Subnet
 */
export interface Subnet {
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    'cidr'?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    'created_at'?: string;
    /**
     *
     * @type {object}
     * @memberof Subnet
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    'network_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    'orchestration_stack_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    'source_region_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    'status'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subnet
     */
    'subscription_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Subnet
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface SubnetsCollection
 */
export interface SubnetsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof SubnetsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof SubnetsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Subnet>}
     * @memberof SubnetsCollection
     */
    'data'?: Array<Subnet>;
}
/**
 *
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subscription
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Subscription
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface SubscriptionsCollection
 */
export interface SubscriptionsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof SubscriptionsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof SubscriptionsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Subscription>}
     * @memberof SubscriptionsCollection
     */
    'data'?: Array<Subscription>;
}
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'description'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Tag
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'namespace'?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface Tagging
 */
export interface Tagging {
    /**
     * ID of the resource
     * @type {string}
     * @memberof Tagging
     */
    'tag_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Tagging
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Tagging
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface TagsCollection
 */
export interface TagsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof TagsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof TagsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Tag>}
     * @memberof TagsCollection
     */
    'data'?: Array<Tag>;
}
/**
 *
 * @export
 * @interface Task
 */
export interface Task {
    /**
     *
     * @type {string}
     * @memberof Task
     */
    'completed_at'?: string;
    /**
     *
     * @type {object}
     * @memberof Task
     */
    'context'?: object;
    /**
     *
     * @type {string}
     * @memberof Task
     */
    'created_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Task
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Task
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Task
     */
    'state'?: string;
    /**
     *
     * @type {string}
     * @memberof Task
     */
    'status'?: string;
    /**
     *
     * @type {string}
     * @memberof Task
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface TasksCollection
 */
export interface TasksCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof TasksCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof TasksCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Task>}
     * @memberof TasksCollection
     */
    'data'?: Array<Task>;
}
/**
 *
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * ID of the resource
     * @type {string}
     * @memberof Tenant
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'external_tenant'?: string;
}
/**
 *
 * @export
 * @interface Vm
 */
export interface Vm {
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'archived_at'?: string;
    /**
     * Total number of CPUs
     * @type {number}
     * @memberof Vm
     */
    'cpus'?: number;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'created_at'?: string;
    /**
     * Description of the Vm
     * @type {string}
     * @memberof Vm
     */
    'description'?: string;
    /**
     *
     * @type {object}
     * @memberof Vm
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    'flavor_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'host_inventory_uuid'?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'hostname'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Vm
     */
    'mac_addresses'?: Array<string>;
    /**
     * Total RAM in bytes
     * @type {number}
     * @memberof Vm
     */
    'memory'?: number;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    'orchestration_stack_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'power_state'?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    'source_region_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Vm
     */
    'subscription_id'?: string;
    /**
     * Cross-Source Unique Reference
     * @type {string}
     * @memberof Vm
     */
    'uid_ems'?: string;
    /**
     *
     * @type {string}
     * @memberof Vm
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface VmsCollection
 */
export interface VmsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof VmsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof VmsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Vm>}
     * @memberof VmsCollection
     */
    'data'?: Array<Vm>;
}
/**
 *
 * @export
 * @interface Volume
 */
export interface Volume {
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    'created_at'?: string;
    /**
     *
     * @type {object}
     * @memberof Volume
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    'orchestration_stack_id'?: string;
    /**
     * Size of the volume in bytes
     * @type {number}
     * @memberof Volume
     */
    'size'?: number;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    'source_created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    'source_deleted_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    'source_ref'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    'source_region_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    'state'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    'subscription_id'?: string;
    /**
     *
     * @type {string}
     * @memberof Volume
     */
    'updated_at'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Volume
     */
    'volume_type_id'?: string;
}
/**
 *
 * @export
 * @interface VolumeAttachment
 */
export interface VolumeAttachment {
    /**
     *
     * @type {string}
     * @memberof VolumeAttachment
     */
    'device'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof VolumeAttachment
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof VolumeAttachment
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof VolumeAttachment
     */
    'state'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof VolumeAttachment
     */
    'vm_id'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof VolumeAttachment
     */
    'volume_id'?: string;
}
/**
 *
 * @export
 * @interface VolumeAttachmentsCollection
 */
export interface VolumeAttachmentsCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof VolumeAttachmentsCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof VolumeAttachmentsCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<VolumeAttachment>}
     * @memberof VolumeAttachmentsCollection
     */
    'data'?: Array<VolumeAttachment>;
}
/**
 *
 * @export
 * @interface VolumeType
 */
export interface VolumeType {
    /**
     *
     * @type {string}
     * @memberof VolumeType
     */
    'archived_at'?: string;
    /**
     *
     * @type {string}
     * @memberof VolumeType
     */
    'created_at'?: string;
    /**
     *
     * @type {string}
     * @memberof VolumeType
     */
    'description'?: string;
    /**
     *
     * @type {object}
     * @memberof VolumeType
     */
    'extra'?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof VolumeType
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof VolumeType
     */
    'last_seen_at'?: string;
    /**
     *
     * @type {string}
     * @memberof VolumeType
     */
    'name'?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof VolumeType
     */
    'source_id'?: string;
    /**
     *
     * @type {string}
     * @memberof VolumeType
     */
    'source_ref'?: string;
    /**
     *
     * @type {string}
     * @memberof VolumeType
     */
    'updated_at'?: string;
}
/**
 *
 * @export
 * @interface VolumeTypesCollection
 */
export interface VolumeTypesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof VolumeTypesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof VolumeTypesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<VolumeType>}
     * @memberof VolumeTypesCollection
     */
    'data'?: Array<VolumeType>;
}
/**
 *
 * @export
 * @interface VolumesCollection
 */
export interface VolumesCollection {
    /**
     *
     * @type {CollectionMetadata}
     * @memberof VolumesCollection
     */
    'meta'?: CollectionMetadata;
    /**
     *
     * @type {CollectionLinks}
     * @memberof VolumesCollection
     */
    'links'?: CollectionLinks;
    /**
     *
     * @type {Array<Volume>}
     * @memberof VolumesCollection
     */
    'data'?: Array<Volume>;
}

/**
 * AppliedInventoriesForServiceOfferingApi - axios parameter creator
 * @export
 */
export const AppliedInventoriesForServiceOfferingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Task id
         * @summary Invokes computing of ServiceInventories for given ServiceOffering
         * @param {string} id ID of the resource
         * @param {AppliedInventoriesParametersServicePlan} appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedInventoriesForServiceOffering: async (id: string, appliedInventoriesParametersServicePlan: AppliedInventoriesParametersServicePlan, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('appliedInventoriesForServiceOffering', 'id', id)
            // verify required parameter 'appliedInventoriesParametersServicePlan' is not null or undefined
            assertParamExists('appliedInventoriesForServiceOffering', 'appliedInventoriesParametersServicePlan', appliedInventoriesParametersServicePlan)
            const localVarPath = `/service_offerings/{id}/applied_inventories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appliedInventoriesParametersServicePlan, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppliedInventoriesForServiceOfferingApi - functional programming interface
 * @export
 */
export const AppliedInventoriesForServiceOfferingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppliedInventoriesForServiceOfferingApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Task id
         * @summary Invokes computing of ServiceInventories for given ServiceOffering
         * @param {string} id ID of the resource
         * @param {AppliedInventoriesParametersServicePlan} appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appliedInventoriesForServiceOffering(id: string, appliedInventoriesParametersServicePlan: AppliedInventoriesParametersServicePlan, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppliedInventoriesForServiceOffering200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appliedInventoriesForServiceOffering(id, appliedInventoriesParametersServicePlan, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppliedInventoriesForServiceOfferingApi - factory interface
 * @export
 */
export const AppliedInventoriesForServiceOfferingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppliedInventoriesForServiceOfferingApiFp(configuration)
    return {
        /**
         * Returns a Task id
         * @summary Invokes computing of ServiceInventories for given ServiceOffering
         * @param {string} id ID of the resource
         * @param {AppliedInventoriesParametersServicePlan} appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedInventoriesForServiceOffering(id: string, appliedInventoriesParametersServicePlan: AppliedInventoriesParametersServicePlan, options?: any): AxiosPromise<AppliedInventoriesForServiceOffering200Response> {
            return localVarFp.appliedInventoriesForServiceOffering(id, appliedInventoriesParametersServicePlan, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppliedInventoriesForServiceOfferingApi - object-oriented interface
 * @export
 * @class AppliedInventoriesForServiceOfferingApi
 * @extends {BaseAPI}
 */
export class AppliedInventoriesForServiceOfferingApi extends BaseAPI {
    /**
     * Returns a Task id
     * @summary Invokes computing of ServiceInventories for given ServiceOffering
     * @param {string} id ID of the resource
     * @param {AppliedInventoriesParametersServicePlan} appliedInventoriesParametersServicePlan Parameters defining input data for computing inventories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppliedInventoriesForServiceOfferingApi
     */
    public appliedInventoriesForServiceOffering(id: string, appliedInventoriesParametersServicePlan: AppliedInventoriesParametersServicePlan, options?: AxiosRequestConfig) {
        return AppliedInventoriesForServiceOfferingApiFp(this.configuration).appliedInventoriesForServiceOffering(id, appliedInventoriesParametersServicePlan, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetDocumentationApi - axios parameter creator
 * @export
 */
export const GetDocumentationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/openapi.json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetDocumentationApi - functional programming interface
 * @export
 */
export const GetDocumentationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetDocumentationApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetDocumentationApi - factory interface
 * @export
 */
export const GetDocumentationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetDocumentationApiFp(configuration)
    return {
        /**
         *
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentation(options?: any): AxiosPromise<object> {
            return localVarFp.getDocumentation(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetDocumentationApi - object-oriented interface
 * @export
 * @class GetDocumentationApi
 * @extends {BaseAPI}
 */
export class GetDocumentationApi extends BaseAPI {
    /**
     *
     * @summary Return this API document in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetDocumentationApi
     */
    public getDocumentation(options?: AxiosRequestConfig) {
        return GetDocumentationApiFp(this.configuration).getDocumentation(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListClusterHostsApi - axios parameter creator
 * @export
 */
export const ListClusterHostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Cluster
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusterHosts: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listClusterHosts', 'id', id)
            const localVarPath = `/clusters/{id}/hosts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListClusterHostsApi - functional programming interface
 * @export
 */
export const ListClusterHostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListClusterHostsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Cluster
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listClusterHosts(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listClusterHosts(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListClusterHostsApi - factory interface
 * @export
 */
export const ListClusterHostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListClusterHostsApiFp(configuration)
    return {
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Cluster
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusterHosts(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<HostsCollection> {
            return localVarFp.listClusterHosts(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListClusterHostsApi - object-oriented interface
 * @export
 * @class ListClusterHostsApi
 * @extends {BaseAPI}
 */
export class ListClusterHostsApi extends BaseAPI {
    /**
     * Returns an array of Host objects
     * @summary List Hosts for Cluster
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListClusterHostsApi
     */
    public listClusterHosts(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListClusterHostsApiFp(this.configuration).listClusterHosts(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListClustersApi - axios parameter creator
 * @export
 */
export const ListClustersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusters: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/clusters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListClustersApi - functional programming interface
 * @export
 */
export const ListClustersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListClustersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listClusters(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClustersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listClusters(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListClustersApi - factory interface
 * @export
 */
export const ListClustersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListClustersApiFp(configuration)
    return {
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listClusters(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ClustersCollection> {
            return localVarFp.listClusters(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListClustersApi - object-oriented interface
 * @export
 * @class ListClustersApi
 * @extends {BaseAPI}
 */
export class ListClustersApi extends BaseAPI {
    /**
     * Returns an array of Cluster objects
     * @summary List Clusters
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListClustersApi
     */
    public listClusters(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListClustersApiFp(this.configuration).listClusters(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerGroupContainersApi - axios parameter creator
 * @export
 */
export const ListContainerGroupContainersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Container objects
         * @summary List Containers for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroupContainers: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContainerGroupContainers', 'id', id)
            const localVarPath = `/container_groups/{id}/containers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerGroupContainersApi - functional programming interface
 * @export
 */
export const ListContainerGroupContainersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerGroupContainersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Container objects
         * @summary List Containers for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerGroupContainers(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerGroupContainers(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerGroupContainersApi - factory interface
 * @export
 */
export const ListContainerGroupContainersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerGroupContainersApiFp(configuration)
    return {
        /**
         * Returns an array of Container objects
         * @summary List Containers for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroupContainers(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainersCollection> {
            return localVarFp.listContainerGroupContainers(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerGroupContainersApi - object-oriented interface
 * @export
 * @class ListContainerGroupContainersApi
 * @extends {BaseAPI}
 */
export class ListContainerGroupContainersApi extends BaseAPI {
    /**
     * Returns an array of Container objects
     * @summary List Containers for ContainerGroup
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerGroupContainersApi
     */
    public listContainerGroupContainers(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerGroupContainersApiFp(this.configuration).listContainerGroupContainers(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerGroupTagsApi - axios parameter creator
 * @export
 */
export const ListContainerGroupTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroupTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContainerGroupTags', 'id', id)
            const localVarPath = `/container_groups/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerGroupTagsApi - functional programming interface
 * @export
 */
export const ListContainerGroupTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerGroupTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerGroupTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerGroupTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerGroupTagsApi - factory interface
 * @export
 */
export const ListContainerGroupTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerGroupTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroupTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listContainerGroupTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerGroupTagsApi - object-oriented interface
 * @export
 * @class ListContainerGroupTagsApi
 * @extends {BaseAPI}
 */
export class ListContainerGroupTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for ContainerGroup
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerGroupTagsApi
     */
    public listContainerGroupTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerGroupTagsApiFp(this.configuration).listContainerGroupTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerGroupsApi - axios parameter creator
 * @export
 */
export const ListContainerGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroups: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/container_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerGroupsApi - functional programming interface
 * @export
 */
export const ListContainerGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerGroups(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerGroups(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerGroupsApi - factory interface
 * @export
 */
export const ListContainerGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerGroups(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerGroupsCollection> {
            return localVarFp.listContainerGroups(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerGroupsApi - object-oriented interface
 * @export
 * @class ListContainerGroupsApi
 * @extends {BaseAPI}
 */
export class ListContainerGroupsApi extends BaseAPI {
    /**
     * Returns an array of ContainerGroup objects
     * @summary List ContainerGroups
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerGroupsApi
     */
    public listContainerGroups(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerGroupsApiFp(this.configuration).listContainerGroups(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerImageTagsApi - axios parameter creator
 * @export
 */
export const ListContainerImageTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerImage
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerImageTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContainerImageTags', 'id', id)
            const localVarPath = `/container_images/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerImageTagsApi - functional programming interface
 * @export
 */
export const ListContainerImageTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerImageTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerImage
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerImageTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerImageTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerImageTagsApi - factory interface
 * @export
 */
export const ListContainerImageTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerImageTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerImage
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerImageTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listContainerImageTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerImageTagsApi - object-oriented interface
 * @export
 * @class ListContainerImageTagsApi
 * @extends {BaseAPI}
 */
export class ListContainerImageTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for ContainerImage
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerImageTagsApi
     */
    public listContainerImageTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerImageTagsApiFp(this.configuration).listContainerImageTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerImagesApi - axios parameter creator
 * @export
 */
export const ListContainerImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerImages: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/container_images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerImagesApi - functional programming interface
 * @export
 */
export const ListContainerImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerImages(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImagesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerImages(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerImagesApi - factory interface
 * @export
 */
export const ListContainerImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerImagesApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerImages(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerImagesCollection> {
            return localVarFp.listContainerImages(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerImagesApi - object-oriented interface
 * @export
 * @class ListContainerImagesApi
 * @extends {BaseAPI}
 */
export class ListContainerImagesApi extends BaseAPI {
    /**
     * Returns an array of ContainerImage objects
     * @summary List ContainerImages
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerImagesApi
     */
    public listContainerImages(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerImagesApiFp(this.configuration).listContainerImages(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerNodeContainerGroupsApi - axios parameter creator
 * @export
 */
export const ListContainerNodeContainerGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodeContainerGroups: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContainerNodeContainerGroups', 'id', id)
            const localVarPath = `/container_nodes/{id}/container_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerNodeContainerGroupsApi - functional programming interface
 * @export
 */
export const ListContainerNodeContainerGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerNodeContainerGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerNodeContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerNodeContainerGroups(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerNodeContainerGroupsApi - factory interface
 * @export
 */
export const ListContainerNodeContainerGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerNodeContainerGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodeContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerGroupsCollection> {
            return localVarFp.listContainerNodeContainerGroups(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerNodeContainerGroupsApi - object-oriented interface
 * @export
 * @class ListContainerNodeContainerGroupsApi
 * @extends {BaseAPI}
 */
export class ListContainerNodeContainerGroupsApi extends BaseAPI {
    /**
     * Returns an array of ContainerGroup objects
     * @summary List ContainerGroups for ContainerNode
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerNodeContainerGroupsApi
     */
    public listContainerNodeContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerNodeContainerGroupsApiFp(this.configuration).listContainerNodeContainerGroups(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerNodeTagsApi - axios parameter creator
 * @export
 */
export const ListContainerNodeTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodeTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContainerNodeTags', 'id', id)
            const localVarPath = `/container_nodes/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerNodeTagsApi - functional programming interface
 * @export
 */
export const ListContainerNodeTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerNodeTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerNodeTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerNodeTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerNodeTagsApi - factory interface
 * @export
 */
export const ListContainerNodeTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerNodeTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerNode
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodeTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listContainerNodeTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerNodeTagsApi - object-oriented interface
 * @export
 * @class ListContainerNodeTagsApi
 * @extends {BaseAPI}
 */
export class ListContainerNodeTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for ContainerNode
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerNodeTagsApi
     */
    public listContainerNodeTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerNodeTagsApiFp(this.configuration).listContainerNodeTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerNodesApi - axios parameter creator
 * @export
 */
export const ListContainerNodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodes: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/container_nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerNodesApi - functional programming interface
 * @export
 */
export const ListContainerNodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerNodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerNodes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerNodesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerNodes(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerNodesApi - factory interface
 * @export
 */
export const ListContainerNodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerNodesApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerNodes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerNodesCollection> {
            return localVarFp.listContainerNodes(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerNodesApi - object-oriented interface
 * @export
 * @class ListContainerNodesApi
 * @extends {BaseAPI}
 */
export class ListContainerNodesApi extends BaseAPI {
    /**
     * Returns an array of ContainerNode objects
     * @summary List ContainerNodes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerNodesApi
     */
    public listContainerNodes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerNodesApiFp(this.configuration).listContainerNodes(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerProjectContainerGroupsApi - axios parameter creator
 * @export
 */
export const ListContainerProjectContainerGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerGroups: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContainerProjectContainerGroups', 'id', id)
            const localVarPath = `/container_projects/{id}/container_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerProjectContainerGroupsApi - functional programming interface
 * @export
 */
export const ListContainerProjectContainerGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerProjectContainerGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerProjectContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerProjectContainerGroups(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerProjectContainerGroupsApi - factory interface
 * @export
 */
export const ListContainerProjectContainerGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerProjectContainerGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerGroupsCollection> {
            return localVarFp.listContainerProjectContainerGroups(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerProjectContainerGroupsApi - object-oriented interface
 * @export
 * @class ListContainerProjectContainerGroupsApi
 * @extends {BaseAPI}
 */
export class ListContainerProjectContainerGroupsApi extends BaseAPI {
    /**
     * Returns an array of ContainerGroup objects
     * @summary List ContainerGroups for ContainerProject
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerProjectContainerGroupsApi
     */
    public listContainerProjectContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerProjectContainerGroupsApiFp(this.configuration).listContainerProjectContainerGroups(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerProjectContainerResourceQuotaApi - axios parameter creator
 * @export
 */
export const ListContainerProjectContainerResourceQuotaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerResourceQuota: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContainerProjectContainerResourceQuota', 'id', id)
            const localVarPath = `/container_projects/{id}/container_resource_quotas`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerProjectContainerResourceQuotaApi - functional programming interface
 * @export
 */
export const ListContainerProjectContainerResourceQuotaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerProjectContainerResourceQuotaApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerProjectContainerResourceQuota(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerResourceQuotaCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerProjectContainerResourceQuota(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerProjectContainerResourceQuotaApi - factory interface
 * @export
 */
export const ListContainerProjectContainerResourceQuotaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerProjectContainerResourceQuotaApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerResourceQuota(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerResourceQuotaCollection> {
            return localVarFp.listContainerProjectContainerResourceQuota(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerProjectContainerResourceQuotaApi - object-oriented interface
 * @export
 * @class ListContainerProjectContainerResourceQuotaApi
 * @extends {BaseAPI}
 */
export class ListContainerProjectContainerResourceQuotaApi extends BaseAPI {
    /**
     * Returns an array of ContainerResourceQuota objects
     * @summary List ContainerResourceQuota for ContainerProject
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerProjectContainerResourceQuotaApi
     */
    public listContainerProjectContainerResourceQuota(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerProjectContainerResourceQuotaApiFp(this.configuration).listContainerProjectContainerResourceQuota(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerProjectContainerTemplatesApi - axios parameter creator
 * @export
 */
export const ListContainerProjectContainerTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerTemplates: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContainerProjectContainerTemplates', 'id', id)
            const localVarPath = `/container_projects/{id}/container_templates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerProjectContainerTemplatesApi - functional programming interface
 * @export
 */
export const ListContainerProjectContainerTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerProjectContainerTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerProjectContainerTemplates(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTemplatesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerProjectContainerTemplates(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerProjectContainerTemplatesApi - factory interface
 * @export
 */
export const ListContainerProjectContainerTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerProjectContainerTemplatesApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectContainerTemplates(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerTemplatesCollection> {
            return localVarFp.listContainerProjectContainerTemplates(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerProjectContainerTemplatesApi - object-oriented interface
 * @export
 * @class ListContainerProjectContainerTemplatesApi
 * @extends {BaseAPI}
 */
export class ListContainerProjectContainerTemplatesApi extends BaseAPI {
    /**
     * Returns an array of ContainerTemplate objects
     * @summary List ContainerTemplates for ContainerProject
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerProjectContainerTemplatesApi
     */
    public listContainerProjectContainerTemplates(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerProjectContainerTemplatesApiFp(this.configuration).listContainerProjectContainerTemplates(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerProjectTagsApi - axios parameter creator
 * @export
 */
export const ListContainerProjectTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContainerProjectTags', 'id', id)
            const localVarPath = `/container_projects/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerProjectTagsApi - functional programming interface
 * @export
 */
export const ListContainerProjectTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerProjectTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerProjectTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerProjectTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerProjectTagsApi - factory interface
 * @export
 */
export const ListContainerProjectTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerProjectTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerProject
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjectTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listContainerProjectTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerProjectTagsApi - object-oriented interface
 * @export
 * @class ListContainerProjectTagsApi
 * @extends {BaseAPI}
 */
export class ListContainerProjectTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for ContainerProject
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerProjectTagsApi
     */
    public listContainerProjectTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerProjectTagsApiFp(this.configuration).listContainerProjectTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerProjectsApi - axios parameter creator
 * @export
 */
export const ListContainerProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjects: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/container_projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerProjectsApi - functional programming interface
 * @export
 */
export const ListContainerProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerProjects(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerProjectsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerProjects(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerProjectsApi - factory interface
 * @export
 */
export const ListContainerProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerProjectsApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerProjects(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerProjectsCollection> {
            return localVarFp.listContainerProjects(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerProjectsApi - object-oriented interface
 * @export
 * @class ListContainerProjectsApi
 * @extends {BaseAPI}
 */
export class ListContainerProjectsApi extends BaseAPI {
    /**
     * Returns an array of ContainerProject objects
     * @summary List ContainerProjects
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerProjectsApi
     */
    public listContainerProjects(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerProjectsApiFp(this.configuration).listContainerProjects(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerResourceQuotaApi - axios parameter creator
 * @export
 */
export const ListContainerResourceQuotaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerResourceQuota: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/container_resource_quotas`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerResourceQuotaApi - functional programming interface
 * @export
 */
export const ListContainerResourceQuotaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerResourceQuotaApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerResourceQuota(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerResourceQuotaCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerResourceQuota(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerResourceQuotaApi - factory interface
 * @export
 */
export const ListContainerResourceQuotaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerResourceQuotaApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerResourceQuota objects
         * @summary List ContainerResourceQuota
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerResourceQuota(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerResourceQuotaCollection> {
            return localVarFp.listContainerResourceQuota(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerResourceQuotaApi - object-oriented interface
 * @export
 * @class ListContainerResourceQuotaApi
 * @extends {BaseAPI}
 */
export class ListContainerResourceQuotaApi extends BaseAPI {
    /**
     * Returns an array of ContainerResourceQuota objects
     * @summary List ContainerResourceQuota
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerResourceQuotaApi
     */
    public listContainerResourceQuota(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerResourceQuotaApiFp(this.configuration).listContainerResourceQuota(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerTemplateTagsApi - axios parameter creator
 * @export
 */
export const ListContainerTemplateTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerTemplate
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerTemplateTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listContainerTemplateTags', 'id', id)
            const localVarPath = `/container_templates/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerTemplateTagsApi - functional programming interface
 * @export
 */
export const ListContainerTemplateTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerTemplateTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerTemplate
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerTemplateTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerTemplateTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerTemplateTagsApi - factory interface
 * @export
 */
export const ListContainerTemplateTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerTemplateTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ContainerTemplate
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerTemplateTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listContainerTemplateTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerTemplateTagsApi - object-oriented interface
 * @export
 * @class ListContainerTemplateTagsApi
 * @extends {BaseAPI}
 */
export class ListContainerTemplateTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for ContainerTemplate
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerTemplateTagsApi
     */
    public listContainerTemplateTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerTemplateTagsApiFp(this.configuration).listContainerTemplateTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainerTemplatesApi - axios parameter creator
 * @export
 */
export const ListContainerTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerTemplates: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/container_templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainerTemplatesApi - functional programming interface
 * @export
 */
export const ListContainerTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainerTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainerTemplates(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTemplatesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainerTemplates(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainerTemplatesApi - factory interface
 * @export
 */
export const ListContainerTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainerTemplatesApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainerTemplates(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerTemplatesCollection> {
            return localVarFp.listContainerTemplates(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainerTemplatesApi - object-oriented interface
 * @export
 * @class ListContainerTemplatesApi
 * @extends {BaseAPI}
 */
export class ListContainerTemplatesApi extends BaseAPI {
    /**
     * Returns an array of ContainerTemplate objects
     * @summary List ContainerTemplates
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainerTemplatesApi
     */
    public listContainerTemplates(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainerTemplatesApiFp(this.configuration).listContainerTemplates(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListContainersApi - axios parameter creator
 * @export
 */
export const ListContainersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Container objects
         * @summary List Containers
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainers: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/containers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListContainersApi - functional programming interface
 * @export
 */
export const ListContainersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListContainersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Container objects
         * @summary List Containers
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContainers(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContainers(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListContainersApi - factory interface
 * @export
 */
export const ListContainersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListContainersApiFp(configuration)
    return {
        /**
         * Returns an array of Container objects
         * @summary List Containers
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContainers(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainersCollection> {
            return localVarFp.listContainers(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListContainersApi - object-oriented interface
 * @export
 * @class ListContainersApi
 * @extends {BaseAPI}
 */
export class ListContainersApi extends BaseAPI {
    /**
     * Returns an array of Container objects
     * @summary List Containers
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListContainersApi
     */
    public listContainers(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListContainersApiFp(this.configuration).listContainers(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListDatastoresApi - axios parameter creator
 * @export
 */
export const ListDatastoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatastores: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/datastores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListDatastoresApi - functional programming interface
 * @export
 */
export const ListDatastoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListDatastoresApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDatastores(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatastoresCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDatastores(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListDatastoresApi - factory interface
 * @export
 */
export const ListDatastoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListDatastoresApiFp(configuration)
    return {
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDatastores(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<DatastoresCollection> {
            return localVarFp.listDatastores(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListDatastoresApi - object-oriented interface
 * @export
 * @class ListDatastoresApi
 * @extends {BaseAPI}
 */
export class ListDatastoresApi extends BaseAPI {
    /**
     * Returns an array of Datastore objects
     * @summary List Datastores
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListDatastoresApi
     */
    public listDatastores(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListDatastoresApiFp(this.configuration).listDatastores(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListFlavorsApi - axios parameter creator
 * @export
 */
export const ListFlavorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Flavor objects
         * @summary List Flavors
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlavors: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/flavors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListFlavorsApi - functional programming interface
 * @export
 */
export const ListFlavorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListFlavorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Flavor objects
         * @summary List Flavors
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFlavors(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FlavorsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFlavors(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListFlavorsApi - factory interface
 * @export
 */
export const ListFlavorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListFlavorsApiFp(configuration)
    return {
        /**
         * Returns an array of Flavor objects
         * @summary List Flavors
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFlavors(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<FlavorsCollection> {
            return localVarFp.listFlavors(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListFlavorsApi - object-oriented interface
 * @export
 * @class ListFlavorsApi
 * @extends {BaseAPI}
 */
export class ListFlavorsApi extends BaseAPI {
    /**
     * Returns an array of Flavor objects
     * @summary List Flavors
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListFlavorsApi
     */
    public listFlavors(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListFlavorsApiFp(this.configuration).listFlavors(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListHostsApi - axios parameter creator
 * @export
 */
export const ListHostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Host objects
         * @summary List Hosts
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHosts: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/hosts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListHostsApi - functional programming interface
 * @export
 */
export const ListHostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListHostsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Host objects
         * @summary List Hosts
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHosts(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHosts(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListHostsApi - factory interface
 * @export
 */
export const ListHostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListHostsApiFp(configuration)
    return {
        /**
         * Returns an array of Host objects
         * @summary List Hosts
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHosts(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<HostsCollection> {
            return localVarFp.listHosts(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListHostsApi - object-oriented interface
 * @export
 * @class ListHostsApi
 * @extends {BaseAPI}
 */
export class ListHostsApi extends BaseAPI {
    /**
     * Returns an array of Host objects
     * @summary List Hosts
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListHostsApi
     */
    public listHosts(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListHostsApiFp(this.configuration).listHosts(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListIpaddressTagsApi - axios parameter creator
 * @export
 */
export const ListIpaddressTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Ipaddress
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIpaddressTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listIpaddressTags', 'id', id)
            const localVarPath = `/ipaddresses/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListIpaddressTagsApi - functional programming interface
 * @export
 */
export const ListIpaddressTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListIpaddressTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Ipaddress
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIpaddressTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIpaddressTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListIpaddressTagsApi - factory interface
 * @export
 */
export const ListIpaddressTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListIpaddressTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Ipaddress
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIpaddressTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listIpaddressTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListIpaddressTagsApi - object-oriented interface
 * @export
 * @class ListIpaddressTagsApi
 * @extends {BaseAPI}
 */
export class ListIpaddressTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for Ipaddress
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListIpaddressTagsApi
     */
    public listIpaddressTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListIpaddressTagsApiFp(this.configuration).listIpaddressTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListIpaddressesApi - axios parameter creator
 * @export
 */
export const ListIpaddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIpaddresses: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ipaddresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListIpaddressesApi - functional programming interface
 * @export
 */
export const ListIpaddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListIpaddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIpaddresses(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIpaddresses(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListIpaddressesApi - factory interface
 * @export
 */
export const ListIpaddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListIpaddressesApiFp(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIpaddresses(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<IpaddressesCollection> {
            return localVarFp.listIpaddresses(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListIpaddressesApi - object-oriented interface
 * @export
 * @class ListIpaddressesApi
 * @extends {BaseAPI}
 */
export class ListIpaddressesApi extends BaseAPI {
    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListIpaddressesApi
     */
    public listIpaddresses(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListIpaddressesApiFp(this.configuration).listIpaddresses(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListNetworkAdapterIpaddressesApi - axios parameter creator
 * @export
 */
export const ListNetworkAdapterIpaddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapterIpaddresses: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listNetworkAdapterIpaddresses', 'id', id)
            const localVarPath = `/network_adapters/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListNetworkAdapterIpaddressesApi - functional programming interface
 * @export
 */
export const ListNetworkAdapterIpaddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListNetworkAdapterIpaddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNetworkAdapterIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNetworkAdapterIpaddresses(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListNetworkAdapterIpaddressesApi - factory interface
 * @export
 */
export const ListNetworkAdapterIpaddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListNetworkAdapterIpaddressesApiFp(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapterIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<IpaddressesCollection> {
            return localVarFp.listNetworkAdapterIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListNetworkAdapterIpaddressesApi - object-oriented interface
 * @export
 * @class ListNetworkAdapterIpaddressesApi
 * @extends {BaseAPI}
 */
export class ListNetworkAdapterIpaddressesApi extends BaseAPI {
    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for NetworkAdapter
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListNetworkAdapterIpaddressesApi
     */
    public listNetworkAdapterIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListNetworkAdapterIpaddressesApiFp(this.configuration).listNetworkAdapterIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListNetworkAdapterTagsApi - axios parameter creator
 * @export
 */
export const ListNetworkAdapterTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapterTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listNetworkAdapterTags', 'id', id)
            const localVarPath = `/network_adapters/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListNetworkAdapterTagsApi - functional programming interface
 * @export
 */
export const ListNetworkAdapterTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListNetworkAdapterTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNetworkAdapterTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNetworkAdapterTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListNetworkAdapterTagsApi - factory interface
 * @export
 */
export const ListNetworkAdapterTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListNetworkAdapterTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for NetworkAdapter
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapterTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listNetworkAdapterTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListNetworkAdapterTagsApi - object-oriented interface
 * @export
 * @class ListNetworkAdapterTagsApi
 * @extends {BaseAPI}
 */
export class ListNetworkAdapterTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for NetworkAdapter
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListNetworkAdapterTagsApi
     */
    public listNetworkAdapterTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListNetworkAdapterTagsApiFp(this.configuration).listNetworkAdapterTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListNetworkAdaptersApi - axios parameter creator
 * @export
 */
export const ListNetworkAdaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapters: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/network_adapters`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListNetworkAdaptersApi - functional programming interface
 * @export
 */
export const ListNetworkAdaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListNetworkAdaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNetworkAdapters(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNetworkAdapters(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListNetworkAdaptersApi - factory interface
 * @export
 */
export const ListNetworkAdaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListNetworkAdaptersApiFp(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkAdapters(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworkAdaptersCollection> {
            return localVarFp.listNetworkAdapters(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListNetworkAdaptersApi - object-oriented interface
 * @export
 * @class ListNetworkAdaptersApi
 * @extends {BaseAPI}
 */
export class ListNetworkAdaptersApi extends BaseAPI {
    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListNetworkAdaptersApi
     */
    public listNetworkAdapters(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListNetworkAdaptersApiFp(this.configuration).listNetworkAdapters(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListNetworkSubnetsApi - axios parameter creator
 * @export
 */
export const ListNetworkSubnetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkSubnets: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listNetworkSubnets', 'id', id)
            const localVarPath = `/networks/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListNetworkSubnetsApi - functional programming interface
 * @export
 */
export const ListNetworkSubnetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListNetworkSubnetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNetworkSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNetworkSubnets(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListNetworkSubnetsApi - factory interface
 * @export
 */
export const ListNetworkSubnetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListNetworkSubnetsApiFp(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SubnetsCollection> {
            return localVarFp.listNetworkSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListNetworkSubnetsApi - object-oriented interface
 * @export
 * @class ListNetworkSubnetsApi
 * @extends {BaseAPI}
 */
export class ListNetworkSubnetsApi extends BaseAPI {
    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for Network
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListNetworkSubnetsApi
     */
    public listNetworkSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListNetworkSubnetsApiFp(this.configuration).listNetworkSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListNetworkTagsApi - axios parameter creator
 * @export
 */
export const ListNetworkTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listNetworkTags', 'id', id)
            const localVarPath = `/networks/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListNetworkTagsApi - functional programming interface
 * @export
 */
export const ListNetworkTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListNetworkTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNetworkTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNetworkTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListNetworkTagsApi - factory interface
 * @export
 */
export const ListNetworkTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListNetworkTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Network
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworkTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listNetworkTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListNetworkTagsApi - object-oriented interface
 * @export
 * @class ListNetworkTagsApi
 * @extends {BaseAPI}
 */
export class ListNetworkTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for Network
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListNetworkTagsApi
     */
    public listNetworkTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListNetworkTagsApiFp(this.configuration).listNetworkTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListNetworksApi - axios parameter creator
 * @export
 */
export const ListNetworksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworks: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/networks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListNetworksApi - functional programming interface
 * @export
 */
export const ListNetworksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListNetworksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNetworks(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNetworks(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListNetworksApi - factory interface
 * @export
 */
export const ListNetworksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListNetworksApiFp(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNetworks(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworksCollection> {
            return localVarFp.listNetworks(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListNetworksApi - object-oriented interface
 * @export
 * @class ListNetworksApi
 * @extends {BaseAPI}
 */
export class ListNetworksApi extends BaseAPI {
    /**
     * Returns an array of Network objects
     * @summary List Networks
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListNetworksApi
     */
    public listNetworks(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListNetworksApiFp(this.configuration).listNetworks(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListOrchestrationStackIpaddressesApi - axios parameter creator
 * @export
 */
export const ListOrchestrationStackIpaddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackIpaddresses: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listOrchestrationStackIpaddresses', 'id', id)
            const localVarPath = `/orchestration_stacks/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListOrchestrationStackIpaddressesApi - functional programming interface
 * @export
 */
export const ListOrchestrationStackIpaddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListOrchestrationStackIpaddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrchestrationStackIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrchestrationStackIpaddresses(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListOrchestrationStackIpaddressesApi - factory interface
 * @export
 */
export const ListOrchestrationStackIpaddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListOrchestrationStackIpaddressesApiFp(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<IpaddressesCollection> {
            return localVarFp.listOrchestrationStackIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListOrchestrationStackIpaddressesApi - object-oriented interface
 * @export
 * @class ListOrchestrationStackIpaddressesApi
 * @extends {BaseAPI}
 */
export class ListOrchestrationStackIpaddressesApi extends BaseAPI {
    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListOrchestrationStackIpaddressesApi
     */
    public listOrchestrationStackIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListOrchestrationStackIpaddressesApiFp(this.configuration).listOrchestrationStackIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListOrchestrationStackNetworkAdaptersApi - axios parameter creator
 * @export
 */
export const ListOrchestrationStackNetworkAdaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackNetworkAdapters: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listOrchestrationStackNetworkAdapters', 'id', id)
            const localVarPath = `/orchestration_stacks/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListOrchestrationStackNetworkAdaptersApi - functional programming interface
 * @export
 */
export const ListOrchestrationStackNetworkAdaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListOrchestrationStackNetworkAdaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrchestrationStackNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrchestrationStackNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListOrchestrationStackNetworkAdaptersApi - factory interface
 * @export
 */
export const ListOrchestrationStackNetworkAdaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListOrchestrationStackNetworkAdaptersApiFp(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworkAdaptersCollection> {
            return localVarFp.listOrchestrationStackNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListOrchestrationStackNetworkAdaptersApi - object-oriented interface
 * @export
 * @class ListOrchestrationStackNetworkAdaptersApi
 * @extends {BaseAPI}
 */
export class ListOrchestrationStackNetworkAdaptersApi extends BaseAPI {
    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListOrchestrationStackNetworkAdaptersApi
     */
    public listOrchestrationStackNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListOrchestrationStackNetworkAdaptersApiFp(this.configuration).listOrchestrationStackNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListOrchestrationStackNetworksApi - axios parameter creator
 * @export
 */
export const ListOrchestrationStackNetworksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackNetworks: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listOrchestrationStackNetworks', 'id', id)
            const localVarPath = `/orchestration_stacks/{id}/networks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListOrchestrationStackNetworksApi - functional programming interface
 * @export
 */
export const ListOrchestrationStackNetworksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListOrchestrationStackNetworksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrchestrationStackNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrchestrationStackNetworks(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListOrchestrationStackNetworksApi - factory interface
 * @export
 */
export const ListOrchestrationStackNetworksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListOrchestrationStackNetworksApiFp(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworksCollection> {
            return localVarFp.listOrchestrationStackNetworks(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListOrchestrationStackNetworksApi - object-oriented interface
 * @export
 * @class ListOrchestrationStackNetworksApi
 * @extends {BaseAPI}
 */
export class ListOrchestrationStackNetworksApi extends BaseAPI {
    /**
     * Returns an array of Network objects
     * @summary List Networks for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListOrchestrationStackNetworksApi
     */
    public listOrchestrationStackNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListOrchestrationStackNetworksApiFp(this.configuration).listOrchestrationStackNetworks(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListOrchestrationStackSecurityGroupsApi - axios parameter creator
 * @export
 */
export const ListOrchestrationStackSecurityGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackSecurityGroups: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listOrchestrationStackSecurityGroups', 'id', id)
            const localVarPath = `/orchestration_stacks/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListOrchestrationStackSecurityGroupsApi - functional programming interface
 * @export
 */
export const ListOrchestrationStackSecurityGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListOrchestrationStackSecurityGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrchestrationStackSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrchestrationStackSecurityGroups(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListOrchestrationStackSecurityGroupsApi - factory interface
 * @export
 */
export const ListOrchestrationStackSecurityGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListOrchestrationStackSecurityGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SecurityGroupsCollection> {
            return localVarFp.listOrchestrationStackSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListOrchestrationStackSecurityGroupsApi - object-oriented interface
 * @export
 * @class ListOrchestrationStackSecurityGroupsApi
 * @extends {BaseAPI}
 */
export class ListOrchestrationStackSecurityGroupsApi extends BaseAPI {
    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListOrchestrationStackSecurityGroupsApi
     */
    public listOrchestrationStackSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListOrchestrationStackSecurityGroupsApiFp(this.configuration).listOrchestrationStackSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListOrchestrationStackSubnetsApi - axios parameter creator
 * @export
 */
export const ListOrchestrationStackSubnetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackSubnets: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listOrchestrationStackSubnets', 'id', id)
            const localVarPath = `/orchestration_stacks/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListOrchestrationStackSubnetsApi - functional programming interface
 * @export
 */
export const ListOrchestrationStackSubnetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListOrchestrationStackSubnetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrchestrationStackSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrchestrationStackSubnets(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListOrchestrationStackSubnetsApi - factory interface
 * @export
 */
export const ListOrchestrationStackSubnetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListOrchestrationStackSubnetsApiFp(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SubnetsCollection> {
            return localVarFp.listOrchestrationStackSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListOrchestrationStackSubnetsApi - object-oriented interface
 * @export
 * @class ListOrchestrationStackSubnetsApi
 * @extends {BaseAPI}
 */
export class ListOrchestrationStackSubnetsApi extends BaseAPI {
    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListOrchestrationStackSubnetsApi
     */
    public listOrchestrationStackSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListOrchestrationStackSubnetsApiFp(this.configuration).listOrchestrationStackSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListOrchestrationStackVmsApi - axios parameter creator
 * @export
 */
export const ListOrchestrationStackVmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackVms: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listOrchestrationStackVms', 'id', id)
            const localVarPath = `/orchestration_stacks/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListOrchestrationStackVmsApi - functional programming interface
 * @export
 */
export const ListOrchestrationStackVmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListOrchestrationStackVmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrchestrationStackVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrchestrationStackVms(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListOrchestrationStackVmsApi - factory interface
 * @export
 */
export const ListOrchestrationStackVmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListOrchestrationStackVmsApiFp(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VmsCollection> {
            return localVarFp.listOrchestrationStackVms(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListOrchestrationStackVmsApi - object-oriented interface
 * @export
 * @class ListOrchestrationStackVmsApi
 * @extends {BaseAPI}
 */
export class ListOrchestrationStackVmsApi extends BaseAPI {
    /**
     * Returns an array of Vm objects
     * @summary List Vms for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListOrchestrationStackVmsApi
     */
    public listOrchestrationStackVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListOrchestrationStackVmsApiFp(this.configuration).listOrchestrationStackVms(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListOrchestrationStackVolumesApi - axios parameter creator
 * @export
 */
export const ListOrchestrationStackVolumesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackVolumes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listOrchestrationStackVolumes', 'id', id)
            const localVarPath = `/orchestration_stacks/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListOrchestrationStackVolumesApi - functional programming interface
 * @export
 */
export const ListOrchestrationStackVolumesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListOrchestrationStackVolumesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrchestrationStackVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrchestrationStackVolumes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListOrchestrationStackVolumesApi - factory interface
 * @export
 */
export const ListOrchestrationStackVolumesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListOrchestrationStackVolumesApiFp(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for OrchestrationStack
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStackVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumesCollection> {
            return localVarFp.listOrchestrationStackVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListOrchestrationStackVolumesApi - object-oriented interface
 * @export
 * @class ListOrchestrationStackVolumesApi
 * @extends {BaseAPI}
 */
export class ListOrchestrationStackVolumesApi extends BaseAPI {
    /**
     * Returns an array of Volume objects
     * @summary List Volumes for OrchestrationStack
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListOrchestrationStackVolumesApi
     */
    public listOrchestrationStackVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListOrchestrationStackVolumesApiFp(this.configuration).listOrchestrationStackVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListOrchestrationStacksApi - axios parameter creator
 * @export
 */
export const ListOrchestrationStacksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStacks: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orchestration_stacks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListOrchestrationStacksApi - functional programming interface
 * @export
 */
export const ListOrchestrationStacksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListOrchestrationStacksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrchestrationStacks(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrchestrationStacksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrchestrationStacks(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListOrchestrationStacksApi - factory interface
 * @export
 */
export const ListOrchestrationStacksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListOrchestrationStacksApiFp(configuration)
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrchestrationStacks(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<OrchestrationStacksCollection> {
            return localVarFp.listOrchestrationStacks(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListOrchestrationStacksApi - object-oriented interface
 * @export
 * @class ListOrchestrationStacksApi
 * @extends {BaseAPI}
 */
export class ListOrchestrationStacksApi extends BaseAPI {
    /**
     * Returns an array of OrchestrationStack objects
     * @summary List OrchestrationStacks
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListOrchestrationStacksApi
     */
    public listOrchestrationStacks(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListOrchestrationStacksApiFp(this.configuration).listOrchestrationStacks(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSecurityGroupTagsApi - axios parameter creator
 * @export
 */
export const ListSecurityGroupTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroupTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSecurityGroupTags', 'id', id)
            const localVarPath = `/security_groups/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSecurityGroupTagsApi - functional programming interface
 * @export
 */
export const ListSecurityGroupTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSecurityGroupTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSecurityGroupTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSecurityGroupTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSecurityGroupTagsApi - factory interface
 * @export
 */
export const ListSecurityGroupTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSecurityGroupTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroupTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listSecurityGroupTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSecurityGroupTagsApi - object-oriented interface
 * @export
 * @class ListSecurityGroupTagsApi
 * @extends {BaseAPI}
 */
export class ListSecurityGroupTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for SecurityGroup
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSecurityGroupTagsApi
     */
    public listSecurityGroupTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSecurityGroupTagsApiFp(this.configuration).listSecurityGroupTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSecurityGroupVmsApi - axios parameter creator
 * @export
 */
export const ListSecurityGroupVmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroupVms: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSecurityGroupVms', 'id', id)
            const localVarPath = `/security_groups/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSecurityGroupVmsApi - functional programming interface
 * @export
 */
export const ListSecurityGroupVmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSecurityGroupVmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSecurityGroupVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSecurityGroupVms(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSecurityGroupVmsApi - factory interface
 * @export
 */
export const ListSecurityGroupVmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSecurityGroupVmsApiFp(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SecurityGroup
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroupVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VmsCollection> {
            return localVarFp.listSecurityGroupVms(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSecurityGroupVmsApi - object-oriented interface
 * @export
 * @class ListSecurityGroupVmsApi
 * @extends {BaseAPI}
 */
export class ListSecurityGroupVmsApi extends BaseAPI {
    /**
     * Returns an array of Vm objects
     * @summary List Vms for SecurityGroup
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSecurityGroupVmsApi
     */
    public listSecurityGroupVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSecurityGroupVmsApiFp(this.configuration).listSecurityGroupVms(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSecurityGroupsApi - axios parameter creator
 * @export
 */
export const ListSecurityGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroups: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/security_groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSecurityGroupsApi - functional programming interface
 * @export
 */
export const ListSecurityGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSecurityGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSecurityGroups(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSecurityGroups(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSecurityGroupsApi - factory interface
 * @export
 */
export const ListSecurityGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSecurityGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSecurityGroups(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SecurityGroupsCollection> {
            return localVarFp.listSecurityGroups(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSecurityGroupsApi - object-oriented interface
 * @export
 * @class ListSecurityGroupsApi
 * @extends {BaseAPI}
 */
export class ListSecurityGroupsApi extends BaseAPI {
    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSecurityGroupsApi
     */
    public listSecurityGroups(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSecurityGroupsApiFp(this.configuration).listSecurityGroups(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceInstanceNodesApi - axios parameter creator
 * @export
 */
export const ListServiceInstanceNodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstanceNodes: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/service_instance_nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceInstanceNodesApi - functional programming interface
 * @export
 */
export const ListServiceInstanceNodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceInstanceNodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceInstanceNodes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstanceNodesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceInstanceNodes(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceInstanceNodesApi - factory interface
 * @export
 */
export const ListServiceInstanceNodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceInstanceNodesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstanceNodes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInstanceNodesCollection> {
            return localVarFp.listServiceInstanceNodes(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceInstanceNodesApi - object-oriented interface
 * @export
 * @class ListServiceInstanceNodesApi
 * @extends {BaseAPI}
 */
export class ListServiceInstanceNodesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInstanceNode objects
     * @summary List ServiceInstanceNodes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceInstanceNodesApi
     */
    public listServiceInstanceNodes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceInstanceNodesApiFp(this.configuration).listServiceInstanceNodes(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceInstanceServiceInstanceNodesApi - axios parameter creator
 * @export
 */
export const ListServiceInstanceServiceInstanceNodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for ServiceInstance
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstanceServiceInstanceNodes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listServiceInstanceServiceInstanceNodes', 'id', id)
            const localVarPath = `/service_instances/{id}/service_instance_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceInstanceServiceInstanceNodesApi - functional programming interface
 * @export
 */
export const ListServiceInstanceServiceInstanceNodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceInstanceServiceInstanceNodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for ServiceInstance
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceInstanceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstanceNodesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceInstanceServiceInstanceNodes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceInstanceServiceInstanceNodesApi - factory interface
 * @export
 */
export const ListServiceInstanceServiceInstanceNodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceInstanceServiceInstanceNodesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for ServiceInstance
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstanceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInstanceNodesCollection> {
            return localVarFp.listServiceInstanceServiceInstanceNodes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceInstanceServiceInstanceNodesApi - object-oriented interface
 * @export
 * @class ListServiceInstanceServiceInstanceNodesApi
 * @extends {BaseAPI}
 */
export class ListServiceInstanceServiceInstanceNodesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInstanceNode objects
     * @summary List ServiceInstanceNodes for ServiceInstance
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceInstanceServiceInstanceNodesApi
     */
    public listServiceInstanceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceInstanceServiceInstanceNodesApiFp(this.configuration).listServiceInstanceServiceInstanceNodes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceInstancesApi - axios parameter creator
 * @export
 */
export const ListServiceInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstances: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/service_instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceInstancesApi - functional programming interface
 * @export
 */
export const ListServiceInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceInstances(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceInstances(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceInstancesApi - factory interface
 * @export
 */
export const ListServiceInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceInstancesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInstances(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInstancesCollection> {
            return localVarFp.listServiceInstances(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceInstancesApi - object-oriented interface
 * @export
 * @class ListServiceInstancesApi
 * @extends {BaseAPI}
 */
export class ListServiceInstancesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceInstancesApi
     */
    public listServiceInstances(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceInstancesApiFp(this.configuration).listServiceInstances(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceInventoriesApi - axios parameter creator
 * @export
 */
export const ListServiceInventoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInventories: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/service_inventories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceInventoriesApi - functional programming interface
 * @export
 */
export const ListServiceInventoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceInventoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceInventories(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInventoriesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceInventories(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceInventoriesApi - factory interface
 * @export
 */
export const ListServiceInventoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceInventoriesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInventories(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInventoriesCollection> {
            return localVarFp.listServiceInventories(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceInventoriesApi - object-oriented interface
 * @export
 * @class ListServiceInventoriesApi
 * @extends {BaseAPI}
 */
export class ListServiceInventoriesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInventory objects
     * @summary List ServiceInventories
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceInventoriesApi
     */
    public listServiceInventories(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceInventoriesApiFp(this.configuration).listServiceInventories(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceInventoryTagsApi - axios parameter creator
 * @export
 */
export const ListServiceInventoryTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceInventory
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInventoryTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listServiceInventoryTags', 'id', id)
            const localVarPath = `/service_inventories/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceInventoryTagsApi - functional programming interface
 * @export
 */
export const ListServiceInventoryTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceInventoryTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceInventory
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceInventoryTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceInventoryTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceInventoryTagsApi - factory interface
 * @export
 */
export const ListServiceInventoryTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceInventoryTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceInventory
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceInventoryTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listServiceInventoryTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceInventoryTagsApi - object-oriented interface
 * @export
 * @class ListServiceInventoryTagsApi
 * @extends {BaseAPI}
 */
export class ListServiceInventoryTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for ServiceInventory
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceInventoryTagsApi
     */
    public listServiceInventoryTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceInventoryTagsApiFp(this.configuration).listServiceInventoryTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceOfferingIconsApi - axios parameter creator
 * @export
 */
export const ListServiceOfferingIconsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceOfferingIcon objects
         * @summary List ServiceOfferingIcons
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingIcons: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/service_offering_icons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceOfferingIconsApi - functional programming interface
 * @export
 */
export const ListServiceOfferingIconsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceOfferingIconsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceOfferingIcon objects
         * @summary List ServiceOfferingIcons
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceOfferingIcons(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingIconsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceOfferingIcons(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceOfferingIconsApi - factory interface
 * @export
 */
export const ListServiceOfferingIconsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceOfferingIconsApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceOfferingIcon objects
         * @summary List ServiceOfferingIcons
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingIcons(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceOfferingIconsCollection> {
            return localVarFp.listServiceOfferingIcons(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceOfferingIconsApi - object-oriented interface
 * @export
 * @class ListServiceOfferingIconsApi
 * @extends {BaseAPI}
 */
export class ListServiceOfferingIconsApi extends BaseAPI {
    /**
     * Returns an array of ServiceOfferingIcon objects
     * @summary List ServiceOfferingIcons
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceOfferingIconsApi
     */
    public listServiceOfferingIcons(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceOfferingIconsApiFp(this.configuration).listServiceOfferingIcons(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceOfferingNodesApi - axios parameter creator
 * @export
 */
export const ListServiceOfferingNodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingNodes: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/service_offering_nodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceOfferingNodesApi - functional programming interface
 * @export
 */
export const ListServiceOfferingNodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceOfferingNodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceOfferingNodes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingNodesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceOfferingNodes(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceOfferingNodesApi - factory interface
 * @export
 */
export const ListServiceOfferingNodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceOfferingNodesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingNodes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceOfferingNodesCollection> {
            return localVarFp.listServiceOfferingNodes(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceOfferingNodesApi - object-oriented interface
 * @export
 * @class ListServiceOfferingNodesApi
 * @extends {BaseAPI}
 */
export class ListServiceOfferingNodesApi extends BaseAPI {
    /**
     * Returns an array of ServiceOfferingNode objects
     * @summary List ServiceOfferingNodes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceOfferingNodesApi
     */
    public listServiceOfferingNodes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceOfferingNodesApiFp(this.configuration).listServiceOfferingNodes(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceOfferingServiceInstancesApi - axios parameter creator
 * @export
 */
export const ListServiceOfferingServiceInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServiceInstances: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listServiceOfferingServiceInstances', 'id', id)
            const localVarPath = `/service_offerings/{id}/service_instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceOfferingServiceInstancesApi - functional programming interface
 * @export
 */
export const ListServiceOfferingServiceInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceOfferingServiceInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceOfferingServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceOfferingServiceInstances(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceOfferingServiceInstancesApi - factory interface
 * @export
 */
export const ListServiceOfferingServiceInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceOfferingServiceInstancesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInstancesCollection> {
            return localVarFp.listServiceOfferingServiceInstances(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceOfferingServiceInstancesApi - object-oriented interface
 * @export
 * @class ListServiceOfferingServiceInstancesApi
 * @extends {BaseAPI}
 */
export class ListServiceOfferingServiceInstancesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances for ServiceOffering
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceOfferingServiceInstancesApi
     */
    public listServiceOfferingServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceOfferingServiceInstancesApiFp(this.configuration).listServiceOfferingServiceInstances(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceOfferingServiceOfferingNodesApi - axios parameter creator
 * @export
 */
export const ListServiceOfferingServiceOfferingNodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServiceOfferingNodes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listServiceOfferingServiceOfferingNodes', 'id', id)
            const localVarPath = `/service_offerings/{id}/service_offering_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceOfferingServiceOfferingNodesApi - functional programming interface
 * @export
 */
export const ListServiceOfferingServiceOfferingNodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceOfferingServiceOfferingNodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceOfferingServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingNodesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceOfferingServiceOfferingNodes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceOfferingServiceOfferingNodesApi - factory interface
 * @export
 */
export const ListServiceOfferingServiceOfferingNodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceOfferingServiceOfferingNodesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceOfferingNodesCollection> {
            return localVarFp.listServiceOfferingServiceOfferingNodes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceOfferingServiceOfferingNodesApi - object-oriented interface
 * @export
 * @class ListServiceOfferingServiceOfferingNodesApi
 * @extends {BaseAPI}
 */
export class ListServiceOfferingServiceOfferingNodesApi extends BaseAPI {
    /**
     * Returns an array of ServiceOfferingNode objects
     * @summary List ServiceOfferingNodes for ServiceOffering
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceOfferingServiceOfferingNodesApi
     */
    public listServiceOfferingServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceOfferingServiceOfferingNodesApiFp(this.configuration).listServiceOfferingServiceOfferingNodes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceOfferingServicePlansApi - axios parameter creator
 * @export
 */
export const ListServiceOfferingServicePlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServicePlans: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listServiceOfferingServicePlans', 'id', id)
            const localVarPath = `/service_offerings/{id}/service_plans`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceOfferingServicePlansApi - functional programming interface
 * @export
 */
export const ListServiceOfferingServicePlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceOfferingServicePlansApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceOfferingServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlansCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceOfferingServicePlans(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceOfferingServicePlansApi - factory interface
 * @export
 */
export const ListServiceOfferingServicePlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceOfferingServicePlansApiFp(configuration)
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServicePlansCollection> {
            return localVarFp.listServiceOfferingServicePlans(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceOfferingServicePlansApi - object-oriented interface
 * @export
 * @class ListServiceOfferingServicePlansApi
 * @extends {BaseAPI}
 */
export class ListServiceOfferingServicePlansApi extends BaseAPI {
    /**
     * Returns an array of ServicePlan objects
     * @summary List ServicePlans for ServiceOffering
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceOfferingServicePlansApi
     */
    public listServiceOfferingServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceOfferingServicePlansApiFp(this.configuration).listServiceOfferingServicePlans(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceOfferingTagsApi - axios parameter creator
 * @export
 */
export const ListServiceOfferingTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listServiceOfferingTags', 'id', id)
            const localVarPath = `/service_offerings/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceOfferingTagsApi - functional programming interface
 * @export
 */
export const ListServiceOfferingTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceOfferingTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceOfferingTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceOfferingTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceOfferingTagsApi - factory interface
 * @export
 */
export const ListServiceOfferingTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceOfferingTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for ServiceOffering
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferingTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listServiceOfferingTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceOfferingTagsApi - object-oriented interface
 * @export
 * @class ListServiceOfferingTagsApi
 * @extends {BaseAPI}
 */
export class ListServiceOfferingTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for ServiceOffering
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceOfferingTagsApi
     */
    public listServiceOfferingTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceOfferingTagsApiFp(this.configuration).listServiceOfferingTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServiceOfferingsApi - axios parameter creator
 * @export
 */
export const ListServiceOfferingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferings: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/service_offerings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServiceOfferingsApi - functional programming interface
 * @export
 */
export const ListServiceOfferingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServiceOfferingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServiceOfferings(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceOfferings(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServiceOfferingsApi - factory interface
 * @export
 */
export const ListServiceOfferingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServiceOfferingsApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServiceOfferings(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceOfferingsCollection> {
            return localVarFp.listServiceOfferings(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServiceOfferingsApi - object-oriented interface
 * @export
 * @class ListServiceOfferingsApi
 * @extends {BaseAPI}
 */
export class ListServiceOfferingsApi extends BaseAPI {
    /**
     * Returns an array of ServiceOffering objects
     * @summary List ServiceOfferings
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServiceOfferingsApi
     */
    public listServiceOfferings(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServiceOfferingsApiFp(this.configuration).listServiceOfferings(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServicePlanServiceInstancesApi - axios parameter creator
 * @export
 */
export const ListServicePlanServiceInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServicePlan
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServicePlanServiceInstances: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listServicePlanServiceInstances', 'id', id)
            const localVarPath = `/service_plans/{id}/service_instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServicePlanServiceInstancesApi - functional programming interface
 * @export
 */
export const ListServicePlanServiceInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServicePlanServiceInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServicePlan
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServicePlanServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServicePlanServiceInstances(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServicePlanServiceInstancesApi - factory interface
 * @export
 */
export const ListServicePlanServiceInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServicePlanServiceInstancesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for ServicePlan
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServicePlanServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInstancesCollection> {
            return localVarFp.listServicePlanServiceInstances(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServicePlanServiceInstancesApi - object-oriented interface
 * @export
 * @class ListServicePlanServiceInstancesApi
 * @extends {BaseAPI}
 */
export class ListServicePlanServiceInstancesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances for ServicePlan
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServicePlanServiceInstancesApi
     */
    public listServicePlanServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServicePlanServiceInstancesApiFp(this.configuration).listServicePlanServiceInstances(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListServicePlansApi - axios parameter creator
 * @export
 */
export const ListServicePlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServicePlans: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/service_plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListServicePlansApi - functional programming interface
 * @export
 */
export const ListServicePlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListServicePlansApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listServicePlans(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlansCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listServicePlans(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListServicePlansApi - factory interface
 * @export
 */
export const ListServicePlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListServicePlansApiFp(configuration)
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listServicePlans(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServicePlansCollection> {
            return localVarFp.listServicePlans(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListServicePlansApi - object-oriented interface
 * @export
 * @class ListServicePlansApi
 * @extends {BaseAPI}
 */
export class ListServicePlansApi extends BaseAPI {
    /**
     * Returns an array of ServicePlan objects
     * @summary List ServicePlans
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListServicePlansApi
     */
    public listServicePlans(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListServicePlansApiFp(this.configuration).listServicePlans(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceAvailabilitiesApi - axios parameter creator
 * @export
 */
export const ListSourceAvailabilitiesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Availability objects
         * @summary List Availabilities for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceAvailabilities: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceAvailabilities', 'id', id)
            const localVarPath = `/sources/{id}/availabilities`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceAvailabilitiesApi - functional programming interface
 * @export
 */
export const ListSourceAvailabilitiesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceAvailabilitiesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Availability objects
         * @summary List Availabilities for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceAvailabilities(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AvailabilitiesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceAvailabilities(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceAvailabilitiesApi - factory interface
 * @export
 */
export const ListSourceAvailabilitiesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceAvailabilitiesApiFp(configuration)
    return {
        /**
         * Returns an array of Availability objects
         * @summary List Availabilities for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceAvailabilities(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<AvailabilitiesCollection> {
            return localVarFp.listSourceAvailabilities(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceAvailabilitiesApi - object-oriented interface
 * @export
 * @class ListSourceAvailabilitiesApi
 * @extends {BaseAPI}
 */
export class ListSourceAvailabilitiesApi extends BaseAPI {
    /**
     * Returns an array of Availability objects
     * @summary List Availabilities for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceAvailabilitiesApi
     */
    public listSourceAvailabilities(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceAvailabilitiesApiFp(this.configuration).listSourceAvailabilities(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceClustersApi - axios parameter creator
 * @export
 */
export const ListSourceClustersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceClusters: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceClusters', 'id', id)
            const localVarPath = `/sources/{id}/clusters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceClustersApi - functional programming interface
 * @export
 */
export const ListSourceClustersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceClustersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceClusters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClustersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceClusters(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceClustersApi - factory interface
 * @export
 */
export const ListSourceClustersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceClustersApiFp(configuration)
    return {
        /**
         * Returns an array of Cluster objects
         * @summary List Clusters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceClusters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ClustersCollection> {
            return localVarFp.listSourceClusters(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceClustersApi - object-oriented interface
 * @export
 * @class ListSourceClustersApi
 * @extends {BaseAPI}
 */
export class ListSourceClustersApi extends BaseAPI {
    /**
     * Returns an array of Cluster objects
     * @summary List Clusters for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceClustersApi
     */
    public listSourceClusters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceClustersApiFp(this.configuration).listSourceClusters(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceContainerGroupsApi - axios parameter creator
 * @export
 */
export const ListSourceContainerGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerGroups: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceContainerGroups', 'id', id)
            const localVarPath = `/sources/{id}/container_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceContainerGroupsApi - functional programming interface
 * @export
 */
export const ListSourceContainerGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceContainerGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceContainerGroups(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceContainerGroupsApi - factory interface
 * @export
 */
export const ListSourceContainerGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceContainerGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerGroupsCollection> {
            return localVarFp.listSourceContainerGroups(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceContainerGroupsApi - object-oriented interface
 * @export
 * @class ListSourceContainerGroupsApi
 * @extends {BaseAPI}
 */
export class ListSourceContainerGroupsApi extends BaseAPI {
    /**
     * Returns an array of ContainerGroup objects
     * @summary List ContainerGroups for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceContainerGroupsApi
     */
    public listSourceContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceContainerGroupsApiFp(this.configuration).listSourceContainerGroups(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceContainerImagesApi - axios parameter creator
 * @export
 */
export const ListSourceContainerImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerImages: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceContainerImages', 'id', id)
            const localVarPath = `/sources/{id}/container_images`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceContainerImagesApi - functional programming interface
 * @export
 */
export const ListSourceContainerImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceContainerImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceContainerImages(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImagesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceContainerImages(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceContainerImagesApi - factory interface
 * @export
 */
export const ListSourceContainerImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceContainerImagesApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerImages(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerImagesCollection> {
            return localVarFp.listSourceContainerImages(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceContainerImagesApi - object-oriented interface
 * @export
 * @class ListSourceContainerImagesApi
 * @extends {BaseAPI}
 */
export class ListSourceContainerImagesApi extends BaseAPI {
    /**
     * Returns an array of ContainerImage objects
     * @summary List ContainerImages for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceContainerImagesApi
     */
    public listSourceContainerImages(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceContainerImagesApiFp(this.configuration).listSourceContainerImages(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceContainerNodesApi - axios parameter creator
 * @export
 */
export const ListSourceContainerNodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerNodes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceContainerNodes', 'id', id)
            const localVarPath = `/sources/{id}/container_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceContainerNodesApi - functional programming interface
 * @export
 */
export const ListSourceContainerNodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceContainerNodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceContainerNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerNodesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceContainerNodes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceContainerNodesApi - factory interface
 * @export
 */
export const ListSourceContainerNodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceContainerNodesApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerNodesCollection> {
            return localVarFp.listSourceContainerNodes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceContainerNodesApi - object-oriented interface
 * @export
 * @class ListSourceContainerNodesApi
 * @extends {BaseAPI}
 */
export class ListSourceContainerNodesApi extends BaseAPI {
    /**
     * Returns an array of ContainerNode objects
     * @summary List ContainerNodes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceContainerNodesApi
     */
    public listSourceContainerNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceContainerNodesApiFp(this.configuration).listSourceContainerNodes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceContainerProjectsApi - axios parameter creator
 * @export
 */
export const ListSourceContainerProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerProjects: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceContainerProjects', 'id', id)
            const localVarPath = `/sources/{id}/container_projects`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceContainerProjectsApi - functional programming interface
 * @export
 */
export const ListSourceContainerProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceContainerProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceContainerProjects(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerProjectsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceContainerProjects(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceContainerProjectsApi - factory interface
 * @export
 */
export const ListSourceContainerProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceContainerProjectsApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerProjects(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerProjectsCollection> {
            return localVarFp.listSourceContainerProjects(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceContainerProjectsApi - object-oriented interface
 * @export
 * @class ListSourceContainerProjectsApi
 * @extends {BaseAPI}
 */
export class ListSourceContainerProjectsApi extends BaseAPI {
    /**
     * Returns an array of ContainerProject objects
     * @summary List ContainerProjects for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceContainerProjectsApi
     */
    public listSourceContainerProjects(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceContainerProjectsApiFp(this.configuration).listSourceContainerProjects(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceContainerTemplatesApi - axios parameter creator
 * @export
 */
export const ListSourceContainerTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerTemplates: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceContainerTemplates', 'id', id)
            const localVarPath = `/sources/{id}/container_templates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceContainerTemplatesApi - functional programming interface
 * @export
 */
export const ListSourceContainerTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceContainerTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceContainerTemplates(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTemplatesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceContainerTemplates(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceContainerTemplatesApi - factory interface
 * @export
 */
export const ListSourceContainerTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceContainerTemplatesApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainerTemplates(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerTemplatesCollection> {
            return localVarFp.listSourceContainerTemplates(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceContainerTemplatesApi - object-oriented interface
 * @export
 * @class ListSourceContainerTemplatesApi
 * @extends {BaseAPI}
 */
export class ListSourceContainerTemplatesApi extends BaseAPI {
    /**
     * Returns an array of ContainerTemplate objects
     * @summary List ContainerTemplates for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceContainerTemplatesApi
     */
    public listSourceContainerTemplates(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceContainerTemplatesApiFp(this.configuration).listSourceContainerTemplates(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceContainersApi - axios parameter creator
 * @export
 */
export const ListSourceContainersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Container objects
         * @summary List Containers for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainers: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceContainers', 'id', id)
            const localVarPath = `/sources/{id}/containers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceContainersApi - functional programming interface
 * @export
 */
export const ListSourceContainersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceContainersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Container objects
         * @summary List Containers for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceContainers(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceContainers(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceContainersApi - factory interface
 * @export
 */
export const ListSourceContainersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceContainersApiFp(configuration)
    return {
        /**
         * Returns an array of Container objects
         * @summary List Containers for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceContainers(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainersCollection> {
            return localVarFp.listSourceContainers(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceContainersApi - object-oriented interface
 * @export
 * @class ListSourceContainersApi
 * @extends {BaseAPI}
 */
export class ListSourceContainersApi extends BaseAPI {
    /**
     * Returns an array of Container objects
     * @summary List Containers for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceContainersApi
     */
    public listSourceContainers(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceContainersApiFp(this.configuration).listSourceContainers(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceDatastoresApi - axios parameter creator
 * @export
 */
export const ListSourceDatastoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceDatastores: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceDatastores', 'id', id)
            const localVarPath = `/sources/{id}/datastores`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceDatastoresApi - functional programming interface
 * @export
 */
export const ListSourceDatastoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceDatastoresApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceDatastores(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DatastoresCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceDatastores(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceDatastoresApi - factory interface
 * @export
 */
export const ListSourceDatastoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceDatastoresApiFp(configuration)
    return {
        /**
         * Returns an array of Datastore objects
         * @summary List Datastores for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceDatastores(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<DatastoresCollection> {
            return localVarFp.listSourceDatastores(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceDatastoresApi - object-oriented interface
 * @export
 * @class ListSourceDatastoresApi
 * @extends {BaseAPI}
 */
export class ListSourceDatastoresApi extends BaseAPI {
    /**
     * Returns an array of Datastore objects
     * @summary List Datastores for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceDatastoresApi
     */
    public listSourceDatastores(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceDatastoresApiFp(this.configuration).listSourceDatastores(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceHostsApi - axios parameter creator
 * @export
 */
export const ListSourceHostsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceHosts: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceHosts', 'id', id)
            const localVarPath = `/sources/{id}/hosts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceHostsApi - functional programming interface
 * @export
 */
export const ListSourceHostsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceHostsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceHosts(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceHosts(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceHostsApi - factory interface
 * @export
 */
export const ListSourceHostsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceHostsApiFp(configuration)
    return {
        /**
         * Returns an array of Host objects
         * @summary List Hosts for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceHosts(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<HostsCollection> {
            return localVarFp.listSourceHosts(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceHostsApi - object-oriented interface
 * @export
 * @class ListSourceHostsApi
 * @extends {BaseAPI}
 */
export class ListSourceHostsApi extends BaseAPI {
    /**
     * Returns an array of Host objects
     * @summary List Hosts for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceHostsApi
     */
    public listSourceHosts(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceHostsApiFp(this.configuration).listSourceHosts(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceIpaddressesApi - axios parameter creator
 * @export
 */
export const ListSourceIpaddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceIpaddresses: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceIpaddresses', 'id', id)
            const localVarPath = `/sources/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceIpaddressesApi - functional programming interface
 * @export
 */
export const ListSourceIpaddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceIpaddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceIpaddresses(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceIpaddressesApi - factory interface
 * @export
 */
export const ListSourceIpaddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceIpaddressesApiFp(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<IpaddressesCollection> {
            return localVarFp.listSourceIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceIpaddressesApi - object-oriented interface
 * @export
 * @class ListSourceIpaddressesApi
 * @extends {BaseAPI}
 */
export class ListSourceIpaddressesApi extends BaseAPI {
    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceIpaddressesApi
     */
    public listSourceIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceIpaddressesApiFp(this.configuration).listSourceIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceNetworkAdaptersApi - axios parameter creator
 * @export
 */
export const ListSourceNetworkAdaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceNetworkAdapters: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceNetworkAdapters', 'id', id)
            const localVarPath = `/sources/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceNetworkAdaptersApi - functional programming interface
 * @export
 */
export const ListSourceNetworkAdaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceNetworkAdaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceNetworkAdaptersApi - factory interface
 * @export
 */
export const ListSourceNetworkAdaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceNetworkAdaptersApiFp(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworkAdaptersCollection> {
            return localVarFp.listSourceNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceNetworkAdaptersApi - object-oriented interface
 * @export
 * @class ListSourceNetworkAdaptersApi
 * @extends {BaseAPI}
 */
export class ListSourceNetworkAdaptersApi extends BaseAPI {
    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceNetworkAdaptersApi
     */
    public listSourceNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceNetworkAdaptersApiFp(this.configuration).listSourceNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceNetworksApi - axios parameter creator
 * @export
 */
export const ListSourceNetworksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceNetworks: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceNetworks', 'id', id)
            const localVarPath = `/sources/{id}/networks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceNetworksApi - functional programming interface
 * @export
 */
export const ListSourceNetworksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceNetworksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceNetworks(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceNetworksApi - factory interface
 * @export
 */
export const ListSourceNetworksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceNetworksApiFp(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworksCollection> {
            return localVarFp.listSourceNetworks(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceNetworksApi - object-oriented interface
 * @export
 * @class ListSourceNetworksApi
 * @extends {BaseAPI}
 */
export class ListSourceNetworksApi extends BaseAPI {
    /**
     * Returns an array of Network objects
     * @summary List Networks for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceNetworksApi
     */
    public listSourceNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceNetworksApiFp(this.configuration).listSourceNetworks(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceOrchestrationStacksApi - axios parameter creator
 * @export
 */
export const ListSourceOrchestrationStacksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceOrchestrationStacks: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceOrchestrationStacks', 'id', id)
            const localVarPath = `/sources/{id}/orchestration_stacks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceOrchestrationStacksApi - functional programming interface
 * @export
 */
export const ListSourceOrchestrationStacksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceOrchestrationStacksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrchestrationStacksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceOrchestrationStacks(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceOrchestrationStacksApi - factory interface
 * @export
 */
export const ListSourceOrchestrationStacksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceOrchestrationStacksApiFp(configuration)
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<OrchestrationStacksCollection> {
            return localVarFp.listSourceOrchestrationStacks(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceOrchestrationStacksApi - object-oriented interface
 * @export
 * @class ListSourceOrchestrationStacksApi
 * @extends {BaseAPI}
 */
export class ListSourceOrchestrationStacksApi extends BaseAPI {
    /**
     * Returns an array of OrchestrationStack objects
     * @summary List OrchestrationStacks for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceOrchestrationStacksApi
     */
    public listSourceOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceOrchestrationStacksApiFp(this.configuration).listSourceOrchestrationStacks(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionIpaddressesApi - axios parameter creator
 * @export
 */
export const ListSourceRegionIpaddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionIpaddresses: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionIpaddresses', 'id', id)
            const localVarPath = `/source_regions/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionIpaddressesApi - functional programming interface
 * @export
 */
export const ListSourceRegionIpaddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionIpaddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionIpaddresses(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionIpaddressesApi - factory interface
 * @export
 */
export const ListSourceRegionIpaddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionIpaddressesApiFp(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<IpaddressesCollection> {
            return localVarFp.listSourceRegionIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionIpaddressesApi - object-oriented interface
 * @export
 * @class ListSourceRegionIpaddressesApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionIpaddressesApi extends BaseAPI {
    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionIpaddressesApi
     */
    public listSourceRegionIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionIpaddressesApiFp(this.configuration).listSourceRegionIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionNetworkAdaptersApi - axios parameter creator
 * @export
 */
export const ListSourceRegionNetworkAdaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionNetworkAdapters: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionNetworkAdapters', 'id', id)
            const localVarPath = `/source_regions/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionNetworkAdaptersApi - functional programming interface
 * @export
 */
export const ListSourceRegionNetworkAdaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionNetworkAdaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionNetworkAdaptersApi - factory interface
 * @export
 */
export const ListSourceRegionNetworkAdaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionNetworkAdaptersApiFp(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworkAdaptersCollection> {
            return localVarFp.listSourceRegionNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionNetworkAdaptersApi - object-oriented interface
 * @export
 * @class ListSourceRegionNetworkAdaptersApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionNetworkAdaptersApi extends BaseAPI {
    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionNetworkAdaptersApi
     */
    public listSourceRegionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionNetworkAdaptersApiFp(this.configuration).listSourceRegionNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionNetworksApi - axios parameter creator
 * @export
 */
export const ListSourceRegionNetworksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionNetworks: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionNetworks', 'id', id)
            const localVarPath = `/source_regions/{id}/networks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionNetworksApi - functional programming interface
 * @export
 */
export const ListSourceRegionNetworksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionNetworksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionNetworks(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionNetworksApi - factory interface
 * @export
 */
export const ListSourceRegionNetworksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionNetworksApiFp(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworksCollection> {
            return localVarFp.listSourceRegionNetworks(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionNetworksApi - object-oriented interface
 * @export
 * @class ListSourceRegionNetworksApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionNetworksApi extends BaseAPI {
    /**
     * Returns an array of Network objects
     * @summary List Networks for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionNetworksApi
     */
    public listSourceRegionNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionNetworksApiFp(this.configuration).listSourceRegionNetworks(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionOrchestrationStacksApi - axios parameter creator
 * @export
 */
export const ListSourceRegionOrchestrationStacksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionOrchestrationStacks: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionOrchestrationStacks', 'id', id)
            const localVarPath = `/source_regions/{id}/orchestration_stacks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionOrchestrationStacksApi - functional programming interface
 * @export
 */
export const ListSourceRegionOrchestrationStacksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionOrchestrationStacksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrchestrationStacksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionOrchestrationStacks(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionOrchestrationStacksApi - factory interface
 * @export
 */
export const ListSourceRegionOrchestrationStacksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionOrchestrationStacksApiFp(configuration)
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<OrchestrationStacksCollection> {
            return localVarFp.listSourceRegionOrchestrationStacks(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionOrchestrationStacksApi - object-oriented interface
 * @export
 * @class ListSourceRegionOrchestrationStacksApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionOrchestrationStacksApi extends BaseAPI {
    /**
     * Returns an array of OrchestrationStack objects
     * @summary List OrchestrationStacks for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionOrchestrationStacksApi
     */
    public listSourceRegionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionOrchestrationStacksApiFp(this.configuration).listSourceRegionOrchestrationStacks(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionSecurityGroupsApi - axios parameter creator
 * @export
 */
export const ListSourceRegionSecurityGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionSecurityGroups: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionSecurityGroups', 'id', id)
            const localVarPath = `/source_regions/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionSecurityGroupsApi - functional programming interface
 * @export
 */
export const ListSourceRegionSecurityGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionSecurityGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionSecurityGroups(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionSecurityGroupsApi - factory interface
 * @export
 */
export const ListSourceRegionSecurityGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionSecurityGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SecurityGroupsCollection> {
            return localVarFp.listSourceRegionSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionSecurityGroupsApi - object-oriented interface
 * @export
 * @class ListSourceRegionSecurityGroupsApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionSecurityGroupsApi extends BaseAPI {
    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionSecurityGroupsApi
     */
    public listSourceRegionSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionSecurityGroupsApiFp(this.configuration).listSourceRegionSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionServiceInstancesApi - axios parameter creator
 * @export
 */
export const ListSourceRegionServiceInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServiceInstances: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionServiceInstances', 'id', id)
            const localVarPath = `/source_regions/{id}/service_instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionServiceInstancesApi - functional programming interface
 * @export
 */
export const ListSourceRegionServiceInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionServiceInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionServiceInstances(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionServiceInstancesApi - factory interface
 * @export
 */
export const ListSourceRegionServiceInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionServiceInstancesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInstancesCollection> {
            return localVarFp.listSourceRegionServiceInstances(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionServiceInstancesApi - object-oriented interface
 * @export
 * @class ListSourceRegionServiceInstancesApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionServiceInstancesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionServiceInstancesApi
     */
    public listSourceRegionServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionServiceInstancesApiFp(this.configuration).listSourceRegionServiceInstances(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionServiceOfferingsApi - axios parameter creator
 * @export
 */
export const ListSourceRegionServiceOfferingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServiceOfferings: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionServiceOfferings', 'id', id)
            const localVarPath = `/source_regions/{id}/service_offerings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionServiceOfferingsApi - functional programming interface
 * @export
 */
export const ListSourceRegionServiceOfferingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionServiceOfferingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionServiceOfferings(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionServiceOfferingsApi - factory interface
 * @export
 */
export const ListSourceRegionServiceOfferingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionServiceOfferingsApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceOfferingsCollection> {
            return localVarFp.listSourceRegionServiceOfferings(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionServiceOfferingsApi - object-oriented interface
 * @export
 * @class ListSourceRegionServiceOfferingsApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionServiceOfferingsApi extends BaseAPI {
    /**
     * Returns an array of ServiceOffering objects
     * @summary List ServiceOfferings for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionServiceOfferingsApi
     */
    public listSourceRegionServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionServiceOfferingsApiFp(this.configuration).listSourceRegionServiceOfferings(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionServicePlansApi - axios parameter creator
 * @export
 */
export const ListSourceRegionServicePlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServicePlans: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionServicePlans', 'id', id)
            const localVarPath = `/source_regions/{id}/service_plans`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionServicePlansApi - functional programming interface
 * @export
 */
export const ListSourceRegionServicePlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionServicePlansApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlansCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionServicePlans(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionServicePlansApi - factory interface
 * @export
 */
export const ListSourceRegionServicePlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionServicePlansApiFp(configuration)
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServicePlansCollection> {
            return localVarFp.listSourceRegionServicePlans(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionServicePlansApi - object-oriented interface
 * @export
 * @class ListSourceRegionServicePlansApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionServicePlansApi extends BaseAPI {
    /**
     * Returns an array of ServicePlan objects
     * @summary List ServicePlans for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionServicePlansApi
     */
    public listSourceRegionServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionServicePlansApiFp(this.configuration).listSourceRegionServicePlans(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionSubnetsApi - axios parameter creator
 * @export
 */
export const ListSourceRegionSubnetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionSubnets: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionSubnets', 'id', id)
            const localVarPath = `/source_regions/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionSubnetsApi - functional programming interface
 * @export
 */
export const ListSourceRegionSubnetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionSubnetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionSubnets(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionSubnetsApi - factory interface
 * @export
 */
export const ListSourceRegionSubnetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionSubnetsApiFp(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SubnetsCollection> {
            return localVarFp.listSourceRegionSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionSubnetsApi - object-oriented interface
 * @export
 * @class ListSourceRegionSubnetsApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionSubnetsApi extends BaseAPI {
    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionSubnetsApi
     */
    public listSourceRegionSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionSubnetsApiFp(this.configuration).listSourceRegionSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionVmsApi - axios parameter creator
 * @export
 */
export const ListSourceRegionVmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionVms: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionVms', 'id', id)
            const localVarPath = `/source_regions/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionVmsApi - functional programming interface
 * @export
 */
export const ListSourceRegionVmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionVmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionVms(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionVmsApi - factory interface
 * @export
 */
export const ListSourceRegionVmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionVmsApiFp(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VmsCollection> {
            return localVarFp.listSourceRegionVms(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionVmsApi - object-oriented interface
 * @export
 * @class ListSourceRegionVmsApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionVmsApi extends BaseAPI {
    /**
     * Returns an array of Vm objects
     * @summary List Vms for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionVmsApi
     */
    public listSourceRegionVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionVmsApiFp(this.configuration).listSourceRegionVms(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionVolumesApi - axios parameter creator
 * @export
 */
export const ListSourceRegionVolumesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionVolumes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceRegionVolumes', 'id', id)
            const localVarPath = `/source_regions/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionVolumesApi - functional programming interface
 * @export
 */
export const ListSourceRegionVolumesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionVolumesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegionVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegionVolumes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionVolumesApi - factory interface
 * @export
 */
export const ListSourceRegionVolumesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionVolumesApiFp(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for SourceRegion
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegionVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumesCollection> {
            return localVarFp.listSourceRegionVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionVolumesApi - object-oriented interface
 * @export
 * @class ListSourceRegionVolumesApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionVolumesApi extends BaseAPI {
    /**
     * Returns an array of Volume objects
     * @summary List Volumes for SourceRegion
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionVolumesApi
     */
    public listSourceRegionVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionVolumesApiFp(this.configuration).listSourceRegionVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceRegionsApi - axios parameter creator
 * @export
 */
export const ListSourceRegionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegions: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/source_regions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceRegionsApi - functional programming interface
 * @export
 */
export const ListSourceRegionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceRegionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceRegions(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceRegionsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceRegions(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceRegionsApi - factory interface
 * @export
 */
export const ListSourceRegionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceRegionsApiFp(configuration)
    return {
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceRegions(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SourceRegionsCollection> {
            return localVarFp.listSourceRegions(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceRegionsApi - object-oriented interface
 * @export
 * @class ListSourceRegionsApi
 * @extends {BaseAPI}
 */
export class ListSourceRegionsApi extends BaseAPI {
    /**
     * Returns an array of SourceRegion objects
     * @summary List SourceRegions
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceRegionsApi
     */
    public listSourceRegions(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceRegionsApiFp(this.configuration).listSourceRegions(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceSecurityGroupsApi - axios parameter creator
 * @export
 */
export const ListSourceSecurityGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSecurityGroups: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceSecurityGroups', 'id', id)
            const localVarPath = `/sources/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceSecurityGroupsApi - functional programming interface
 * @export
 */
export const ListSourceSecurityGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceSecurityGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceSecurityGroups(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceSecurityGroupsApi - factory interface
 * @export
 */
export const ListSourceSecurityGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceSecurityGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SecurityGroupsCollection> {
            return localVarFp.listSourceSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceSecurityGroupsApi - object-oriented interface
 * @export
 * @class ListSourceSecurityGroupsApi
 * @extends {BaseAPI}
 */
export class ListSourceSecurityGroupsApi extends BaseAPI {
    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceSecurityGroupsApi
     */
    public listSourceSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceSecurityGroupsApiFp(this.configuration).listSourceSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceServiceInstanceNodesApi - axios parameter creator
 * @export
 */
export const ListSourceServiceInstanceNodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInstanceNodes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceServiceInstanceNodes', 'id', id)
            const localVarPath = `/sources/{id}/service_instance_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceServiceInstanceNodesApi - functional programming interface
 * @export
 */
export const ListSourceServiceInstanceNodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceServiceInstanceNodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstanceNodesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceServiceInstanceNodes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceServiceInstanceNodesApi - factory interface
 * @export
 */
export const ListSourceServiceInstanceNodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceServiceInstanceNodesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInstanceNode objects
         * @summary List ServiceInstanceNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInstanceNodesCollection> {
            return localVarFp.listSourceServiceInstanceNodes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceServiceInstanceNodesApi - object-oriented interface
 * @export
 * @class ListSourceServiceInstanceNodesApi
 * @extends {BaseAPI}
 */
export class ListSourceServiceInstanceNodesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInstanceNode objects
     * @summary List ServiceInstanceNodes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceServiceInstanceNodesApi
     */
    public listSourceServiceInstanceNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceServiceInstanceNodesApiFp(this.configuration).listSourceServiceInstanceNodes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceServiceInstancesApi - axios parameter creator
 * @export
 */
export const ListSourceServiceInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInstances: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceServiceInstances', 'id', id)
            const localVarPath = `/sources/{id}/service_instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceServiceInstancesApi - functional programming interface
 * @export
 */
export const ListSourceServiceInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceServiceInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceServiceInstances(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceServiceInstancesApi - factory interface
 * @export
 */
export const ListSourceServiceInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceServiceInstancesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInstancesCollection> {
            return localVarFp.listSourceServiceInstances(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceServiceInstancesApi - object-oriented interface
 * @export
 * @class ListSourceServiceInstancesApi
 * @extends {BaseAPI}
 */
export class ListSourceServiceInstancesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceServiceInstancesApi
     */
    public listSourceServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceServiceInstancesApiFp(this.configuration).listSourceServiceInstances(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceServiceInventoriesApi - axios parameter creator
 * @export
 */
export const ListSourceServiceInventoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInventories: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceServiceInventories', 'id', id)
            const localVarPath = `/sources/{id}/service_inventories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceServiceInventoriesApi - functional programming interface
 * @export
 */
export const ListSourceServiceInventoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceServiceInventoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceServiceInventories(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInventoriesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceServiceInventories(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceServiceInventoriesApi - factory interface
 * @export
 */
export const ListSourceServiceInventoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceServiceInventoriesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceInventories(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInventoriesCollection> {
            return localVarFp.listSourceServiceInventories(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceServiceInventoriesApi - object-oriented interface
 * @export
 * @class ListSourceServiceInventoriesApi
 * @extends {BaseAPI}
 */
export class ListSourceServiceInventoriesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInventory objects
     * @summary List ServiceInventories for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceServiceInventoriesApi
     */
    public listSourceServiceInventories(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceServiceInventoriesApiFp(this.configuration).listSourceServiceInventories(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceServiceOfferingNodesApi - axios parameter creator
 * @export
 */
export const ListSourceServiceOfferingNodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceOfferingNodes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceServiceOfferingNodes', 'id', id)
            const localVarPath = `/sources/{id}/service_offering_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceServiceOfferingNodesApi - functional programming interface
 * @export
 */
export const ListSourceServiceOfferingNodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceServiceOfferingNodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingNodesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceServiceOfferingNodes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceServiceOfferingNodesApi - factory interface
 * @export
 */
export const ListSourceServiceOfferingNodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceServiceOfferingNodesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceOfferingNode objects
         * @summary List ServiceOfferingNodes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceOfferingNodesCollection> {
            return localVarFp.listSourceServiceOfferingNodes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceServiceOfferingNodesApi - object-oriented interface
 * @export
 * @class ListSourceServiceOfferingNodesApi
 * @extends {BaseAPI}
 */
export class ListSourceServiceOfferingNodesApi extends BaseAPI {
    /**
     * Returns an array of ServiceOfferingNode objects
     * @summary List ServiceOfferingNodes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceServiceOfferingNodesApi
     */
    public listSourceServiceOfferingNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceServiceOfferingNodesApiFp(this.configuration).listSourceServiceOfferingNodes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceServiceOfferingsApi - axios parameter creator
 * @export
 */
export const ListSourceServiceOfferingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceOfferings: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceServiceOfferings', 'id', id)
            const localVarPath = `/sources/{id}/service_offerings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceServiceOfferingsApi - functional programming interface
 * @export
 */
export const ListSourceServiceOfferingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceServiceOfferingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceServiceOfferings(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceServiceOfferingsApi - factory interface
 * @export
 */
export const ListSourceServiceOfferingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceServiceOfferingsApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceOfferingsCollection> {
            return localVarFp.listSourceServiceOfferings(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceServiceOfferingsApi - object-oriented interface
 * @export
 * @class ListSourceServiceOfferingsApi
 * @extends {BaseAPI}
 */
export class ListSourceServiceOfferingsApi extends BaseAPI {
    /**
     * Returns an array of ServiceOffering objects
     * @summary List ServiceOfferings for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceServiceOfferingsApi
     */
    public listSourceServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceServiceOfferingsApiFp(this.configuration).listSourceServiceOfferings(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceServicePlansApi - axios parameter creator
 * @export
 */
export const ListSourceServicePlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServicePlans: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceServicePlans', 'id', id)
            const localVarPath = `/sources/{id}/service_plans`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceServicePlansApi - functional programming interface
 * @export
 */
export const ListSourceServicePlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceServicePlansApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlansCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceServicePlans(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceServicePlansApi - factory interface
 * @export
 */
export const ListSourceServicePlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceServicePlansApiFp(configuration)
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServicePlansCollection> {
            return localVarFp.listSourceServicePlans(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceServicePlansApi - object-oriented interface
 * @export
 * @class ListSourceServicePlansApi
 * @extends {BaseAPI}
 */
export class ListSourceServicePlansApi extends BaseAPI {
    /**
     * Returns an array of ServicePlan objects
     * @summary List ServicePlans for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceServicePlansApi
     */
    public listSourceServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceServicePlansApiFp(this.configuration).listSourceServicePlans(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceSourceRegionsApi - axios parameter creator
 * @export
 */
export const ListSourceSourceRegionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSourceRegions: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceSourceRegions', 'id', id)
            const localVarPath = `/sources/{id}/source_regions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceSourceRegionsApi - functional programming interface
 * @export
 */
export const ListSourceSourceRegionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceSourceRegionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceSourceRegions(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceRegionsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceSourceRegions(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceSourceRegionsApi - factory interface
 * @export
 */
export const ListSourceSourceRegionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceSourceRegionsApiFp(configuration)
    return {
        /**
         * Returns an array of SourceRegion objects
         * @summary List SourceRegions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSourceRegions(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SourceRegionsCollection> {
            return localVarFp.listSourceSourceRegions(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceSourceRegionsApi - object-oriented interface
 * @export
 * @class ListSourceSourceRegionsApi
 * @extends {BaseAPI}
 */
export class ListSourceSourceRegionsApi extends BaseAPI {
    /**
     * Returns an array of SourceRegion objects
     * @summary List SourceRegions for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceSourceRegionsApi
     */
    public listSourceSourceRegions(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceSourceRegionsApiFp(this.configuration).listSourceSourceRegions(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceSubnetsApi - axios parameter creator
 * @export
 */
export const ListSourceSubnetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSubnets: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceSubnets', 'id', id)
            const localVarPath = `/sources/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceSubnetsApi - functional programming interface
 * @export
 */
export const ListSourceSubnetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceSubnetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceSubnets(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceSubnetsApi - factory interface
 * @export
 */
export const ListSourceSubnetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceSubnetsApiFp(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SubnetsCollection> {
            return localVarFp.listSourceSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceSubnetsApi - object-oriented interface
 * @export
 * @class ListSourceSubnetsApi
 * @extends {BaseAPI}
 */
export class ListSourceSubnetsApi extends BaseAPI {
    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceSubnetsApi
     */
    public listSourceSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceSubnetsApiFp(this.configuration).listSourceSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceSubscriptionsApi - axios parameter creator
 * @export
 */
export const ListSourceSubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSubscriptions: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceSubscriptions', 'id', id)
            const localVarPath = `/sources/{id}/subscriptions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceSubscriptionsApi - functional programming interface
 * @export
 */
export const ListSourceSubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceSubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceSubscriptions(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceSubscriptions(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceSubscriptionsApi - factory interface
 * @export
 */
export const ListSourceSubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceSubscriptionsApiFp(configuration)
    return {
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceSubscriptions(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SubscriptionsCollection> {
            return localVarFp.listSourceSubscriptions(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceSubscriptionsApi - object-oriented interface
 * @export
 * @class ListSourceSubscriptionsApi
 * @extends {BaseAPI}
 */
export class ListSourceSubscriptionsApi extends BaseAPI {
    /**
     * Returns an array of Subscription objects
     * @summary List Subscriptions for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceSubscriptionsApi
     */
    public listSourceSubscriptions(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceSubscriptionsApiFp(this.configuration).listSourceSubscriptions(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceVmsApi - axios parameter creator
 * @export
 */
export const ListSourceVmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVms: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceVms', 'id', id)
            const localVarPath = `/sources/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceVmsApi - functional programming interface
 * @export
 */
export const ListSourceVmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceVmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceVms(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceVmsApi - factory interface
 * @export
 */
export const ListSourceVmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceVmsApiFp(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VmsCollection> {
            return localVarFp.listSourceVms(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceVmsApi - object-oriented interface
 * @export
 * @class ListSourceVmsApi
 * @extends {BaseAPI}
 */
export class ListSourceVmsApi extends BaseAPI {
    /**
     * Returns an array of Vm objects
     * @summary List Vms for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceVmsApi
     */
    public listSourceVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceVmsApiFp(this.configuration).listSourceVms(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceVolumeTypesApi - axios parameter creator
 * @export
 */
export const ListSourceVolumeTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVolumeTypes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceVolumeTypes', 'id', id)
            const localVarPath = `/sources/{id}/volume_types`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceVolumeTypesApi - functional programming interface
 * @export
 */
export const ListSourceVolumeTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceVolumeTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceVolumeTypes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeTypesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceVolumeTypes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceVolumeTypesApi - factory interface
 * @export
 */
export const ListSourceVolumeTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceVolumeTypesApiFp(configuration)
    return {
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVolumeTypes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumeTypesCollection> {
            return localVarFp.listSourceVolumeTypes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceVolumeTypesApi - object-oriented interface
 * @export
 * @class ListSourceVolumeTypesApi
 * @extends {BaseAPI}
 */
export class ListSourceVolumeTypesApi extends BaseAPI {
    /**
     * Returns an array of VolumeType objects
     * @summary List VolumeTypes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceVolumeTypesApi
     */
    public listSourceVolumeTypes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceVolumeTypesApiFp(this.configuration).listSourceVolumeTypes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourceVolumesApi - axios parameter creator
 * @export
 */
export const ListSourceVolumesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVolumes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSourceVolumes', 'id', id)
            const localVarPath = `/sources/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourceVolumesApi - functional programming interface
 * @export
 */
export const ListSourceVolumesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourceVolumesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSourceVolumes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourceVolumesApi - factory interface
 * @export
 */
export const ListSourceVolumesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourceVolumesApiFp(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumesCollection> {
            return localVarFp.listSourceVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourceVolumesApi - object-oriented interface
 * @export
 * @class ListSourceVolumesApi
 * @extends {BaseAPI}
 */
export class ListSourceVolumesApi extends BaseAPI {
    /**
     * Returns an array of Volume objects
     * @summary List Volumes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourceVolumesApi
     */
    public listSourceVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourceVolumesApiFp(this.configuration).listSourceVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSourcesApi - axios parameter creator
 * @export
 */
export const ListSourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Source objects
         * @summary List Sources
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSourcesApi - functional programming interface
 * @export
 */
export const ListSourcesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSourcesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Source objects
         * @summary List Sources
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSources(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSources(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSourcesApi - factory interface
 * @export
 */
export const ListSourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSourcesApiFp(configuration)
    return {
        /**
         * Returns an array of Source objects
         * @summary List Sources
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SourcesCollection> {
            return localVarFp.listSources(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSourcesApi - object-oriented interface
 * @export
 * @class ListSourcesApi
 * @extends {BaseAPI}
 */
export class ListSourcesApi extends BaseAPI {
    /**
     * Returns an array of Source objects
     * @summary List Sources
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSourcesApi
     */
    public listSources(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSourcesApiFp(this.configuration).listSources(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubnetIpaddressesApi - axios parameter creator
 * @export
 */
export const ListSubnetIpaddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetIpaddresses: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubnetIpaddresses', 'id', id)
            const localVarPath = `/subnets/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubnetIpaddressesApi - functional programming interface
 * @export
 */
export const ListSubnetIpaddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubnetIpaddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubnetIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubnetIpaddresses(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubnetIpaddressesApi - factory interface
 * @export
 */
export const ListSubnetIpaddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubnetIpaddressesApiFp(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<IpaddressesCollection> {
            return localVarFp.listSubnetIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubnetIpaddressesApi - object-oriented interface
 * @export
 * @class ListSubnetIpaddressesApi
 * @extends {BaseAPI}
 */
export class ListSubnetIpaddressesApi extends BaseAPI {
    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for Subnet
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubnetIpaddressesApi
     */
    public listSubnetIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubnetIpaddressesApiFp(this.configuration).listSubnetIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubnetNetworkAdaptersApi - axios parameter creator
 * @export
 */
export const ListSubnetNetworkAdaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetNetworkAdapters: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubnetNetworkAdapters', 'id', id)
            const localVarPath = `/subnets/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubnetNetworkAdaptersApi - functional programming interface
 * @export
 */
export const ListSubnetNetworkAdaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubnetNetworkAdaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubnetNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubnetNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubnetNetworkAdaptersApi - factory interface
 * @export
 */
export const ListSubnetNetworkAdaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubnetNetworkAdaptersApiFp(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworkAdaptersCollection> {
            return localVarFp.listSubnetNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubnetNetworkAdaptersApi - object-oriented interface
 * @export
 * @class ListSubnetNetworkAdaptersApi
 * @extends {BaseAPI}
 */
export class ListSubnetNetworkAdaptersApi extends BaseAPI {
    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for Subnet
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubnetNetworkAdaptersApi
     */
    public listSubnetNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubnetNetworkAdaptersApiFp(this.configuration).listSubnetNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubnetTagsApi - axios parameter creator
 * @export
 */
export const ListSubnetTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubnetTags', 'id', id)
            const localVarPath = `/subnets/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubnetTagsApi - functional programming interface
 * @export
 */
export const ListSubnetTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubnetTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubnetTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubnetTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubnetTagsApi - factory interface
 * @export
 */
export const ListSubnetTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubnetTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Subnet
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnetTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listSubnetTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubnetTagsApi - object-oriented interface
 * @export
 * @class ListSubnetTagsApi
 * @extends {BaseAPI}
 */
export class ListSubnetTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for Subnet
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubnetTagsApi
     */
    public listSubnetTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubnetTagsApiFp(this.configuration).listSubnetTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubnetsApi - axios parameter creator
 * @export
 */
export const ListSubnetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnets: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subnets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubnetsApi - functional programming interface
 * @export
 */
export const ListSubnetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubnetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubnets(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubnets(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubnetsApi - factory interface
 * @export
 */
export const ListSubnetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubnetsApiFp(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubnets(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SubnetsCollection> {
            return localVarFp.listSubnets(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubnetsApi - object-oriented interface
 * @export
 * @class ListSubnetsApi
 * @extends {BaseAPI}
 */
export class ListSubnetsApi extends BaseAPI {
    /**
     * Returns an array of Subnet objects
     * @summary List Subnets
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubnetsApi
     */
    public listSubnets(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubnetsApiFp(this.configuration).listSubnets(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionIpaddressesApi - axios parameter creator
 * @export
 */
export const ListSubscriptionIpaddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionIpaddresses: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionIpaddresses', 'id', id)
            const localVarPath = `/subscriptions/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionIpaddressesApi - functional programming interface
 * @export
 */
export const ListSubscriptionIpaddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionIpaddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionIpaddresses(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionIpaddressesApi - factory interface
 * @export
 */
export const ListSubscriptionIpaddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionIpaddressesApiFp(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<IpaddressesCollection> {
            return localVarFp.listSubscriptionIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionIpaddressesApi - object-oriented interface
 * @export
 * @class ListSubscriptionIpaddressesApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionIpaddressesApi extends BaseAPI {
    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionIpaddressesApi
     */
    public listSubscriptionIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionIpaddressesApiFp(this.configuration).listSubscriptionIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionNetworkAdaptersApi - axios parameter creator
 * @export
 */
export const ListSubscriptionNetworkAdaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionNetworkAdapters: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionNetworkAdapters', 'id', id)
            const localVarPath = `/subscriptions/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionNetworkAdaptersApi - functional programming interface
 * @export
 */
export const ListSubscriptionNetworkAdaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionNetworkAdaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionNetworkAdaptersApi - factory interface
 * @export
 */
export const ListSubscriptionNetworkAdaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionNetworkAdaptersApiFp(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworkAdaptersCollection> {
            return localVarFp.listSubscriptionNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionNetworkAdaptersApi - object-oriented interface
 * @export
 * @class ListSubscriptionNetworkAdaptersApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionNetworkAdaptersApi extends BaseAPI {
    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionNetworkAdaptersApi
     */
    public listSubscriptionNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionNetworkAdaptersApiFp(this.configuration).listSubscriptionNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionNetworksApi - axios parameter creator
 * @export
 */
export const ListSubscriptionNetworksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionNetworks: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionNetworks', 'id', id)
            const localVarPath = `/subscriptions/{id}/networks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionNetworksApi - functional programming interface
 * @export
 */
export const ListSubscriptionNetworksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionNetworksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionNetworks(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionNetworksApi - factory interface
 * @export
 */
export const ListSubscriptionNetworksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionNetworksApiFp(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworksCollection> {
            return localVarFp.listSubscriptionNetworks(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionNetworksApi - object-oriented interface
 * @export
 * @class ListSubscriptionNetworksApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionNetworksApi extends BaseAPI {
    /**
     * Returns an array of Network objects
     * @summary List Networks for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionNetworksApi
     */
    public listSubscriptionNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionNetworksApiFp(this.configuration).listSubscriptionNetworks(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionOrchestrationStacksApi - axios parameter creator
 * @export
 */
export const ListSubscriptionOrchestrationStacksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionOrchestrationStacks: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionOrchestrationStacks', 'id', id)
            const localVarPath = `/subscriptions/{id}/orchestration_stacks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionOrchestrationStacksApi - functional programming interface
 * @export
 */
export const ListSubscriptionOrchestrationStacksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionOrchestrationStacksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrchestrationStacksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionOrchestrationStacks(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionOrchestrationStacksApi - factory interface
 * @export
 */
export const ListSubscriptionOrchestrationStacksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionOrchestrationStacksApiFp(configuration)
    return {
        /**
         * Returns an array of OrchestrationStack objects
         * @summary List OrchestrationStacks for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<OrchestrationStacksCollection> {
            return localVarFp.listSubscriptionOrchestrationStacks(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionOrchestrationStacksApi - object-oriented interface
 * @export
 * @class ListSubscriptionOrchestrationStacksApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionOrchestrationStacksApi extends BaseAPI {
    /**
     * Returns an array of OrchestrationStack objects
     * @summary List OrchestrationStacks for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionOrchestrationStacksApi
     */
    public listSubscriptionOrchestrationStacks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionOrchestrationStacksApiFp(this.configuration).listSubscriptionOrchestrationStacks(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionSecurityGroupsApi - axios parameter creator
 * @export
 */
export const ListSubscriptionSecurityGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionSecurityGroups: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionSecurityGroups', 'id', id)
            const localVarPath = `/subscriptions/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionSecurityGroupsApi - functional programming interface
 * @export
 */
export const ListSubscriptionSecurityGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionSecurityGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionSecurityGroups(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionSecurityGroupsApi - factory interface
 * @export
 */
export const ListSubscriptionSecurityGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionSecurityGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SecurityGroupsCollection> {
            return localVarFp.listSubscriptionSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionSecurityGroupsApi - object-oriented interface
 * @export
 * @class ListSubscriptionSecurityGroupsApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionSecurityGroupsApi extends BaseAPI {
    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionSecurityGroupsApi
     */
    public listSubscriptionSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionSecurityGroupsApiFp(this.configuration).listSubscriptionSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionServiceInstancesApi - axios parameter creator
 * @export
 */
export const ListSubscriptionServiceInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServiceInstances: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionServiceInstances', 'id', id)
            const localVarPath = `/subscriptions/{id}/service_instances`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionServiceInstancesApi - functional programming interface
 * @export
 */
export const ListSubscriptionServiceInstancesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionServiceInstancesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstancesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionServiceInstances(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionServiceInstancesApi - factory interface
 * @export
 */
export const ListSubscriptionServiceInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionServiceInstancesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInstance objects
         * @summary List ServiceInstances for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInstancesCollection> {
            return localVarFp.listSubscriptionServiceInstances(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionServiceInstancesApi - object-oriented interface
 * @export
 * @class ListSubscriptionServiceInstancesApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionServiceInstancesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInstance objects
     * @summary List ServiceInstances for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionServiceInstancesApi
     */
    public listSubscriptionServiceInstances(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionServiceInstancesApiFp(this.configuration).listSubscriptionServiceInstances(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionServiceOfferingsApi - axios parameter creator
 * @export
 */
export const ListSubscriptionServiceOfferingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServiceOfferings: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionServiceOfferings', 'id', id)
            const localVarPath = `/subscriptions/{id}/service_offerings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionServiceOfferingsApi - functional programming interface
 * @export
 */
export const ListSubscriptionServiceOfferingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionServiceOfferingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionServiceOfferings(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionServiceOfferingsApi - factory interface
 * @export
 */
export const ListSubscriptionServiceOfferingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionServiceOfferingsApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceOfferingsCollection> {
            return localVarFp.listSubscriptionServiceOfferings(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionServiceOfferingsApi - object-oriented interface
 * @export
 * @class ListSubscriptionServiceOfferingsApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionServiceOfferingsApi extends BaseAPI {
    /**
     * Returns an array of ServiceOffering objects
     * @summary List ServiceOfferings for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionServiceOfferingsApi
     */
    public listSubscriptionServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionServiceOfferingsApiFp(this.configuration).listSubscriptionServiceOfferings(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionServicePlansApi - axios parameter creator
 * @export
 */
export const ListSubscriptionServicePlansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServicePlans: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionServicePlans', 'id', id)
            const localVarPath = `/subscriptions/{id}/service_plans`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionServicePlansApi - functional programming interface
 * @export
 */
export const ListSubscriptionServicePlansApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionServicePlansApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlansCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionServicePlans(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionServicePlansApi - factory interface
 * @export
 */
export const ListSubscriptionServicePlansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionServicePlansApiFp(configuration)
    return {
        /**
         * Returns an array of ServicePlan objects
         * @summary List ServicePlans for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServicePlansCollection> {
            return localVarFp.listSubscriptionServicePlans(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionServicePlansApi - object-oriented interface
 * @export
 * @class ListSubscriptionServicePlansApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionServicePlansApi extends BaseAPI {
    /**
     * Returns an array of ServicePlan objects
     * @summary List ServicePlans for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionServicePlansApi
     */
    public listSubscriptionServicePlans(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionServicePlansApiFp(this.configuration).listSubscriptionServicePlans(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionSubnetsApi - axios parameter creator
 * @export
 */
export const ListSubscriptionSubnetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionSubnets: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionSubnets', 'id', id)
            const localVarPath = `/subscriptions/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionSubnetsApi - functional programming interface
 * @export
 */
export const ListSubscriptionSubnetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionSubnetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionSubnets(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionSubnetsApi - factory interface
 * @export
 */
export const ListSubscriptionSubnetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionSubnetsApiFp(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SubnetsCollection> {
            return localVarFp.listSubscriptionSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionSubnetsApi - object-oriented interface
 * @export
 * @class ListSubscriptionSubnetsApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionSubnetsApi extends BaseAPI {
    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionSubnetsApi
     */
    public listSubscriptionSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionSubnetsApiFp(this.configuration).listSubscriptionSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionVmsApi - axios parameter creator
 * @export
 */
export const ListSubscriptionVmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionVms: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionVms', 'id', id)
            const localVarPath = `/subscriptions/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionVmsApi - functional programming interface
 * @export
 */
export const ListSubscriptionVmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionVmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionVms(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionVmsApi - factory interface
 * @export
 */
export const ListSubscriptionVmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionVmsApiFp(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VmsCollection> {
            return localVarFp.listSubscriptionVms(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionVmsApi - object-oriented interface
 * @export
 * @class ListSubscriptionVmsApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionVmsApi extends BaseAPI {
    /**
     * Returns an array of Vm objects
     * @summary List Vms for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionVmsApi
     */
    public listSubscriptionVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionVmsApiFp(this.configuration).listSubscriptionVms(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionVolumesApi - axios parameter creator
 * @export
 */
export const ListSubscriptionVolumesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionVolumes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listSubscriptionVolumes', 'id', id)
            const localVarPath = `/subscriptions/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionVolumesApi - functional programming interface
 * @export
 */
export const ListSubscriptionVolumesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionVolumesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptionVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptionVolumes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionVolumesApi - factory interface
 * @export
 */
export const ListSubscriptionVolumesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionVolumesApiFp(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Subscription
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptionVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumesCollection> {
            return localVarFp.listSubscriptionVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionVolumesApi - object-oriented interface
 * @export
 * @class ListSubscriptionVolumesApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionVolumesApi extends BaseAPI {
    /**
     * Returns an array of Volume objects
     * @summary List Volumes for Subscription
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionVolumesApi
     */
    public listSubscriptionVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionVolumesApiFp(this.configuration).listSubscriptionVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListSubscriptionsApi - axios parameter creator
 * @export
 */
export const ListSubscriptionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSubscriptionsApi - functional programming interface
 * @export
 */
export const ListSubscriptionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSubscriptionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptions(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptions(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSubscriptionsApi - factory interface
 * @export
 */
export const ListSubscriptionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSubscriptionsApiFp(configuration)
    return {
        /**
         * Returns an array of Subscription objects
         * @summary List Subscriptions
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SubscriptionsCollection> {
            return localVarFp.listSubscriptions(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSubscriptionsApi - object-oriented interface
 * @export
 * @class ListSubscriptionsApi
 * @extends {BaseAPI}
 */
export class ListSubscriptionsApi extends BaseAPI {
    /**
     * Returns an array of Subscription objects
     * @summary List Subscriptions
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSubscriptionsApi
     */
    public listSubscriptions(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListSubscriptionsApiFp(this.configuration).listSubscriptions(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagContainerGroupsApi - axios parameter creator
 * @export
 */
export const ListTagContainerGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerGroups: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagContainerGroups', 'id', id)
            const localVarPath = `/tags/{id}/container_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagContainerGroupsApi - functional programming interface
 * @export
 */
export const ListTagContainerGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagContainerGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagContainerGroups(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagContainerGroupsApi - factory interface
 * @export
 */
export const ListTagContainerGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagContainerGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerGroup objects
         * @summary List ContainerGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerGroupsCollection> {
            return localVarFp.listTagContainerGroups(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagContainerGroupsApi - object-oriented interface
 * @export
 * @class ListTagContainerGroupsApi
 * @extends {BaseAPI}
 */
export class ListTagContainerGroupsApi extends BaseAPI {
    /**
     * Returns an array of ContainerGroup objects
     * @summary List ContainerGroups for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagContainerGroupsApi
     */
    public listTagContainerGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagContainerGroupsApiFp(this.configuration).listTagContainerGroups(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagContainerImagesApi - axios parameter creator
 * @export
 */
export const ListTagContainerImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerImages: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagContainerImages', 'id', id)
            const localVarPath = `/tags/{id}/container_images`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagContainerImagesApi - functional programming interface
 * @export
 */
export const ListTagContainerImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagContainerImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagContainerImages(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImagesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagContainerImages(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagContainerImagesApi - factory interface
 * @export
 */
export const ListTagContainerImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagContainerImagesApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerImage objects
         * @summary List ContainerImages for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerImages(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerImagesCollection> {
            return localVarFp.listTagContainerImages(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagContainerImagesApi - object-oriented interface
 * @export
 * @class ListTagContainerImagesApi
 * @extends {BaseAPI}
 */
export class ListTagContainerImagesApi extends BaseAPI {
    /**
     * Returns an array of ContainerImage objects
     * @summary List ContainerImages for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagContainerImagesApi
     */
    public listTagContainerImages(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagContainerImagesApiFp(this.configuration).listTagContainerImages(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagContainerNodesApi - axios parameter creator
 * @export
 */
export const ListTagContainerNodesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerNodes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagContainerNodes', 'id', id)
            const localVarPath = `/tags/{id}/container_nodes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagContainerNodesApi - functional programming interface
 * @export
 */
export const ListTagContainerNodesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagContainerNodesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagContainerNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerNodesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagContainerNodes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagContainerNodesApi - factory interface
 * @export
 */
export const ListTagContainerNodesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagContainerNodesApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerNode objects
         * @summary List ContainerNodes for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerNodesCollection> {
            return localVarFp.listTagContainerNodes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagContainerNodesApi - object-oriented interface
 * @export
 * @class ListTagContainerNodesApi
 * @extends {BaseAPI}
 */
export class ListTagContainerNodesApi extends BaseAPI {
    /**
     * Returns an array of ContainerNode objects
     * @summary List ContainerNodes for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagContainerNodesApi
     */
    public listTagContainerNodes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagContainerNodesApiFp(this.configuration).listTagContainerNodes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagContainerProjectsApi - axios parameter creator
 * @export
 */
export const ListTagContainerProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerProjects: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagContainerProjects', 'id', id)
            const localVarPath = `/tags/{id}/container_projects`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagContainerProjectsApi - functional programming interface
 * @export
 */
export const ListTagContainerProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagContainerProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagContainerProjects(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerProjectsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagContainerProjects(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagContainerProjectsApi - factory interface
 * @export
 */
export const ListTagContainerProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagContainerProjectsApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerProject objects
         * @summary List ContainerProjects for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerProjects(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerProjectsCollection> {
            return localVarFp.listTagContainerProjects(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagContainerProjectsApi - object-oriented interface
 * @export
 * @class ListTagContainerProjectsApi
 * @extends {BaseAPI}
 */
export class ListTagContainerProjectsApi extends BaseAPI {
    /**
     * Returns an array of ContainerProject objects
     * @summary List ContainerProjects for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagContainerProjectsApi
     */
    public listTagContainerProjects(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagContainerProjectsApiFp(this.configuration).listTagContainerProjects(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagContainerTemplatesApi - axios parameter creator
 * @export
 */
export const ListTagContainerTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerTemplates: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagContainerTemplates', 'id', id)
            const localVarPath = `/tags/{id}/container_templates`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagContainerTemplatesApi - functional programming interface
 * @export
 */
export const ListTagContainerTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagContainerTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagContainerTemplates(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTemplatesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagContainerTemplates(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagContainerTemplatesApi - factory interface
 * @export
 */
export const ListTagContainerTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagContainerTemplatesApiFp(configuration)
    return {
        /**
         * Returns an array of ContainerTemplate objects
         * @summary List ContainerTemplates for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagContainerTemplates(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ContainerTemplatesCollection> {
            return localVarFp.listTagContainerTemplates(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagContainerTemplatesApi - object-oriented interface
 * @export
 * @class ListTagContainerTemplatesApi
 * @extends {BaseAPI}
 */
export class ListTagContainerTemplatesApi extends BaseAPI {
    /**
     * Returns an array of ContainerTemplate objects
     * @summary List ContainerTemplates for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagContainerTemplatesApi
     */
    public listTagContainerTemplates(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagContainerTemplatesApiFp(this.configuration).listTagContainerTemplates(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagIpaddressesApi - axios parameter creator
 * @export
 */
export const ListTagIpaddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagIpaddresses: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagIpaddresses', 'id', id)
            const localVarPath = `/tags/{id}/ipaddresses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagIpaddressesApi - functional programming interface
 * @export
 */
export const ListTagIpaddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagIpaddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IpaddressesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagIpaddresses(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagIpaddressesApi - factory interface
 * @export
 */
export const ListTagIpaddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagIpaddressesApiFp(configuration)
    return {
        /**
         * Returns an array of Ipaddress objects
         * @summary List Ipaddresses for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<IpaddressesCollection> {
            return localVarFp.listTagIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagIpaddressesApi - object-oriented interface
 * @export
 * @class ListTagIpaddressesApi
 * @extends {BaseAPI}
 */
export class ListTagIpaddressesApi extends BaseAPI {
    /**
     * Returns an array of Ipaddress objects
     * @summary List Ipaddresses for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagIpaddressesApi
     */
    public listTagIpaddresses(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagIpaddressesApiFp(this.configuration).listTagIpaddresses(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagNetworkAdaptersApi - axios parameter creator
 * @export
 */
export const ListTagNetworkAdaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagNetworkAdapters: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagNetworkAdapters', 'id', id)
            const localVarPath = `/tags/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagNetworkAdaptersApi - functional programming interface
 * @export
 */
export const ListTagNetworkAdaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagNetworkAdaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagNetworkAdaptersApi - factory interface
 * @export
 */
export const ListTagNetworkAdaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagNetworkAdaptersApiFp(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworkAdaptersCollection> {
            return localVarFp.listTagNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagNetworkAdaptersApi - object-oriented interface
 * @export
 * @class ListTagNetworkAdaptersApi
 * @extends {BaseAPI}
 */
export class ListTagNetworkAdaptersApi extends BaseAPI {
    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagNetworkAdaptersApi
     */
    public listTagNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagNetworkAdaptersApiFp(this.configuration).listTagNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagNetworksApi - axios parameter creator
 * @export
 */
export const ListTagNetworksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagNetworks: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagNetworks', 'id', id)
            const localVarPath = `/tags/{id}/networks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagNetworksApi - functional programming interface
 * @export
 */
export const ListTagNetworksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagNetworksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagNetworks(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagNetworksApi - factory interface
 * @export
 */
export const ListTagNetworksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagNetworksApiFp(configuration)
    return {
        /**
         * Returns an array of Network objects
         * @summary List Networks for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworksCollection> {
            return localVarFp.listTagNetworks(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagNetworksApi - object-oriented interface
 * @export
 * @class ListTagNetworksApi
 * @extends {BaseAPI}
 */
export class ListTagNetworksApi extends BaseAPI {
    /**
     * Returns an array of Network objects
     * @summary List Networks for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagNetworksApi
     */
    public listTagNetworks(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagNetworksApiFp(this.configuration).listTagNetworks(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagSecurityGroupsApi - axios parameter creator
 * @export
 */
export const ListTagSecurityGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagSecurityGroups: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagSecurityGroups', 'id', id)
            const localVarPath = `/tags/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagSecurityGroupsApi - functional programming interface
 * @export
 */
export const ListTagSecurityGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagSecurityGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagSecurityGroups(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagSecurityGroupsApi - factory interface
 * @export
 */
export const ListTagSecurityGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagSecurityGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SecurityGroupsCollection> {
            return localVarFp.listTagSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagSecurityGroupsApi - object-oriented interface
 * @export
 * @class ListTagSecurityGroupsApi
 * @extends {BaseAPI}
 */
export class ListTagSecurityGroupsApi extends BaseAPI {
    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagSecurityGroupsApi
     */
    public listTagSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagSecurityGroupsApiFp(this.configuration).listTagSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagServiceInventoriesApi - axios parameter creator
 * @export
 */
export const ListTagServiceInventoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagServiceInventories: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagServiceInventories', 'id', id)
            const localVarPath = `/tags/{id}/service_inventories`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagServiceInventoriesApi - functional programming interface
 * @export
 */
export const ListTagServiceInventoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagServiceInventoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagServiceInventories(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInventoriesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagServiceInventories(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagServiceInventoriesApi - factory interface
 * @export
 */
export const ListTagServiceInventoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagServiceInventoriesApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceInventory objects
         * @summary List ServiceInventories for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagServiceInventories(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceInventoriesCollection> {
            return localVarFp.listTagServiceInventories(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagServiceInventoriesApi - object-oriented interface
 * @export
 * @class ListTagServiceInventoriesApi
 * @extends {BaseAPI}
 */
export class ListTagServiceInventoriesApi extends BaseAPI {
    /**
     * Returns an array of ServiceInventory objects
     * @summary List ServiceInventories for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagServiceInventoriesApi
     */
    public listTagServiceInventories(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagServiceInventoriesApiFp(this.configuration).listTagServiceInventories(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagServiceOfferingsApi - axios parameter creator
 * @export
 */
export const ListTagServiceOfferingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagServiceOfferings: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagServiceOfferings', 'id', id)
            const localVarPath = `/tags/{id}/service_offerings`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagServiceOfferingsApi - functional programming interface
 * @export
 */
export const ListTagServiceOfferingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagServiceOfferingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagServiceOfferings(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagServiceOfferingsApi - factory interface
 * @export
 */
export const ListTagServiceOfferingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagServiceOfferingsApiFp(configuration)
    return {
        /**
         * Returns an array of ServiceOffering objects
         * @summary List ServiceOfferings for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<ServiceOfferingsCollection> {
            return localVarFp.listTagServiceOfferings(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagServiceOfferingsApi - object-oriented interface
 * @export
 * @class ListTagServiceOfferingsApi
 * @extends {BaseAPI}
 */
export class ListTagServiceOfferingsApi extends BaseAPI {
    /**
     * Returns an array of ServiceOffering objects
     * @summary List ServiceOfferings for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagServiceOfferingsApi
     */
    public listTagServiceOfferings(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagServiceOfferingsApiFp(this.configuration).listTagServiceOfferings(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagSubnetsApi - axios parameter creator
 * @export
 */
export const ListTagSubnetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagSubnets: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagSubnets', 'id', id)
            const localVarPath = `/tags/{id}/subnets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagSubnetsApi - functional programming interface
 * @export
 */
export const ListTagSubnetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagSubnetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubnetsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagSubnets(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagSubnetsApi - factory interface
 * @export
 */
export const ListTagSubnetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagSubnetsApiFp(configuration)
    return {
        /**
         * Returns an array of Subnet objects
         * @summary List Subnets for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SubnetsCollection> {
            return localVarFp.listTagSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagSubnetsApi - object-oriented interface
 * @export
 * @class ListTagSubnetsApi
 * @extends {BaseAPI}
 */
export class ListTagSubnetsApi extends BaseAPI {
    /**
     * Returns an array of Subnet objects
     * @summary List Subnets for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagSubnetsApi
     */
    public listTagSubnets(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagSubnetsApiFp(this.configuration).listTagSubnets(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagVmsApi - axios parameter creator
 * @export
 */
export const ListTagVmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagVms: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listTagVms', 'id', id)
            const localVarPath = `/tags/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagVmsApi - functional programming interface
 * @export
 */
export const ListTagVmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagVmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagVms(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagVmsApi - factory interface
 * @export
 */
export const ListTagVmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagVmsApiFp(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Tag
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VmsCollection> {
            return localVarFp.listTagVms(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagVmsApi - object-oriented interface
 * @export
 * @class ListTagVmsApi
 * @extends {BaseAPI}
 */
export class ListTagVmsApi extends BaseAPI {
    /**
     * Returns an array of Vm objects
     * @summary List Vms for Tag
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagVmsApi
     */
    public listTagVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagVmsApiFp(this.configuration).listTagVms(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTagsApi - axios parameter creator
 * @export
 */
export const ListTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTagsApi - functional programming interface
 * @export
 */
export const ListTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTags(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTags(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTagsApi - factory interface
 * @export
 */
export const ListTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listTags(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTagsApi - object-oriented interface
 * @export
 * @class ListTagsApi
 * @extends {BaseAPI}
 */
export class ListTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTagsApi
     */
    public listTags(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTagsApiFp(this.configuration).listTags(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListTasksApi - axios parameter creator
 * @export
 */
export const ListTasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Task objects
         * @summary List Tasks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListTasksApi - functional programming interface
 * @export
 */
export const ListTasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListTasksApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Task objects
         * @summary List Tasks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTasks(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TasksCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTasks(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListTasksApi - factory interface
 * @export
 */
export const ListTasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListTasksApiFp(configuration)
    return {
        /**
         * Returns an array of Task objects
         * @summary List Tasks
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TasksCollection> {
            return localVarFp.listTasks(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListTasksApi - object-oriented interface
 * @export
 * @class ListTasksApi
 * @extends {BaseAPI}
 */
export class ListTasksApi extends BaseAPI {
    /**
     * Returns an array of Task objects
     * @summary List Tasks
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListTasksApi
     */
    public listTasks(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListTasksApiFp(this.configuration).listTasks(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVmNetworkAdaptersApi - axios parameter creator
 * @export
 */
export const ListVmNetworkAdaptersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmNetworkAdapters: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVmNetworkAdapters', 'id', id)
            const localVarPath = `/vms/{id}/network_adapters`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVmNetworkAdaptersApi - functional programming interface
 * @export
 */
export const ListVmNetworkAdaptersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVmNetworkAdaptersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVmNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdaptersCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVmNetworkAdapters(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVmNetworkAdaptersApi - factory interface
 * @export
 */
export const ListVmNetworkAdaptersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVmNetworkAdaptersApiFp(configuration)
    return {
        /**
         * Returns an array of NetworkAdapter objects
         * @summary List NetworkAdapters for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<NetworkAdaptersCollection> {
            return localVarFp.listVmNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVmNetworkAdaptersApi - object-oriented interface
 * @export
 * @class ListVmNetworkAdaptersApi
 * @extends {BaseAPI}
 */
export class ListVmNetworkAdaptersApi extends BaseAPI {
    /**
     * Returns an array of NetworkAdapter objects
     * @summary List NetworkAdapters for Vm
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVmNetworkAdaptersApi
     */
    public listVmNetworkAdapters(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVmNetworkAdaptersApiFp(this.configuration).listVmNetworkAdapters(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVmSecurityGroupsApi - axios parameter creator
 * @export
 */
export const ListVmSecurityGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmSecurityGroups: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVmSecurityGroups', 'id', id)
            const localVarPath = `/vms/{id}/security_groups`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVmSecurityGroupsApi - functional programming interface
 * @export
 */
export const ListVmSecurityGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVmSecurityGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVmSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroupsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVmSecurityGroups(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVmSecurityGroupsApi - factory interface
 * @export
 */
export const ListVmSecurityGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVmSecurityGroupsApiFp(configuration)
    return {
        /**
         * Returns an array of SecurityGroup objects
         * @summary List SecurityGroups for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<SecurityGroupsCollection> {
            return localVarFp.listVmSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVmSecurityGroupsApi - object-oriented interface
 * @export
 * @class ListVmSecurityGroupsApi
 * @extends {BaseAPI}
 */
export class ListVmSecurityGroupsApi extends BaseAPI {
    /**
     * Returns an array of SecurityGroup objects
     * @summary List SecurityGroups for Vm
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVmSecurityGroupsApi
     */
    public listVmSecurityGroups(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVmSecurityGroupsApiFp(this.configuration).listVmSecurityGroups(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVmTagsApi - axios parameter creator
 * @export
 */
export const ListVmTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmTags: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVmTags', 'id', id)
            const localVarPath = `/vms/{id}/tags`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVmTagsApi - functional programming interface
 * @export
 */
export const ListVmTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVmTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVmTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVmTags(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVmTagsApi - factory interface
 * @export
 */
export const ListVmTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVmTagsApiFp(configuration)
    return {
        /**
         * Returns an array of Tag objects
         * @summary List Tags for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<TagsCollection> {
            return localVarFp.listVmTags(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVmTagsApi - object-oriented interface
 * @export
 * @class ListVmTagsApi
 * @extends {BaseAPI}
 */
export class ListVmTagsApi extends BaseAPI {
    /**
     * Returns an array of Tag objects
     * @summary List Tags for Vm
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVmTagsApi
     */
    public listVmTags(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVmTagsApiFp(this.configuration).listVmTags(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVmVolumeAttachmentsApi - axios parameter creator
 * @export
 */
export const ListVmVolumeAttachmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmVolumeAttachments: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVmVolumeAttachments', 'id', id)
            const localVarPath = `/vms/{id}/volume_attachments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVmVolumeAttachmentsApi - functional programming interface
 * @export
 */
export const ListVmVolumeAttachmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVmVolumeAttachmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVmVolumeAttachments(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeAttachmentsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVmVolumeAttachments(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVmVolumeAttachmentsApi - factory interface
 * @export
 */
export const ListVmVolumeAttachmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVmVolumeAttachmentsApiFp(configuration)
    return {
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmVolumeAttachments(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumeAttachmentsCollection> {
            return localVarFp.listVmVolumeAttachments(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVmVolumeAttachmentsApi - object-oriented interface
 * @export
 * @class ListVmVolumeAttachmentsApi
 * @extends {BaseAPI}
 */
export class ListVmVolumeAttachmentsApi extends BaseAPI {
    /**
     * Returns an array of VolumeAttachment objects
     * @summary List VolumeAttachments for Vm
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVmVolumeAttachmentsApi
     */
    public listVmVolumeAttachments(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVmVolumeAttachmentsApiFp(this.configuration).listVmVolumeAttachments(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVmVolumesApi - axios parameter creator
 * @export
 */
export const ListVmVolumesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmVolumes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVmVolumes', 'id', id)
            const localVarPath = `/vms/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVmVolumesApi - functional programming interface
 * @export
 */
export const ListVmVolumesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVmVolumesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVmVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVmVolumes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVmVolumesApi - factory interface
 * @export
 */
export const ListVmVolumesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVmVolumesApiFp(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for Vm
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVmVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumesCollection> {
            return localVarFp.listVmVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVmVolumesApi - object-oriented interface
 * @export
 * @class ListVmVolumesApi
 * @extends {BaseAPI}
 */
export class ListVmVolumesApi extends BaseAPI {
    /**
     * Returns an array of Volume objects
     * @summary List Volumes for Vm
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVmVolumesApi
     */
    public listVmVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVmVolumesApiFp(this.configuration).listVmVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVmsApi - axios parameter creator
 * @export
 */
export const ListVmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVms: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/vms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVmsApi - functional programming interface
 * @export
 */
export const ListVmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVms(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVms(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVmsApi - factory interface
 * @export
 */
export const ListVmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVmsApiFp(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVms(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VmsCollection> {
            return localVarFp.listVms(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVmsApi - object-oriented interface
 * @export
 * @class ListVmsApi
 * @extends {BaseAPI}
 */
export class ListVmsApi extends BaseAPI {
    /**
     * Returns an array of Vm objects
     * @summary List Vms
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVmsApi
     */
    public listVms(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVmsApiFp(this.configuration).listVms(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVolumeAttachmentsApi - axios parameter creator
 * @export
 */
export const ListVolumeAttachmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeAttachments: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/volume_attachments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVolumeAttachmentsApi - functional programming interface
 * @export
 */
export const ListVolumeAttachmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVolumeAttachmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVolumeAttachments(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeAttachmentsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVolumeAttachments(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVolumeAttachmentsApi - factory interface
 * @export
 */
export const ListVolumeAttachmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVolumeAttachmentsApiFp(configuration)
    return {
        /**
         * Returns an array of VolumeAttachment objects
         * @summary List VolumeAttachments
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeAttachments(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumeAttachmentsCollection> {
            return localVarFp.listVolumeAttachments(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVolumeAttachmentsApi - object-oriented interface
 * @export
 * @class ListVolumeAttachmentsApi
 * @extends {BaseAPI}
 */
export class ListVolumeAttachmentsApi extends BaseAPI {
    /**
     * Returns an array of VolumeAttachment objects
     * @summary List VolumeAttachments
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVolumeAttachmentsApi
     */
    public listVolumeAttachments(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVolumeAttachmentsApiFp(this.configuration).listVolumeAttachments(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVolumeTypeVolumesApi - axios parameter creator
 * @export
 */
export const ListVolumeTypeVolumesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for VolumeType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypeVolumes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVolumeTypeVolumes', 'id', id)
            const localVarPath = `/volume_types/{id}/volumes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVolumeTypeVolumesApi - functional programming interface
 * @export
 */
export const ListVolumeTypeVolumesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVolumeTypeVolumesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for VolumeType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVolumeTypeVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVolumeTypeVolumes(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVolumeTypeVolumesApi - factory interface
 * @export
 */
export const ListVolumeTypeVolumesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVolumeTypeVolumesApiFp(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes for VolumeType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypeVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumesCollection> {
            return localVarFp.listVolumeTypeVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVolumeTypeVolumesApi - object-oriented interface
 * @export
 * @class ListVolumeTypeVolumesApi
 * @extends {BaseAPI}
 */
export class ListVolumeTypeVolumesApi extends BaseAPI {
    /**
     * Returns an array of Volume objects
     * @summary List Volumes for VolumeType
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVolumeTypeVolumesApi
     */
    public listVolumeTypeVolumes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVolumeTypeVolumesApiFp(this.configuration).listVolumeTypeVolumes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVolumeTypesApi - axios parameter creator
 * @export
 */
export const ListVolumeTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypes: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/volume_types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVolumeTypesApi - functional programming interface
 * @export
 */
export const ListVolumeTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVolumeTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVolumeTypes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeTypesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVolumeTypes(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVolumeTypesApi - factory interface
 * @export
 */
export const ListVolumeTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVolumeTypesApiFp(configuration)
    return {
        /**
         * Returns an array of VolumeType objects
         * @summary List VolumeTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeTypes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumeTypesCollection> {
            return localVarFp.listVolumeTypes(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVolumeTypesApi - object-oriented interface
 * @export
 * @class ListVolumeTypesApi
 * @extends {BaseAPI}
 */
export class ListVolumeTypesApi extends BaseAPI {
    /**
     * Returns an array of VolumeType objects
     * @summary List VolumeTypes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVolumeTypesApi
     */
    public listVolumeTypes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVolumeTypesApiFp(this.configuration).listVolumeTypes(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVolumeVmsApi - axios parameter creator
 * @export
 */
export const ListVolumeVmsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Volume
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeVms: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listVolumeVms', 'id', id)
            const localVarPath = `/volumes/{id}/vms`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVolumeVmsApi - functional programming interface
 * @export
 */
export const ListVolumeVmsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVolumeVmsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Volume
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVolumeVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VmsCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVolumeVms(id, limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVolumeVmsApi - factory interface
 * @export
 */
export const ListVolumeVmsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVolumeVmsApiFp(configuration)
    return {
        /**
         * Returns an array of Vm objects
         * @summary List Vms for Volume
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumeVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VmsCollection> {
            return localVarFp.listVolumeVms(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVolumeVmsApi - object-oriented interface
 * @export
 * @class ListVolumeVmsApi
 * @extends {BaseAPI}
 */
export class ListVolumeVmsApi extends BaseAPI {
    /**
     * Returns an array of Vm objects
     * @summary List Vms for Volume
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVolumeVmsApi
     */
    public listVolumeVms(id: string, limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVolumeVmsApiFp(this.configuration).listVolumeVms(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListVolumesApi - axios parameter creator
 * @export
 */
export const ListVolumesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumes: async (limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/volumes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListVolumesApi - functional programming interface
 * @export
 */
export const ListVolumesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListVolumesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVolumes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumesCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVolumes(limit, offset, filter, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListVolumesApi - factory interface
 * @export
 */
export const ListVolumesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListVolumesApiFp(configuration)
    return {
        /**
         * Returns an array of Volume objects
         * @summary List Volumes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVolumes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: any): AxiosPromise<VolumesCollection> {
            return localVarFp.listVolumes(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListVolumesApi - object-oriented interface
 * @export
 * @class ListVolumesApi
 * @extends {BaseAPI}
 */
export class ListVolumesApi extends BaseAPI {
    /**
     * Returns an array of Volume objects
     * @summary List Volumes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {ListClustersSortByParameter} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListVolumesApi
     */
    public listVolumes(limit?: number, offset?: number, filter?: object, sortBy?: ListClustersSortByParameter, options?: AxiosRequestConfig) {
        return ListVolumesApiFp(this.configuration).listVolumes(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderServiceOfferingApi - axios parameter creator
 * @export
 */
export const OrderServiceOfferingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Task id
         * @summary Order an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {OrderParametersServiceOffering} orderParametersServiceOffering Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderServiceOffering: async (id: string, orderParametersServiceOffering: OrderParametersServiceOffering, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderServiceOffering', 'id', id)
            // verify required parameter 'orderParametersServiceOffering' is not null or undefined
            assertParamExists('orderServiceOffering', 'orderParametersServiceOffering', orderParametersServiceOffering)
            const localVarPath = `/service_offerings/{id}/order`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderParametersServiceOffering, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderServiceOfferingApi - functional programming interface
 * @export
 */
export const OrderServiceOfferingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderServiceOfferingApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Task id
         * @summary Order an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {OrderParametersServiceOffering} orderParametersServiceOffering Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderServiceOffering(id: string, orderParametersServiceOffering: OrderParametersServiceOffering, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppliedInventoriesForServiceOffering200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderServiceOffering(id, orderParametersServiceOffering, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderServiceOfferingApi - factory interface
 * @export
 */
export const OrderServiceOfferingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderServiceOfferingApiFp(configuration)
    return {
        /**
         * Returns a Task id
         * @summary Order an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {OrderParametersServiceOffering} orderParametersServiceOffering Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderServiceOffering(id: string, orderParametersServiceOffering: OrderParametersServiceOffering, options?: any): AxiosPromise<AppliedInventoriesForServiceOffering200Response> {
            return localVarFp.orderServiceOffering(id, orderParametersServiceOffering, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderServiceOfferingApi - object-oriented interface
 * @export
 * @class OrderServiceOfferingApi
 * @extends {BaseAPI}
 */
export class OrderServiceOfferingApi extends BaseAPI {
    /**
     * Returns a Task id
     * @summary Order an existing ServiceOffering
     * @param {string} id ID of the resource
     * @param {OrderParametersServiceOffering} orderParametersServiceOffering Order parameters defining the service and provider control
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServiceOfferingApi
     */
    public orderServiceOffering(id: string, orderParametersServiceOffering: OrderParametersServiceOffering, options?: AxiosRequestConfig) {
        return OrderServiceOfferingApiFp(this.configuration).orderServiceOffering(id, orderParametersServiceOffering, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrderServicePlanApi - axios parameter creator
 * @export
 */
export const OrderServicePlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Task id
         * @summary Order an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {OrderParametersServicePlan} orderParametersServicePlan Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderServicePlan: async (id: string, orderParametersServicePlan: OrderParametersServicePlan, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderServicePlan', 'id', id)
            // verify required parameter 'orderParametersServicePlan' is not null or undefined
            assertParamExists('orderServicePlan', 'orderParametersServicePlan', orderParametersServicePlan)
            const localVarPath = `/service_plans/{id}/order`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(orderParametersServicePlan, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderServicePlanApi - functional programming interface
 * @export
 */
export const OrderServicePlanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderServicePlanApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Task id
         * @summary Order an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {OrderParametersServicePlan} orderParametersServicePlan Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderServicePlan(id: string, orderParametersServicePlan: OrderParametersServicePlan, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppliedInventoriesForServiceOffering200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderServicePlan(id, orderParametersServicePlan, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderServicePlanApi - factory interface
 * @export
 */
export const OrderServicePlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderServicePlanApiFp(configuration)
    return {
        /**
         * Returns a Task id
         * @summary Order an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {OrderParametersServicePlan} orderParametersServicePlan Order parameters defining the service and provider control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderServicePlan(id: string, orderParametersServicePlan: OrderParametersServicePlan, options?: any): AxiosPromise<AppliedInventoriesForServiceOffering200Response> {
            return localVarFp.orderServicePlan(id, orderParametersServicePlan, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrderServicePlanApi - object-oriented interface
 * @export
 * @class OrderServicePlanApi
 * @extends {BaseAPI}
 */
export class OrderServicePlanApi extends BaseAPI {
    /**
     * Returns a Task id
     * @summary Order an existing ServicePlan
     * @param {string} id ID of the resource
     * @param {OrderParametersServicePlan} orderParametersServicePlan Order parameters defining the service and provider control
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderServicePlanApi
     */
    public orderServicePlan(id: string, orderParametersServicePlan: OrderParametersServicePlan, options?: AxiosRequestConfig) {
        return OrderServicePlanApiFp(this.configuration).orderServicePlan(id, orderParametersServicePlan, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PostGraphQLApi - axios parameter creator
 * @export
 */
export const PostGraphQLApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Performs a GraphQL Query
         * @summary Perform a GraphQL Query
         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphQL: async (graphQLRequest: GraphQLRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphQLRequest' is not null or undefined
            assertParamExists('postGraphQL', 'graphQLRequest', graphQLRequest)
            const localVarPath = `/graphql`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(graphQLRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PostGraphQLApi - functional programming interface
 * @export
 */
export const PostGraphQLApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PostGraphQLApiAxiosParamCreator(configuration)
    return {
        /**
         * Performs a GraphQL Query
         * @summary Perform a GraphQL Query
         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGraphQL(graphQLRequest: GraphQLRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphQLResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGraphQL(graphQLRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PostGraphQLApi - factory interface
 * @export
 */
export const PostGraphQLApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PostGraphQLApiFp(configuration)
    return {
        /**
         * Performs a GraphQL Query
         * @summary Perform a GraphQL Query
         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphQL(graphQLRequest: GraphQLRequest, options?: any): AxiosPromise<GraphQLResponse> {
            return localVarFp.postGraphQL(graphQLRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PostGraphQLApi - object-oriented interface
 * @export
 * @class PostGraphQLApi
 * @extends {BaseAPI}
 */
export class PostGraphQLApi extends BaseAPI {
    /**
     * Performs a GraphQL Query
     * @summary Perform a GraphQL Query
     * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostGraphQLApi
     */
    public postGraphQL(graphQLRequest: GraphQLRequest, options?: AxiosRequestConfig) {
        return PostGraphQLApiFp(this.configuration).postGraphQL(graphQLRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowClusterApi - axios parameter creator
 * @export
 */
export const ShowClusterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Cluster object
         * @summary Show an existing Cluster
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showCluster: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showCluster', 'id', id)
            const localVarPath = `/clusters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowClusterApi - functional programming interface
 * @export
 */
export const ShowClusterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowClusterApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Cluster object
         * @summary Show an existing Cluster
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showCluster(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cluster>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showCluster(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowClusterApi - factory interface
 * @export
 */
export const ShowClusterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowClusterApiFp(configuration)
    return {
        /**
         * Returns a Cluster object
         * @summary Show an existing Cluster
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showCluster(id: string, options?: any): AxiosPromise<Cluster> {
            return localVarFp.showCluster(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowClusterApi - object-oriented interface
 * @export
 * @class ShowClusterApi
 * @extends {BaseAPI}
 */
export class ShowClusterApi extends BaseAPI {
    /**
     * Returns a Cluster object
     * @summary Show an existing Cluster
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowClusterApi
     */
    public showCluster(id: string, options?: AxiosRequestConfig) {
        return ShowClusterApiFp(this.configuration).showCluster(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowContainerApi - axios parameter creator
 * @export
 */
export const ShowContainerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Container object
         * @summary Show an existing Container
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainer: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showContainer', 'id', id)
            const localVarPath = `/containers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowContainerApi - functional programming interface
 * @export
 */
export const ShowContainerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowContainerApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Container object
         * @summary Show an existing Container
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showContainer(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Container>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showContainer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowContainerApi - factory interface
 * @export
 */
export const ShowContainerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowContainerApiFp(configuration)
    return {
        /**
         * Returns a Container object
         * @summary Show an existing Container
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainer(id: string, options?: any): AxiosPromise<Container> {
            return localVarFp.showContainer(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowContainerApi - object-oriented interface
 * @export
 * @class ShowContainerApi
 * @extends {BaseAPI}
 */
export class ShowContainerApi extends BaseAPI {
    /**
     * Returns a Container object
     * @summary Show an existing Container
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowContainerApi
     */
    public showContainer(id: string, options?: AxiosRequestConfig) {
        return ShowContainerApiFp(this.configuration).showContainer(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowContainerGroupApi - axios parameter creator
 * @export
 */
export const ShowContainerGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ContainerGroup object
         * @summary Show an existing ContainerGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showContainerGroup', 'id', id)
            const localVarPath = `/container_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowContainerGroupApi - functional programming interface
 * @export
 */
export const ShowContainerGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowContainerGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ContainerGroup object
         * @summary Show an existing ContainerGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showContainerGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showContainerGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowContainerGroupApi - factory interface
 * @export
 */
export const ShowContainerGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowContainerGroupApiFp(configuration)
    return {
        /**
         * Returns a ContainerGroup object
         * @summary Show an existing ContainerGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerGroup(id: string, options?: any): AxiosPromise<ContainerGroup> {
            return localVarFp.showContainerGroup(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowContainerGroupApi - object-oriented interface
 * @export
 * @class ShowContainerGroupApi
 * @extends {BaseAPI}
 */
export class ShowContainerGroupApi extends BaseAPI {
    /**
     * Returns a ContainerGroup object
     * @summary Show an existing ContainerGroup
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowContainerGroupApi
     */
    public showContainerGroup(id: string, options?: AxiosRequestConfig) {
        return ShowContainerGroupApiFp(this.configuration).showContainerGroup(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowContainerImageApi - axios parameter creator
 * @export
 */
export const ShowContainerImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ContainerImage object
         * @summary Show an existing ContainerImage
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerImage: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showContainerImage', 'id', id)
            const localVarPath = `/container_images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowContainerImageApi - functional programming interface
 * @export
 */
export const ShowContainerImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowContainerImageApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ContainerImage object
         * @summary Show an existing ContainerImage
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showContainerImage(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerImage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showContainerImage(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowContainerImageApi - factory interface
 * @export
 */
export const ShowContainerImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowContainerImageApiFp(configuration)
    return {
        /**
         * Returns a ContainerImage object
         * @summary Show an existing ContainerImage
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerImage(id: string, options?: any): AxiosPromise<ContainerImage> {
            return localVarFp.showContainerImage(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowContainerImageApi - object-oriented interface
 * @export
 * @class ShowContainerImageApi
 * @extends {BaseAPI}
 */
export class ShowContainerImageApi extends BaseAPI {
    /**
     * Returns a ContainerImage object
     * @summary Show an existing ContainerImage
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowContainerImageApi
     */
    public showContainerImage(id: string, options?: AxiosRequestConfig) {
        return ShowContainerImageApiFp(this.configuration).showContainerImage(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowContainerNodeApi - axios parameter creator
 * @export
 */
export const ShowContainerNodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ContainerNode object
         * @summary Show an existing ContainerNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerNode: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showContainerNode', 'id', id)
            const localVarPath = `/container_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowContainerNodeApi - functional programming interface
 * @export
 */
export const ShowContainerNodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowContainerNodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ContainerNode object
         * @summary Show an existing ContainerNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showContainerNode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showContainerNode(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowContainerNodeApi - factory interface
 * @export
 */
export const ShowContainerNodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowContainerNodeApiFp(configuration)
    return {
        /**
         * Returns a ContainerNode object
         * @summary Show an existing ContainerNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerNode(id: string, options?: any): AxiosPromise<ContainerNode> {
            return localVarFp.showContainerNode(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowContainerNodeApi - object-oriented interface
 * @export
 * @class ShowContainerNodeApi
 * @extends {BaseAPI}
 */
export class ShowContainerNodeApi extends BaseAPI {
    /**
     * Returns a ContainerNode object
     * @summary Show an existing ContainerNode
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowContainerNodeApi
     */
    public showContainerNode(id: string, options?: AxiosRequestConfig) {
        return ShowContainerNodeApiFp(this.configuration).showContainerNode(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowContainerProjectApi - axios parameter creator
 * @export
 */
export const ShowContainerProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ContainerProject object
         * @summary Show an existing ContainerProject
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showContainerProject', 'id', id)
            const localVarPath = `/container_projects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowContainerProjectApi - functional programming interface
 * @export
 */
export const ShowContainerProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowContainerProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ContainerProject object
         * @summary Show an existing ContainerProject
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showContainerProject(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showContainerProject(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowContainerProjectApi - factory interface
 * @export
 */
export const ShowContainerProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowContainerProjectApiFp(configuration)
    return {
        /**
         * Returns a ContainerProject object
         * @summary Show an existing ContainerProject
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerProject(id: string, options?: any): AxiosPromise<ContainerProject> {
            return localVarFp.showContainerProject(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowContainerProjectApi - object-oriented interface
 * @export
 * @class ShowContainerProjectApi
 * @extends {BaseAPI}
 */
export class ShowContainerProjectApi extends BaseAPI {
    /**
     * Returns a ContainerProject object
     * @summary Show an existing ContainerProject
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowContainerProjectApi
     */
    public showContainerProject(id: string, options?: AxiosRequestConfig) {
        return ShowContainerProjectApiFp(this.configuration).showContainerProject(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowContainerResourceQuotaApi - axios parameter creator
 * @export
 */
export const ShowContainerResourceQuotaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ContainerResourceQuota object
         * @summary Show an existing ContainerResourceQuota
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerResourceQuota: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showContainerResourceQuota', 'id', id)
            const localVarPath = `/container_resource_quotas/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowContainerResourceQuotaApi - functional programming interface
 * @export
 */
export const ShowContainerResourceQuotaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowContainerResourceQuotaApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ContainerResourceQuota object
         * @summary Show an existing ContainerResourceQuota
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showContainerResourceQuota(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerResourceQuota>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showContainerResourceQuota(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowContainerResourceQuotaApi - factory interface
 * @export
 */
export const ShowContainerResourceQuotaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowContainerResourceQuotaApiFp(configuration)
    return {
        /**
         * Returns a ContainerResourceQuota object
         * @summary Show an existing ContainerResourceQuota
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerResourceQuota(id: string, options?: any): AxiosPromise<ContainerResourceQuota> {
            return localVarFp.showContainerResourceQuota(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowContainerResourceQuotaApi - object-oriented interface
 * @export
 * @class ShowContainerResourceQuotaApi
 * @extends {BaseAPI}
 */
export class ShowContainerResourceQuotaApi extends BaseAPI {
    /**
     * Returns a ContainerResourceQuota object
     * @summary Show an existing ContainerResourceQuota
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowContainerResourceQuotaApi
     */
    public showContainerResourceQuota(id: string, options?: AxiosRequestConfig) {
        return ShowContainerResourceQuotaApiFp(this.configuration).showContainerResourceQuota(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowContainerTemplateApi - axios parameter creator
 * @export
 */
export const ShowContainerTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ContainerTemplate object
         * @summary Show an existing ContainerTemplate
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerTemplate: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showContainerTemplate', 'id', id)
            const localVarPath = `/container_templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowContainerTemplateApi - functional programming interface
 * @export
 */
export const ShowContainerTemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowContainerTemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ContainerTemplate object
         * @summary Show an existing ContainerTemplate
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showContainerTemplate(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContainerTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showContainerTemplate(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowContainerTemplateApi - factory interface
 * @export
 */
export const ShowContainerTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowContainerTemplateApiFp(configuration)
    return {
        /**
         * Returns a ContainerTemplate object
         * @summary Show an existing ContainerTemplate
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showContainerTemplate(id: string, options?: any): AxiosPromise<ContainerTemplate> {
            return localVarFp.showContainerTemplate(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowContainerTemplateApi - object-oriented interface
 * @export
 * @class ShowContainerTemplateApi
 * @extends {BaseAPI}
 */
export class ShowContainerTemplateApi extends BaseAPI {
    /**
     * Returns a ContainerTemplate object
     * @summary Show an existing ContainerTemplate
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowContainerTemplateApi
     */
    public showContainerTemplate(id: string, options?: AxiosRequestConfig) {
        return ShowContainerTemplateApiFp(this.configuration).showContainerTemplate(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowDatastoreApi - axios parameter creator
 * @export
 */
export const ShowDatastoreApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Datastore object
         * @summary Show an existing Datastore
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDatastore: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showDatastore', 'id', id)
            const localVarPath = `/datastores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowDatastoreApi - functional programming interface
 * @export
 */
export const ShowDatastoreApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowDatastoreApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Datastore object
         * @summary Show an existing Datastore
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showDatastore(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Datastore>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showDatastore(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowDatastoreApi - factory interface
 * @export
 */
export const ShowDatastoreApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowDatastoreApiFp(configuration)
    return {
        /**
         * Returns a Datastore object
         * @summary Show an existing Datastore
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDatastore(id: string, options?: any): AxiosPromise<Datastore> {
            return localVarFp.showDatastore(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowDatastoreApi - object-oriented interface
 * @export
 * @class ShowDatastoreApi
 * @extends {BaseAPI}
 */
export class ShowDatastoreApi extends BaseAPI {
    /**
     * Returns a Datastore object
     * @summary Show an existing Datastore
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowDatastoreApi
     */
    public showDatastore(id: string, options?: AxiosRequestConfig) {
        return ShowDatastoreApiFp(this.configuration).showDatastore(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowFlavorApi - axios parameter creator
 * @export
 */
export const ShowFlavorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Flavor object
         * @summary Show an existing Flavor
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFlavor: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showFlavor', 'id', id)
            const localVarPath = `/flavors/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowFlavorApi - functional programming interface
 * @export
 */
export const ShowFlavorApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowFlavorApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Flavor object
         * @summary Show an existing Flavor
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showFlavor(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Flavor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showFlavor(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowFlavorApi - factory interface
 * @export
 */
export const ShowFlavorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowFlavorApiFp(configuration)
    return {
        /**
         * Returns a Flavor object
         * @summary Show an existing Flavor
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showFlavor(id: string, options?: any): AxiosPromise<Flavor> {
            return localVarFp.showFlavor(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowFlavorApi - object-oriented interface
 * @export
 * @class ShowFlavorApi
 * @extends {BaseAPI}
 */
export class ShowFlavorApi extends BaseAPI {
    /**
     * Returns a Flavor object
     * @summary Show an existing Flavor
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowFlavorApi
     */
    public showFlavor(id: string, options?: AxiosRequestConfig) {
        return ShowFlavorApiFp(this.configuration).showFlavor(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowHostApi - axios parameter creator
 * @export
 */
export const ShowHostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Host object
         * @summary Show an existing Host
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showHost: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showHost', 'id', id)
            const localVarPath = `/hosts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowHostApi - functional programming interface
 * @export
 */
export const ShowHostApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowHostApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Host object
         * @summary Show an existing Host
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showHost(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Host>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showHost(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowHostApi - factory interface
 * @export
 */
export const ShowHostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowHostApiFp(configuration)
    return {
        /**
         * Returns a Host object
         * @summary Show an existing Host
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showHost(id: string, options?: any): AxiosPromise<Host> {
            return localVarFp.showHost(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowHostApi - object-oriented interface
 * @export
 * @class ShowHostApi
 * @extends {BaseAPI}
 */
export class ShowHostApi extends BaseAPI {
    /**
     * Returns a Host object
     * @summary Show an existing Host
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowHostApi
     */
    public showHost(id: string, options?: AxiosRequestConfig) {
        return ShowHostApiFp(this.configuration).showHost(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowIpaddressApi - axios parameter creator
 * @export
 */
export const ShowIpaddressApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Ipaddress object
         * @summary Show an existing Ipaddress
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showIpaddress: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showIpaddress', 'id', id)
            const localVarPath = `/ipaddresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowIpaddressApi - functional programming interface
 * @export
 */
export const ShowIpaddressApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowIpaddressApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Ipaddress object
         * @summary Show an existing Ipaddress
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showIpaddress(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ipaddress>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showIpaddress(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowIpaddressApi - factory interface
 * @export
 */
export const ShowIpaddressApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowIpaddressApiFp(configuration)
    return {
        /**
         * Returns a Ipaddress object
         * @summary Show an existing Ipaddress
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showIpaddress(id: string, options?: any): AxiosPromise<Ipaddress> {
            return localVarFp.showIpaddress(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowIpaddressApi - object-oriented interface
 * @export
 * @class ShowIpaddressApi
 * @extends {BaseAPI}
 */
export class ShowIpaddressApi extends BaseAPI {
    /**
     * Returns a Ipaddress object
     * @summary Show an existing Ipaddress
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowIpaddressApi
     */
    public showIpaddress(id: string, options?: AxiosRequestConfig) {
        return ShowIpaddressApiFp(this.configuration).showIpaddress(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowNetworkApi - axios parameter creator
 * @export
 */
export const ShowNetworkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Network object
         * @summary Show an existing Network
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNetwork: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showNetwork', 'id', id)
            const localVarPath = `/networks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowNetworkApi - functional programming interface
 * @export
 */
export const ShowNetworkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowNetworkApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Network object
         * @summary Show an existing Network
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showNetwork(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Network>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showNetwork(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowNetworkApi - factory interface
 * @export
 */
export const ShowNetworkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowNetworkApiFp(configuration)
    return {
        /**
         * Returns a Network object
         * @summary Show an existing Network
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNetwork(id: string, options?: any): AxiosPromise<Network> {
            return localVarFp.showNetwork(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowNetworkApi - object-oriented interface
 * @export
 * @class ShowNetworkApi
 * @extends {BaseAPI}
 */
export class ShowNetworkApi extends BaseAPI {
    /**
     * Returns a Network object
     * @summary Show an existing Network
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowNetworkApi
     */
    public showNetwork(id: string, options?: AxiosRequestConfig) {
        return ShowNetworkApiFp(this.configuration).showNetwork(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowNetworkAdapterApi - axios parameter creator
 * @export
 */
export const ShowNetworkAdapterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a NetworkAdapter object
         * @summary Show an existing NetworkAdapter
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNetworkAdapter: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showNetworkAdapter', 'id', id)
            const localVarPath = `/network_adapters/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowNetworkAdapterApi - functional programming interface
 * @export
 */
export const ShowNetworkAdapterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowNetworkAdapterApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a NetworkAdapter object
         * @summary Show an existing NetworkAdapter
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showNetworkAdapter(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdapter>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showNetworkAdapter(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowNetworkAdapterApi - factory interface
 * @export
 */
export const ShowNetworkAdapterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowNetworkAdapterApiFp(configuration)
    return {
        /**
         * Returns a NetworkAdapter object
         * @summary Show an existing NetworkAdapter
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showNetworkAdapter(id: string, options?: any): AxiosPromise<NetworkAdapter> {
            return localVarFp.showNetworkAdapter(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowNetworkAdapterApi - object-oriented interface
 * @export
 * @class ShowNetworkAdapterApi
 * @extends {BaseAPI}
 */
export class ShowNetworkAdapterApi extends BaseAPI {
    /**
     * Returns a NetworkAdapter object
     * @summary Show an existing NetworkAdapter
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowNetworkAdapterApi
     */
    public showNetworkAdapter(id: string, options?: AxiosRequestConfig) {
        return ShowNetworkAdapterApiFp(this.configuration).showNetworkAdapter(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowOrchestrationStackApi - axios parameter creator
 * @export
 */
export const ShowOrchestrationStackApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a OrchestrationStack object
         * @summary Show an existing OrchestrationStack
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showOrchestrationStack: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showOrchestrationStack', 'id', id)
            const localVarPath = `/orchestration_stacks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowOrchestrationStackApi - functional programming interface
 * @export
 */
export const ShowOrchestrationStackApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowOrchestrationStackApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a OrchestrationStack object
         * @summary Show an existing OrchestrationStack
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showOrchestrationStack(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrchestrationStack>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showOrchestrationStack(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowOrchestrationStackApi - factory interface
 * @export
 */
export const ShowOrchestrationStackApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowOrchestrationStackApiFp(configuration)
    return {
        /**
         * Returns a OrchestrationStack object
         * @summary Show an existing OrchestrationStack
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showOrchestrationStack(id: string, options?: any): AxiosPromise<OrchestrationStack> {
            return localVarFp.showOrchestrationStack(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowOrchestrationStackApi - object-oriented interface
 * @export
 * @class ShowOrchestrationStackApi
 * @extends {BaseAPI}
 */
export class ShowOrchestrationStackApi extends BaseAPI {
    /**
     * Returns a OrchestrationStack object
     * @summary Show an existing OrchestrationStack
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowOrchestrationStackApi
     */
    public showOrchestrationStack(id: string, options?: AxiosRequestConfig) {
        return ShowOrchestrationStackApiFp(this.configuration).showOrchestrationStack(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowSecurityGroupApi - axios parameter creator
 * @export
 */
export const ShowSecurityGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a SecurityGroup object
         * @summary Show an existing SecurityGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSecurityGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showSecurityGroup', 'id', id)
            const localVarPath = `/security_groups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowSecurityGroupApi - functional programming interface
 * @export
 */
export const ShowSecurityGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowSecurityGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a SecurityGroup object
         * @summary Show an existing SecurityGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSecurityGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGroup>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showSecurityGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowSecurityGroupApi - factory interface
 * @export
 */
export const ShowSecurityGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowSecurityGroupApiFp(configuration)
    return {
        /**
         * Returns a SecurityGroup object
         * @summary Show an existing SecurityGroup
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSecurityGroup(id: string, options?: any): AxiosPromise<SecurityGroup> {
            return localVarFp.showSecurityGroup(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowSecurityGroupApi - object-oriented interface
 * @export
 * @class ShowSecurityGroupApi
 * @extends {BaseAPI}
 */
export class ShowSecurityGroupApi extends BaseAPI {
    /**
     * Returns a SecurityGroup object
     * @summary Show an existing SecurityGroup
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowSecurityGroupApi
     */
    public showSecurityGroup(id: string, options?: AxiosRequestConfig) {
        return ShowSecurityGroupApiFp(this.configuration).showSecurityGroup(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowServiceInstanceApi - axios parameter creator
 * @export
 */
export const ShowServiceInstanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ServiceInstance object
         * @summary Show an existing ServiceInstance
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInstance: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showServiceInstance', 'id', id)
            const localVarPath = `/service_instances/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowServiceInstanceApi - functional programming interface
 * @export
 */
export const ShowServiceInstanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowServiceInstanceApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ServiceInstance object
         * @summary Show an existing ServiceInstance
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceInstance(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstance>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceInstance(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowServiceInstanceApi - factory interface
 * @export
 */
export const ShowServiceInstanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowServiceInstanceApiFp(configuration)
    return {
        /**
         * Returns a ServiceInstance object
         * @summary Show an existing ServiceInstance
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInstance(id: string, options?: any): AxiosPromise<ServiceInstance> {
            return localVarFp.showServiceInstance(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowServiceInstanceApi - object-oriented interface
 * @export
 * @class ShowServiceInstanceApi
 * @extends {BaseAPI}
 */
export class ShowServiceInstanceApi extends BaseAPI {
    /**
     * Returns a ServiceInstance object
     * @summary Show an existing ServiceInstance
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceInstanceApi
     */
    public showServiceInstance(id: string, options?: AxiosRequestConfig) {
        return ShowServiceInstanceApiFp(this.configuration).showServiceInstance(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowServiceInstanceNodeApi - axios parameter creator
 * @export
 */
export const ShowServiceInstanceNodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ServiceInstanceNode object
         * @summary Show an existing ServiceInstanceNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInstanceNode: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showServiceInstanceNode', 'id', id)
            const localVarPath = `/service_instance_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowServiceInstanceNodeApi - functional programming interface
 * @export
 */
export const ShowServiceInstanceNodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowServiceInstanceNodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ServiceInstanceNode object
         * @summary Show an existing ServiceInstanceNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceInstanceNode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInstanceNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceInstanceNode(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowServiceInstanceNodeApi - factory interface
 * @export
 */
export const ShowServiceInstanceNodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowServiceInstanceNodeApiFp(configuration)
    return {
        /**
         * Returns a ServiceInstanceNode object
         * @summary Show an existing ServiceInstanceNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInstanceNode(id: string, options?: any): AxiosPromise<ServiceInstanceNode> {
            return localVarFp.showServiceInstanceNode(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowServiceInstanceNodeApi - object-oriented interface
 * @export
 * @class ShowServiceInstanceNodeApi
 * @extends {BaseAPI}
 */
export class ShowServiceInstanceNodeApi extends BaseAPI {
    /**
     * Returns a ServiceInstanceNode object
     * @summary Show an existing ServiceInstanceNode
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceInstanceNodeApi
     */
    public showServiceInstanceNode(id: string, options?: AxiosRequestConfig) {
        return ShowServiceInstanceNodeApiFp(this.configuration).showServiceInstanceNode(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowServiceInventoryApi - axios parameter creator
 * @export
 */
export const ShowServiceInventoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ServiceInventory object
         * @summary Show an existing ServiceInventory
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInventory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showServiceInventory', 'id', id)
            const localVarPath = `/service_inventories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowServiceInventoryApi - functional programming interface
 * @export
 */
export const ShowServiceInventoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowServiceInventoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ServiceInventory object
         * @summary Show an existing ServiceInventory
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceInventory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceInventory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceInventory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowServiceInventoryApi - factory interface
 * @export
 */
export const ShowServiceInventoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowServiceInventoryApiFp(configuration)
    return {
        /**
         * Returns a ServiceInventory object
         * @summary Show an existing ServiceInventory
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceInventory(id: string, options?: any): AxiosPromise<ServiceInventory> {
            return localVarFp.showServiceInventory(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowServiceInventoryApi - object-oriented interface
 * @export
 * @class ShowServiceInventoryApi
 * @extends {BaseAPI}
 */
export class ShowServiceInventoryApi extends BaseAPI {
    /**
     * Returns a ServiceInventory object
     * @summary Show an existing ServiceInventory
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceInventoryApi
     */
    public showServiceInventory(id: string, options?: AxiosRequestConfig) {
        return ShowServiceInventoryApiFp(this.configuration).showServiceInventory(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowServiceOfferingApi - axios parameter creator
 * @export
 */
export const ShowServiceOfferingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ServiceOffering object
         * @summary Show an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOffering: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showServiceOffering', 'id', id)
            const localVarPath = `/service_offerings/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowServiceOfferingApi - functional programming interface
 * @export
 */
export const ShowServiceOfferingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowServiceOfferingApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ServiceOffering object
         * @summary Show an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceOffering(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOffering>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceOffering(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowServiceOfferingApi - factory interface
 * @export
 */
export const ShowServiceOfferingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowServiceOfferingApiFp(configuration)
    return {
        /**
         * Returns a ServiceOffering object
         * @summary Show an existing ServiceOffering
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOffering(id: string, options?: any): AxiosPromise<ServiceOffering> {
            return localVarFp.showServiceOffering(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowServiceOfferingApi - object-oriented interface
 * @export
 * @class ShowServiceOfferingApi
 * @extends {BaseAPI}
 */
export class ShowServiceOfferingApi extends BaseAPI {
    /**
     * Returns a ServiceOffering object
     * @summary Show an existing ServiceOffering
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceOfferingApi
     */
    public showServiceOffering(id: string, options?: AxiosRequestConfig) {
        return ShowServiceOfferingApiFp(this.configuration).showServiceOffering(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowServiceOfferingIconApi - axios parameter creator
 * @export
 */
export const ShowServiceOfferingIconApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ServiceOfferingIcon object
         * @summary Show an existing ServiceOfferingIcon
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingIcon: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showServiceOfferingIcon', 'id', id)
            const localVarPath = `/service_offering_icons/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowServiceOfferingIconApi - functional programming interface
 * @export
 */
export const ShowServiceOfferingIconApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowServiceOfferingIconApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ServiceOfferingIcon object
         * @summary Show an existing ServiceOfferingIcon
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceOfferingIcon(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingIcon>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceOfferingIcon(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowServiceOfferingIconApi - factory interface
 * @export
 */
export const ShowServiceOfferingIconApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowServiceOfferingIconApiFp(configuration)
    return {
        /**
         * Returns a ServiceOfferingIcon object
         * @summary Show an existing ServiceOfferingIcon
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingIcon(id: string, options?: any): AxiosPromise<ServiceOfferingIcon> {
            return localVarFp.showServiceOfferingIcon(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowServiceOfferingIconApi - object-oriented interface
 * @export
 * @class ShowServiceOfferingIconApi
 * @extends {BaseAPI}
 */
export class ShowServiceOfferingIconApi extends BaseAPI {
    /**
     * Returns a ServiceOfferingIcon object
     * @summary Show an existing ServiceOfferingIcon
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceOfferingIconApi
     */
    public showServiceOfferingIcon(id: string, options?: AxiosRequestConfig) {
        return ShowServiceOfferingIconApiFp(this.configuration).showServiceOfferingIcon(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowServiceOfferingIconIconDataApi - axios parameter creator
 * @export
 */
export const ShowServiceOfferingIconIconDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ServiceOfferingIcon IconData
         * @summary Show an existing ServiceOfferingIcon IconData
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingIconIconData: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showServiceOfferingIconIconData', 'id', id)
            const localVarPath = `/service_offering_icons/{id}/icon_data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowServiceOfferingIconIconDataApi - functional programming interface
 * @export
 */
export const ShowServiceOfferingIconIconDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowServiceOfferingIconIconDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ServiceOfferingIcon IconData
         * @summary Show an existing ServiceOfferingIcon IconData
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceOfferingIconIconData(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceOfferingIconIconData(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowServiceOfferingIconIconDataApi - factory interface
 * @export
 */
export const ShowServiceOfferingIconIconDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowServiceOfferingIconIconDataApiFp(configuration)
    return {
        /**
         * Returns a ServiceOfferingIcon IconData
         * @summary Show an existing ServiceOfferingIcon IconData
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingIconIconData(id: string, options?: any): AxiosPromise<File> {
            return localVarFp.showServiceOfferingIconIconData(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowServiceOfferingIconIconDataApi - object-oriented interface
 * @export
 * @class ShowServiceOfferingIconIconDataApi
 * @extends {BaseAPI}
 */
export class ShowServiceOfferingIconIconDataApi extends BaseAPI {
    /**
     * Returns a ServiceOfferingIcon IconData
     * @summary Show an existing ServiceOfferingIcon IconData
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceOfferingIconIconDataApi
     */
    public showServiceOfferingIconIconData(id: string, options?: AxiosRequestConfig) {
        return ShowServiceOfferingIconIconDataApiFp(this.configuration).showServiceOfferingIconIconData(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowServiceOfferingNodeApi - axios parameter creator
 * @export
 */
export const ShowServiceOfferingNodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ServiceOfferingNode object
         * @summary Show an existing ServiceOfferingNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingNode: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showServiceOfferingNode', 'id', id)
            const localVarPath = `/service_offering_nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowServiceOfferingNodeApi - functional programming interface
 * @export
 */
export const ShowServiceOfferingNodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowServiceOfferingNodeApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ServiceOfferingNode object
         * @summary Show an existing ServiceOfferingNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServiceOfferingNode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceOfferingNode>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServiceOfferingNode(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowServiceOfferingNodeApi - factory interface
 * @export
 */
export const ShowServiceOfferingNodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowServiceOfferingNodeApiFp(configuration)
    return {
        /**
         * Returns a ServiceOfferingNode object
         * @summary Show an existing ServiceOfferingNode
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServiceOfferingNode(id: string, options?: any): AxiosPromise<ServiceOfferingNode> {
            return localVarFp.showServiceOfferingNode(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowServiceOfferingNodeApi - object-oriented interface
 * @export
 * @class ShowServiceOfferingNodeApi
 * @extends {BaseAPI}
 */
export class ShowServiceOfferingNodeApi extends BaseAPI {
    /**
     * Returns a ServiceOfferingNode object
     * @summary Show an existing ServiceOfferingNode
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServiceOfferingNodeApi
     */
    public showServiceOfferingNode(id: string, options?: AxiosRequestConfig) {
        return ShowServiceOfferingNodeApiFp(this.configuration).showServiceOfferingNode(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowServicePlanApi - axios parameter creator
 * @export
 */
export const ShowServicePlanApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a ServicePlan object
         * @summary Show an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServicePlan: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showServicePlan', 'id', id)
            const localVarPath = `/service_plans/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowServicePlanApi - functional programming interface
 * @export
 */
export const ShowServicePlanApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowServicePlanApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a ServicePlan object
         * @summary Show an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showServicePlan(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicePlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showServicePlan(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowServicePlanApi - factory interface
 * @export
 */
export const ShowServicePlanApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowServicePlanApiFp(configuration)
    return {
        /**
         * Returns a ServicePlan object
         * @summary Show an existing ServicePlan
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showServicePlan(id: string, options?: any): AxiosPromise<ServicePlan> {
            return localVarFp.showServicePlan(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowServicePlanApi - object-oriented interface
 * @export
 * @class ShowServicePlanApi
 * @extends {BaseAPI}
 */
export class ShowServicePlanApi extends BaseAPI {
    /**
     * Returns a ServicePlan object
     * @summary Show an existing ServicePlan
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowServicePlanApi
     */
    public showServicePlan(id: string, options?: AxiosRequestConfig) {
        return ShowServicePlanApiFp(this.configuration).showServicePlan(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowSourceApi - axios parameter creator
 * @export
 */
export const ShowSourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSource: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showSource', 'id', id)
            const localVarPath = `/sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowSourceApi - functional programming interface
 * @export
 */
export const ShowSourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowSourceApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSource(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showSource(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowSourceApi - factory interface
 * @export
 */
export const ShowSourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowSourceApiFp(configuration)
    return {
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSource(id: string, options?: any): AxiosPromise<Source> {
            return localVarFp.showSource(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowSourceApi - object-oriented interface
 * @export
 * @class ShowSourceApi
 * @extends {BaseAPI}
 */
export class ShowSourceApi extends BaseAPI {
    /**
     * Returns a Source object
     * @summary Show an existing Source
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowSourceApi
     */
    public showSource(id: string, options?: AxiosRequestConfig) {
        return ShowSourceApiFp(this.configuration).showSource(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowSourceRegionApi - axios parameter creator
 * @export
 */
export const ShowSourceRegionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a SourceRegion object
         * @summary Show an existing SourceRegion
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSourceRegion: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showSourceRegion', 'id', id)
            const localVarPath = `/source_regions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowSourceRegionApi - functional programming interface
 * @export
 */
export const ShowSourceRegionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowSourceRegionApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a SourceRegion object
         * @summary Show an existing SourceRegion
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSourceRegion(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceRegion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showSourceRegion(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowSourceRegionApi - factory interface
 * @export
 */
export const ShowSourceRegionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowSourceRegionApiFp(configuration)
    return {
        /**
         * Returns a SourceRegion object
         * @summary Show an existing SourceRegion
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSourceRegion(id: string, options?: any): AxiosPromise<SourceRegion> {
            return localVarFp.showSourceRegion(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowSourceRegionApi - object-oriented interface
 * @export
 * @class ShowSourceRegionApi
 * @extends {BaseAPI}
 */
export class ShowSourceRegionApi extends BaseAPI {
    /**
     * Returns a SourceRegion object
     * @summary Show an existing SourceRegion
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowSourceRegionApi
     */
    public showSourceRegion(id: string, options?: AxiosRequestConfig) {
        return ShowSourceRegionApiFp(this.configuration).showSourceRegion(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowSubnetApi - axios parameter creator
 * @export
 */
export const ShowSubnetApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Subnet object
         * @summary Show an existing Subnet
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSubnet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showSubnet', 'id', id)
            const localVarPath = `/subnets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowSubnetApi - functional programming interface
 * @export
 */
export const ShowSubnetApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowSubnetApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Subnet object
         * @summary Show an existing Subnet
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSubnet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subnet>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showSubnet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowSubnetApi - factory interface
 * @export
 */
export const ShowSubnetApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowSubnetApiFp(configuration)
    return {
        /**
         * Returns a Subnet object
         * @summary Show an existing Subnet
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSubnet(id: string, options?: any): AxiosPromise<Subnet> {
            return localVarFp.showSubnet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowSubnetApi - object-oriented interface
 * @export
 * @class ShowSubnetApi
 * @extends {BaseAPI}
 */
export class ShowSubnetApi extends BaseAPI {
    /**
     * Returns a Subnet object
     * @summary Show an existing Subnet
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowSubnetApi
     */
    public showSubnet(id: string, options?: AxiosRequestConfig) {
        return ShowSubnetApiFp(this.configuration).showSubnet(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowSubscriptionApi - axios parameter creator
 * @export
 */
export const ShowSubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Subscription object
         * @summary Show an existing Subscription
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSubscription: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showSubscription', 'id', id)
            const localVarPath = `/subscriptions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowSubscriptionApi - functional programming interface
 * @export
 */
export const ShowSubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowSubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Subscription object
         * @summary Show an existing Subscription
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSubscription(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showSubscription(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowSubscriptionApi - factory interface
 * @export
 */
export const ShowSubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowSubscriptionApiFp(configuration)
    return {
        /**
         * Returns a Subscription object
         * @summary Show an existing Subscription
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSubscription(id: string, options?: any): AxiosPromise<Subscription> {
            return localVarFp.showSubscription(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowSubscriptionApi - object-oriented interface
 * @export
 * @class ShowSubscriptionApi
 * @extends {BaseAPI}
 */
export class ShowSubscriptionApi extends BaseAPI {
    /**
     * Returns a Subscription object
     * @summary Show an existing Subscription
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowSubscriptionApi
     */
    public showSubscription(id: string, options?: AxiosRequestConfig) {
        return ShowSubscriptionApiFp(this.configuration).showSubscription(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowTagApi - axios parameter creator
 * @export
 */
export const ShowTagApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Tag object
         * @summary Show an existing Tag
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTag: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showTag', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowTagApi - functional programming interface
 * @export
 */
export const ShowTagApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowTagApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Tag object
         * @summary Show an existing Tag
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showTag(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showTag(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowTagApi - factory interface
 * @export
 */
export const ShowTagApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowTagApiFp(configuration)
    return {
        /**
         * Returns a Tag object
         * @summary Show an existing Tag
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTag(id: string, options?: any): AxiosPromise<Tag> {
            return localVarFp.showTag(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowTagApi - object-oriented interface
 * @export
 * @class ShowTagApi
 * @extends {BaseAPI}
 */
export class ShowTagApi extends BaseAPI {
    /**
     * Returns a Tag object
     * @summary Show an existing Tag
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowTagApi
     */
    public showTag(id: string, options?: AxiosRequestConfig) {
        return ShowTagApiFp(this.configuration).showTag(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowTaskApi - axios parameter creator
 * @export
 */
export const ShowTaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Task object
         * @summary Show an existing Task
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTask: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showTask', 'id', id)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowTaskApi - functional programming interface
 * @export
 */
export const ShowTaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowTaskApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Task object
         * @summary Show an existing Task
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showTask(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showTask(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowTaskApi - factory interface
 * @export
 */
export const ShowTaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowTaskApiFp(configuration)
    return {
        /**
         * Returns a Task object
         * @summary Show an existing Task
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showTask(id: string, options?: any): AxiosPromise<Task> {
            return localVarFp.showTask(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowTaskApi - object-oriented interface
 * @export
 * @class ShowTaskApi
 * @extends {BaseAPI}
 */
export class ShowTaskApi extends BaseAPI {
    /**
     * Returns a Task object
     * @summary Show an existing Task
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowTaskApi
     */
    public showTask(id: string, options?: AxiosRequestConfig) {
        return ShowTaskApiFp(this.configuration).showTask(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowVmApi - axios parameter creator
 * @export
 */
export const ShowVmApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Vm object
         * @summary Show an existing Vm
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVm: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showVm', 'id', id)
            const localVarPath = `/vms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowVmApi - functional programming interface
 * @export
 */
export const ShowVmApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowVmApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Vm object
         * @summary Show an existing Vm
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showVm(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vm>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showVm(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowVmApi - factory interface
 * @export
 */
export const ShowVmApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowVmApiFp(configuration)
    return {
        /**
         * Returns a Vm object
         * @summary Show an existing Vm
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVm(id: string, options?: any): AxiosPromise<Vm> {
            return localVarFp.showVm(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowVmApi - object-oriented interface
 * @export
 * @class ShowVmApi
 * @extends {BaseAPI}
 */
export class ShowVmApi extends BaseAPI {
    /**
     * Returns a Vm object
     * @summary Show an existing Vm
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowVmApi
     */
    public showVm(id: string, options?: AxiosRequestConfig) {
        return ShowVmApiFp(this.configuration).showVm(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowVolumeApi - axios parameter creator
 * @export
 */
export const ShowVolumeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Volume object
         * @summary Show an existing Volume
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolume: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showVolume', 'id', id)
            const localVarPath = `/volumes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowVolumeApi - functional programming interface
 * @export
 */
export const ShowVolumeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowVolumeApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Volume object
         * @summary Show an existing Volume
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showVolume(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Volume>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showVolume(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowVolumeApi - factory interface
 * @export
 */
export const ShowVolumeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowVolumeApiFp(configuration)
    return {
        /**
         * Returns a Volume object
         * @summary Show an existing Volume
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolume(id: string, options?: any): AxiosPromise<Volume> {
            return localVarFp.showVolume(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowVolumeApi - object-oriented interface
 * @export
 * @class ShowVolumeApi
 * @extends {BaseAPI}
 */
export class ShowVolumeApi extends BaseAPI {
    /**
     * Returns a Volume object
     * @summary Show an existing Volume
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowVolumeApi
     */
    public showVolume(id: string, options?: AxiosRequestConfig) {
        return ShowVolumeApiFp(this.configuration).showVolume(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowVolumeAttachmentApi - axios parameter creator
 * @export
 */
export const ShowVolumeAttachmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a VolumeAttachment object
         * @summary Show an existing VolumeAttachment
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolumeAttachment: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showVolumeAttachment', 'id', id)
            const localVarPath = `/volume_attachments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowVolumeAttachmentApi - functional programming interface
 * @export
 */
export const ShowVolumeAttachmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowVolumeAttachmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a VolumeAttachment object
         * @summary Show an existing VolumeAttachment
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showVolumeAttachment(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeAttachment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showVolumeAttachment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowVolumeAttachmentApi - factory interface
 * @export
 */
export const ShowVolumeAttachmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowVolumeAttachmentApiFp(configuration)
    return {
        /**
         * Returns a VolumeAttachment object
         * @summary Show an existing VolumeAttachment
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolumeAttachment(id: string, options?: any): AxiosPromise<VolumeAttachment> {
            return localVarFp.showVolumeAttachment(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowVolumeAttachmentApi - object-oriented interface
 * @export
 * @class ShowVolumeAttachmentApi
 * @extends {BaseAPI}
 */
export class ShowVolumeAttachmentApi extends BaseAPI {
    /**
     * Returns a VolumeAttachment object
     * @summary Show an existing VolumeAttachment
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowVolumeAttachmentApi
     */
    public showVolumeAttachment(id: string, options?: AxiosRequestConfig) {
        return ShowVolumeAttachmentApiFp(this.configuration).showVolumeAttachment(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ShowVolumeTypeApi - axios parameter creator
 * @export
 */
export const ShowVolumeTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a VolumeType object
         * @summary Show an existing VolumeType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolumeType: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showVolumeType', 'id', id)
            const localVarPath = `/volume_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShowVolumeTypeApi - functional programming interface
 * @export
 */
export const ShowVolumeTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShowVolumeTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a VolumeType object
         * @summary Show an existing VolumeType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showVolumeType(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VolumeType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showVolumeType(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShowVolumeTypeApi - factory interface
 * @export
 */
export const ShowVolumeTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShowVolumeTypeApiFp(configuration)
    return {
        /**
         * Returns a VolumeType object
         * @summary Show an existing VolumeType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showVolumeType(id: string, options?: any): AxiosPromise<VolumeType> {
            return localVarFp.showVolumeType(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShowVolumeTypeApi - object-oriented interface
 * @export
 * @class ShowVolumeTypeApi
 * @extends {BaseAPI}
 */
export class ShowVolumeTypeApi extends BaseAPI {
    /**
     * Returns a VolumeType object
     * @summary Show an existing VolumeType
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShowVolumeTypeApi
     */
    public showVolumeType(id: string, options?: AxiosRequestConfig) {
        return ShowVolumeTypeApiFp(this.configuration).showVolumeType(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UpdateTaskApi - axios parameter creator
 * @export
 */
export const UpdateTaskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates a Task object
         * @summary Update an existing Task
         * @param {string} id ID of the resource
         * @param {Task} task Task attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask: async (id: string, task: Task, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTask', 'id', id)
            // verify required parameter 'task' is not null or undefined
            assertParamExists('updateTask', 'task', task)
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(task, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdateTaskApi - functional programming interface
 * @export
 */
export const UpdateTaskApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpdateTaskApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates a Task object
         * @summary Update an existing Task
         * @param {string} id ID of the resource
         * @param {Task} task Task attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTask(id: string, task: Task, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTask(id, task, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpdateTaskApi - factory interface
 * @export
 */
export const UpdateTaskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpdateTaskApiFp(configuration)
    return {
        /**
         * Updates a Task object
         * @summary Update an existing Task
         * @param {string} id ID of the resource
         * @param {Task} task Task attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTask(id: string, task: Task, options?: any): AxiosPromise<void> {
            return localVarFp.updateTask(id, task, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UpdateTaskApi - object-oriented interface
 * @export
 * @class UpdateTaskApi
 * @extends {BaseAPI}
 */
export class UpdateTaskApi extends BaseAPI {
    /**
     * Updates a Task object
     * @summary Update an existing Task
     * @param {string} id ID of the resource
     * @param {Task} task Task attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateTaskApi
     */
    public updateTask(id: string, task: Task, options?: AxiosRequestConfig) {
        return UpdateTaskApiFp(this.configuration).updateTask(id, task, options).then((request) => request(this.axios, this.basePath));
    }
}



