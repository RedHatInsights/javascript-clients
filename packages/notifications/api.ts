/* tslint:disable */
/* eslint-disable */
/**
 * Notifications
 * The API for Notifications provides endpoints that you can use to create and manage event notifications between third-party applications and the Red Hat Hybrid Cloud Console.
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AddAccessRequest
 */
export interface AddAccessRequest {
    /**
     *
     * @type {string}
     * @memberof AddAccessRequest
     */
    'role'?: string;
    /**
     *
     * @type {string}
     * @memberof AddAccessRequest
     */
    'application_id'?: string;
}
/**
 *
 * @export
 * @interface AddApplicationRequest
 */
export interface AddApplicationRequest {
    /**
     *
     * @type {string}
     * @memberof AddApplicationRequest
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof AddApplicationRequest
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof AddApplicationRequest
     */
    'bundle_id': string;
    /**
     *
     * @type {string}
     * @memberof AddApplicationRequest
     */
    'owner_role'?: string;
}
/**
 *
 * @export
 * @interface AggregationEmailTemplate
 */
export interface AggregationEmailTemplate {
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'id'?: string;
    /**
     *
     * @type {Application}
     * @memberof AggregationEmailTemplate
     */
    'application'?: Application;
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'application_id'?: string;
    /**
     *
     * @type {EmailSubscriptionType}
     * @memberof AggregationEmailTemplate
     */
    'subscription_type': EmailSubscriptionType;
    /**
     *
     * @type {Template}
     * @memberof AggregationEmailTemplate
     */
    'subject_template'?: Template;
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'subject_template_id': string;
    /**
     *
     * @type {Template}
     * @memberof AggregationEmailTemplate
     */
    'body_template'?: Template;
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'body_template_id': string;
}


/**
 *
 * @export
 * @interface Application
 */
export interface Application {
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'bundle_id': string;
}
/**
 *
 * @export
 * @interface Application1
 */
export interface Application1 {
    /**
     *
     * @type {string}
     * @memberof Application1
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Application1
     */
    'display_name': string;
}
/**
 *
 * @export
 * @interface ApplicationSettingsValue
 */
export interface ApplicationSettingsValue {
    /**
     *
     * @type {{ [key: string]: EventTypeSettingsValue; }}
     * @memberof ApplicationSettingsValue
     */
    'eventTypes'?: { [key: string]: EventTypeSettingsValue; };
}
/**
 *
 * @export
 * @interface BasicAuthentication
 */
export interface BasicAuthentication {
    /**
     *
     * @type {string}
     * @memberof BasicAuthentication
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof BasicAuthentication
     */
    'password'?: string;
}
/**
 *
 * @export
 * @interface BehaviorGroup
 */
export interface BehaviorGroup {
    /**
     *
     * @type {string}
     * @memberof BehaviorGroup
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof BehaviorGroup
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof BehaviorGroup
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof BehaviorGroup
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof BehaviorGroup
     */
    'bundle_id': string;
    /**
     *
     * @type {Bundle}
     * @memberof BehaviorGroup
     */
    'bundle'?: Bundle;
    /**
     *
     * @type {Array<BehaviorGroupAction>}
     * @memberof BehaviorGroup
     */
    'actions'?: Array<BehaviorGroupAction>;
    /**
     *
     * @type {Set<EventTypeBehavior>}
     * @memberof BehaviorGroup
     */
    'behaviors'?: Set<EventTypeBehavior>;
    /**
     *
     * @type {boolean}
     * @memberof BehaviorGroup
     */
    'default_behavior'?: boolean;
}
/**
 *
 * @export
 * @interface BehaviorGroupAction
 */
export interface BehaviorGroupAction {
    /**
     *
     * @type {string}
     * @memberof BehaviorGroupAction
     */
    'created'?: string;
    /**
     *
     * @type {BehaviorGroupActionId}
     * @memberof BehaviorGroupAction
     */
    'id'?: BehaviorGroupActionId;
    /**
     *
     * @type {Endpoint}
     * @memberof BehaviorGroupAction
     */
    'endpoint'?: Endpoint;
}
/**
 *
 * @export
 * @interface BehaviorGroupActionId
 */
export interface BehaviorGroupActionId {
    /**
     *
     * @type {string}
     * @memberof BehaviorGroupActionId
     */
    'behaviorGroupId': string;
    /**
     *
     * @type {string}
     * @memberof BehaviorGroupActionId
     */
    'endpointId': string;
}
/**
 *
 * @export
 * @interface Bundle
 */
export interface Bundle {
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'display_name': string;
}
/**
 *
 * @export
 * @interface BundleSettingsValue
 */
export interface BundleSettingsValue {
    /**
     *
     * @type {{ [key: string]: ApplicationSettingsValue; }}
     * @memberof BundleSettingsValue
     */
    'applications'?: { [key: string]: ApplicationSettingsValue; };
}
/**
 *
 * @export
 * @interface CamelProperties
 */
export interface CamelProperties {
    /**
     *
     * @type {string}
     * @memberof CamelProperties
     */
    'url': string;
    /**
     *
     * @type {boolean}
     * @memberof CamelProperties
     */
    'disable_ssl_verification': boolean;
    /**
     *
     * @type {string}
     * @memberof CamelProperties
     */
    'secret_token'?: string;
    /**
     *
     * @type {BasicAuthentication}
     * @memberof CamelProperties
     */
    'basic_authentication'?: BasicAuthentication;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof CamelProperties
     */
    'extras'?: { [key: string]: string; };
}
/**
 *
 * @export
 * @interface CreateBehaviorGroupRequest
 */
export interface CreateBehaviorGroupRequest {
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupRequest
     */
    'bundle_id'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupRequest
     */
    'bundle_name'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupRequest
     */
    'display_name': string;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateBehaviorGroupRequest
     */
    'endpoint_ids'?: Array<string>;
    /**
     *
     * @type {Set<string>}
     * @memberof CreateBehaviorGroupRequest
     */
    'event_type_ids'?: Set<string>;
    /**
     *
     * @type {boolean}
     * @memberof CreateBehaviorGroupRequest
     */
    'bundle_uuid_or_bundle_name_valid'?: boolean;
}
/**
 *
 * @export
 * @interface CreateBehaviorGroupResponse
 */
export interface CreateBehaviorGroupResponse {
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupResponse
     */
    'bundle_id': string;
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupResponse
     */
    'display_name': string;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateBehaviorGroupResponse
     */
    'endpoints': Array<string>;
    /**
     *
     * @type {Set<string>}
     * @memberof CreateBehaviorGroupResponse
     */
    'event_types': Set<string>;
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupResponse
     */
    'created': string;
}
/**
 *
 * @export
 * @interface CurrentStatus
 */
export interface CurrentStatus {
    /**
     *
     * @type {Status}
     * @memberof CurrentStatus
     */
    'status': Status;
    /**
     *
     * @type {string}
     * @memberof CurrentStatus
     */
    'start_time'?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentStatus
     */
    'end_time'?: string;
}


/**
 *
 * @export
 * @interface DrawerEntryPayload
 */
export interface DrawerEntryPayload {
    /**
     *
     * @type {string}
     * @memberof DrawerEntryPayload
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof DrawerEntryPayload
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof DrawerEntryPayload
     */
    'title'?: string;
    /**
     *
     * @type {string}
     * @memberof DrawerEntryPayload
     */
    'created'?: string;
    /**
     *
     * @type {boolean}
     * @memberof DrawerEntryPayload
     */
    'read': boolean;
    /**
     *
     * @type {string}
     * @memberof DrawerEntryPayload
     */
    'source'?: string;
}
/**
 *
 * @export
 * @interface DuplicateNameMigrationReport
 */
export interface DuplicateNameMigrationReport {
    /**
     *
     * @type {number}
     * @memberof DuplicateNameMigrationReport
     */
    'updatedIntegrations'?: number;
    /**
     *
     * @type {number}
     * @memberof DuplicateNameMigrationReport
     */
    'updatedBehaviorGroups'?: number;
}
/**
 *
 * @export
 * @enum {string}
 */

export const EmailSubscriptionType = {
    Instant: 'INSTANT',
    Daily: 'DAILY',
    Drawer: 'DRAWER'
} as const;

export type EmailSubscriptionType = typeof EmailSubscriptionType[keyof typeof EmailSubscriptionType];


/**
 *
 * @export
 * @interface Endpoint
 */
export interface Endpoint {
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'description': string;
    /**
     *
     * @type {boolean}
     * @memberof Endpoint
     */
    'enabled'?: boolean;
    /**
     *
     * @type {EndpointStatus}
     * @memberof Endpoint
     */
    'status'?: EndpointStatus;
    /**
     *
     * @type {number}
     * @memberof Endpoint
     */
    'server_errors'?: number;
    /**
     *
     * @type {object}
     * @memberof Endpoint
     */
    'properties'?: object;
    /**
     *
     * @type {EndpointType}
     * @memberof Endpoint
     */
    'type': EndpointType;
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'sub_type'?: string;
}


/**
 *
 * @export
 * @interface EndpointPage
 */
export interface EndpointPage {
    /**
     *
     * @type {Array<Endpoint>}
     * @memberof EndpointPage
     */
    'data': Array<Endpoint>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof EndpointPage
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof EndpointPage
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @enum {string}
 */

export const EndpointStatus = {
    Ready: 'READY',
    Unknown: 'UNKNOWN',
    New: 'NEW',
    Provisioning: 'PROVISIONING',
    Deleting: 'DELETING',
    Failed: 'FAILED'
} as const;

export type EndpointStatus = typeof EndpointStatus[keyof typeof EndpointStatus];


/**
 *
 * @export
 * @interface EndpointTestRequest
 */
export interface EndpointTestRequest {
    /**
     *
     * @type {string}
     * @memberof EndpointTestRequest
     */
    'message': string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const EndpointType = {
    Webhook: 'webhook',
    EmailSubscription: 'email_subscription',
    Camel: 'camel',
    Ansible: 'ansible',
    Drawer: 'drawer'
} as const;

export type EndpointType = typeof EndpointType[keyof typeof EndpointType];


/**
 *
 * @export
 * @enum {string}
 */

export const Environment = {
    Prod: 'PROD',
    Stage: 'STAGE',
    Ephemeral: 'EPHEMERAL',
    LocalServer: 'LOCAL_SERVER'
} as const;

export type Environment = typeof Environment[keyof typeof Environment];


/**
 *
 * @export
 * @interface EventLogEntry
 */
export interface EventLogEntry {
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'created': string;
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'bundle': string;
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'application': string;
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'event_type': string;
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'payload'?: string;
    /**
     *
     * @type {Array<EventLogEntryAction>}
     * @memberof EventLogEntry
     */
    'actions': Array<EventLogEntryAction>;
}
/**
 *
 * @export
 * @interface EventLogEntryAction
 */
export interface EventLogEntryAction {
    /**
     *
     * @type {string}
     * @memberof EventLogEntryAction
     */
    'id': string;
    /**
     *
     * @type {EndpointType}
     * @memberof EventLogEntryAction
     */
    'endpoint_type': EndpointType;
    /**
     *
     * @type {string}
     * @memberof EventLogEntryAction
     */
    'endpoint_sub_type'?: string;
    /**
     *
     * @type {boolean}
     * @memberof EventLogEntryAction
     * @deprecated
     */
    'invocation_result': boolean;
    /**
     *
     * @type {EventLogEntryActionStatus}
     * @memberof EventLogEntryAction
     */
    'status': EventLogEntryActionStatus;
    /**
     *
     * @type {string}
     * @memberof EventLogEntryAction
     */
    'endpoint_id'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof EventLogEntryAction
     */
    'details'?: { [key: string]: any; };
}


/**
 *
 * @export
 * @enum {string}
 */

export const EventLogEntryActionStatus = {
    Sent: 'SENT',
    Success: 'SUCCESS',
    Processing: 'PROCESSING',
    Failed: 'FAILED',
    Unknown: 'UNKNOWN'
} as const;

export type EventLogEntryActionStatus = typeof EventLogEntryActionStatus[keyof typeof EventLogEntryActionStatus];


/**
 *
 * @export
 * @interface EventType
 */
export interface EventType {
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'fully_qualified_name'?: string;
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'application_id': string;
    /**
     *
     * @type {Application}
     * @memberof EventType
     */
    'application'?: Application;
}
/**
 *
 * @export
 * @interface EventTypeBehavior
 */
export interface EventTypeBehavior {
    /**
     *
     * @type {string}
     * @memberof EventTypeBehavior
     */
    'created'?: string;
    /**
     *
     * @type {EventTypeBehaviorId}
     * @memberof EventTypeBehavior
     */
    'id'?: EventTypeBehaviorId;
    /**
     *
     * @type {EventType}
     * @memberof EventTypeBehavior
     */
    'event_type'?: EventType;
}
/**
 *
 * @export
 * @interface EventTypeBehaviorId
 */
export interface EventTypeBehaviorId {
    /**
     *
     * @type {string}
     * @memberof EventTypeBehaviorId
     */
    'eventTypeId': string;
    /**
     *
     * @type {string}
     * @memberof EventTypeBehaviorId
     */
    'behaviorGroupId': string;
}
/**
 *
 * @export
 * @interface EventTypeSettingsValue
 */
export interface EventTypeSettingsValue {
    /**
     *
     * @type {{ [key: string]: boolean; }}
     * @memberof EventTypeSettingsValue
     */
    'emailSubscriptionTypes'?: { [key: string]: boolean; };
    /**
     *
     * @type {boolean}
     * @memberof EventTypeSettingsValue
     */
    'hasForcedEmail'?: boolean;
}
/**
 *
 * @export
 * @interface Facet
 */
export interface Facet {
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    'displayName': string;
    /**
     *
     * @type {Array<Facet>}
     * @memberof Facet
     */
    'children'?: Array<Facet>;
}
/**
 *
 * @export
 * @enum {string}
 */

export const HttpType = {
    Get: 'GET',
    Post: 'POST',
    Put: 'PUT'
} as const;

export type HttpType = typeof HttpType[keyof typeof HttpType];


/**
 *
 * @export
 * @interface InstantEmailTemplate
 */
export interface InstantEmailTemplate {
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'id'?: string;
    /**
     *
     * @type {EventType}
     * @memberof InstantEmailTemplate
     */
    'event_type'?: EventType;
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'event_type_id'?: string;
    /**
     *
     * @type {Template}
     * @memberof InstantEmailTemplate
     */
    'subject_template'?: Template;
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'subject_template_id': string;
    /**
     *
     * @type {Template}
     * @memberof InstantEmailTemplate
     */
    'body_template'?: Template;
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'body_template_id': string;
}
/**
 *
 * @export
 * @interface InternalApplicationUserPermission
 */
export interface InternalApplicationUserPermission {
    /**
     *
     * @type {string}
     * @memberof InternalApplicationUserPermission
     */
    'application_id': string;
    /**
     *
     * @type {string}
     * @memberof InternalApplicationUserPermission
     */
    'application_display_name': string;
    /**
     *
     * @type {string}
     * @memberof InternalApplicationUserPermission
     */
    'role': string;
}
/**
 *
 * @export
 * @interface InternalRoleAccess
 */
export interface InternalRoleAccess {
    /**
     *
     * @type {string}
     * @memberof InternalRoleAccess
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof InternalRoleAccess
     */
    'role': string;
    /**
     *
     * @type {string}
     * @memberof InternalRoleAccess
     */
    'application_id': string;
}
/**
 *
 * @export
 * @interface InternalUserPermissions
 */
export interface InternalUserPermissions {
    /**
     *
     * @type {boolean}
     * @memberof InternalUserPermissions
     */
    'is_admin': boolean;
    /**
     *
     * @type {Array<Application1>}
     * @memberof InternalUserPermissions
     */
    'applications': Array<Application1>;
    /**
     *
     * @type {Array<string>}
     * @memberof InternalUserPermissions
     */
    'roles': Array<string>;
}
/**
 *
 * @export
 * @interface MessageValidationResponse
 */
export interface MessageValidationResponse {
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof MessageValidationResponse
     */
    'errors': { [key: string]: Array<string>; };
}
/**
 *
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     *
     * @type {number}
     * @memberof Meta
     */
    'count': number;
}
/**
 *
 * @export
 * @interface NotificationHistory
 */
export interface NotificationHistory {
    /**
     *
     * @type {string}
     * @memberof NotificationHistory
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationHistory
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof NotificationHistory
     */
    'invocationTime': number;
    /**
     *
     * @type {boolean}
     * @memberof NotificationHistory
     * @deprecated
     */
    'invocationResult': boolean;
    /**
     *
     * @type {NotificationStatus}
     * @memberof NotificationHistory
     */
    'status': NotificationStatus;
    /**
     *
     * @type {string}
     * @memberof NotificationHistory
     */
    'endpointId'?: string;
    /**
     *
     * @type {{ [key: string]: any; }}
     * @memberof NotificationHistory
     */
    'details'?: { [key: string]: any; };
    /**
     *
     * @type {EndpointType}
     * @memberof NotificationHistory
     */
    'endpointType'?: EndpointType;
    /**
     *
     * @type {string}
     * @memberof NotificationHistory
     */
    'endpointSubType'?: string;
}


/**
 *
 * @export
 * @enum {string}
 */

export const NotificationStatus = {
    FailedInternal: 'FAILED_INTERNAL',
    FailedExternal: 'FAILED_EXTERNAL',
    Processing: 'PROCESSING',
    Sent: 'SENT',
    Success: 'SUCCESS'
} as const;

export type NotificationStatus = typeof NotificationStatus[keyof typeof NotificationStatus];


/**
 *
 * @export
 * @interface PageBehaviorGroup
 */
export interface PageBehaviorGroup {
    /**
     *
     * @type {Array<BehaviorGroup>}
     * @memberof PageBehaviorGroup
     */
    'data': Array<BehaviorGroup>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PageBehaviorGroup
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof PageBehaviorGroup
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @interface PageDrawerEntryPayload
 */
export interface PageDrawerEntryPayload {
    /**
     *
     * @type {Array<DrawerEntryPayload>}
     * @memberof PageDrawerEntryPayload
     */
    'data': Array<DrawerEntryPayload>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PageDrawerEntryPayload
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof PageDrawerEntryPayload
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @interface PageEventLogEntry
 */
export interface PageEventLogEntry {
    /**
     *
     * @type {Array<EventLogEntry>}
     * @memberof PageEventLogEntry
     */
    'data': Array<EventLogEntry>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PageEventLogEntry
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof PageEventLogEntry
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @interface PageEventType
 */
export interface PageEventType {
    /**
     *
     * @type {Array<EventType>}
     * @memberof PageEventType
     */
    'data': Array<EventType>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PageEventType
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof PageEventType
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @interface PageNotificationHistory
 */
export interface PageNotificationHistory {
    /**
     *
     * @type {Array<NotificationHistory>}
     * @memberof PageNotificationHistory
     */
    'data': Array<NotificationHistory>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PageNotificationHistory
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof PageNotificationHistory
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @interface RenderEmailTemplateRequest
 */
export interface RenderEmailTemplateRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof RenderEmailTemplateRequest
     */
    'template': Array<string>;
    /**
     *
     * @type {string}
     * @memberof RenderEmailTemplateRequest
     */
    'payload': string;
}
/**
 *
 * @export
 * @interface RequestDefaultBehaviorGroupPropertyList
 */
export interface RequestDefaultBehaviorGroupPropertyList {
    /**
     *
     * @type {boolean}
     * @memberof RequestDefaultBehaviorGroupPropertyList
     */
    'only_admins': boolean;
    /**
     *
     * @type {boolean}
     * @memberof RequestDefaultBehaviorGroupPropertyList
     */
    'ignore_preferences': boolean;
}
/**
 *
 * @export
 * @interface RequestSystemSubscriptionProperties
 */
export interface RequestSystemSubscriptionProperties {
    /**
     *
     * @type {boolean}
     * @memberof RequestSystemSubscriptionProperties
     */
    'only_admins': boolean;
    /**
     *
     * @type {string}
     * @memberof RequestSystemSubscriptionProperties
     */
    'group_id'?: string;
}
/**
 *
 * @export
 * @interface ServerInfo
 */
export interface ServerInfo {
    /**
     *
     * @type {Environment}
     * @memberof ServerInfo
     */
    'environment'?: Environment;
}


/**
 *
 * @export
 * @interface SettingsValuesByEventType
 */
export interface SettingsValuesByEventType {
    /**
     *
     * @type {{ [key: string]: BundleSettingsValue; }}
     * @memberof SettingsValuesByEventType
     */
    'bundles'?: { [key: string]: BundleSettingsValue; };
}
/**
 *
 * @export
 * @enum {string}
 */

export const Status = {
    Up: 'UP',
    Maintenance: 'MAINTENANCE'
} as const;

export type Status = typeof Status[keyof typeof Status];


/**
 *
 * @export
 * @interface SystemSubscriptionProperties
 */
export interface SystemSubscriptionProperties {
    /**
     *
     * @type {boolean}
     * @memberof SystemSubscriptionProperties
     */
    'only_admins': boolean;
    /**
     *
     * @type {boolean}
     * @memberof SystemSubscriptionProperties
     */
    'ignore_preferences': boolean;
    /**
     *
     * @type {string}
     * @memberof SystemSubscriptionProperties
     */
    'group_id'?: string;
}
/**
 *
 * @export
 * @interface Template
 */
export interface Template {
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'data': string;
}
/**
 *
 * @export
 * @interface TriggerDailyDigestRequest
 */
export interface TriggerDailyDigestRequest {
    /**
     *
     * @type {string}
     * @memberof TriggerDailyDigestRequest
     */
    'application_name': string;
    /**
     *
     * @type {string}
     * @memberof TriggerDailyDigestRequest
     */
    'bundle_name': string;
    /**
     *
     * @type {string}
     * @memberof TriggerDailyDigestRequest
     */
    'end'?: string;
    /**
     *
     * @type {string}
     * @memberof TriggerDailyDigestRequest
     */
    'org_id': string;
    /**
     *
     * @type {string}
     * @memberof TriggerDailyDigestRequest
     */
    'start'?: string;
}
/**
 *
 * @export
 * @interface UpdateBehaviorGroupRequest
 */
export interface UpdateBehaviorGroupRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateBehaviorGroupRequest
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateBehaviorGroupRequest
     */
    'endpoint_ids'?: Array<string>;
    /**
     *
     * @type {Set<string>}
     * @memberof UpdateBehaviorGroupRequest
     */
    'event_type_ids'?: Set<string>;
    /**
     *
     * @type {boolean}
     * @memberof UpdateBehaviorGroupRequest
     */
    'display_name_not_null_and_blank'?: boolean;
}
/**
 *
 * @export
 * @interface UpdateNotificationDrawerStatus
 */
export interface UpdateNotificationDrawerStatus {
    /**
     *
     * @type {Set<string>}
     * @memberof UpdateNotificationDrawerStatus
     */
    'notification_ids': Set<string>;
    /**
     *
     * @type {boolean}
     * @memberof UpdateNotificationDrawerStatus
     */
    'read_status': boolean;
}
/**
 *
 * @export
 * @interface WebhookProperties
 */
export interface WebhookProperties {
    /**
     *
     * @type {string}
     * @memberof WebhookProperties
     */
    'url': string;
    /**
     *
     * @type {HttpType}
     * @memberof WebhookProperties
     */
    'method': HttpType;
    /**
     *
     * @type {boolean}
     * @memberof WebhookProperties
     */
    'disable_ssl_verification': boolean;
    /**
     *
     * @type {string}
     * @memberof WebhookProperties
     */
    'secret_token'?: string;
    /**
     *
     * @type {BasicAuthentication}
     * @memberof WebhookProperties
     */
    'basic_authentication'?: BasicAuthentication;
}



/**
 * DrawerResourceV1GetDrawerEntriesApi - axios parameter creator
 * @export
 */
export const DrawerResourceV1GetDrawerEntriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Allowed `sort_by` fields are `bundleIds`, `applicationIds`, `eventTypeIds`, `startTime`, `endTime` and `read`. The ordering can be optionally specified by appending `:asc` or `:desc` to the field, e.g. `bundle:desc`. Defaults to `desc` for the `created` field and to `asc` for all other fields.
         * @summary Retrieve drawer notifications entries.
         * @param {Set<string>} [appIds]
         * @param {Set<string>} [bundleIds]
         * @param {string} [endDate]
         * @param {Set<string>} [eventTypeIds]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {boolean} [readStatus]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {string} [startDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drawerResourceV1GetDrawerEntries: async (appIds?: Set<string>, bundleIds?: Set<string>, endDate?: string, eventTypeIds?: Set<string>, limit?: number, offset?: number, pageNumber?: number, readStatus?: boolean, sortBy?: string, sortBy2?: string, startDate?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/drawer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appIds) {
                localVarQueryParameter['appIds'] = Array.from(appIds);
            }

            if (bundleIds) {
                localVarQueryParameter['bundleIds'] = Array.from(bundleIds);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (eventTypeIds) {
                localVarQueryParameter['eventTypeIds'] = Array.from(eventTypeIds);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (readStatus !== undefined) {
                localVarQueryParameter['readStatus'] = readStatus;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortBy2 !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy2;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrawerResourceV1GetDrawerEntriesApi - functional programming interface
 * @export
 */
export const DrawerResourceV1GetDrawerEntriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DrawerResourceV1GetDrawerEntriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Allowed `sort_by` fields are `bundleIds`, `applicationIds`, `eventTypeIds`, `startTime`, `endTime` and `read`. The ordering can be optionally specified by appending `:asc` or `:desc` to the field, e.g. `bundle:desc`. Defaults to `desc` for the `created` field and to `asc` for all other fields.
         * @summary Retrieve drawer notifications entries.
         * @param {Set<string>} [appIds]
         * @param {Set<string>} [bundleIds]
         * @param {string} [endDate]
         * @param {Set<string>} [eventTypeIds]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {boolean} [readStatus]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {string} [startDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drawerResourceV1GetDrawerEntries(appIds?: Set<string>, bundleIds?: Set<string>, endDate?: string, eventTypeIds?: Set<string>, limit?: number, offset?: number, pageNumber?: number, readStatus?: boolean, sortBy?: string, sortBy2?: string, startDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageDrawerEntryPayload>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.drawerResourceV1GetDrawerEntries(appIds, bundleIds, endDate, eventTypeIds, limit, offset, pageNumber, readStatus, sortBy, sortBy2, startDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DrawerResourceV1GetDrawerEntriesApi - factory interface
 * @export
 */
export const DrawerResourceV1GetDrawerEntriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DrawerResourceV1GetDrawerEntriesApiFp(configuration)
    return {
        /**
         * Allowed `sort_by` fields are `bundleIds`, `applicationIds`, `eventTypeIds`, `startTime`, `endTime` and `read`. The ordering can be optionally specified by appending `:asc` or `:desc` to the field, e.g. `bundle:desc`. Defaults to `desc` for the `created` field and to `asc` for all other fields.
         * @summary Retrieve drawer notifications entries.
         * @param {Set<string>} [appIds]
         * @param {Set<string>} [bundleIds]
         * @param {string} [endDate]
         * @param {Set<string>} [eventTypeIds]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {boolean} [readStatus]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {string} [startDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drawerResourceV1GetDrawerEntries(appIds?: Set<string>, bundleIds?: Set<string>, endDate?: string, eventTypeIds?: Set<string>, limit?: number, offset?: number, pageNumber?: number, readStatus?: boolean, sortBy?: string, sortBy2?: string, startDate?: string, options?: any): AxiosPromise<PageDrawerEntryPayload> {
            return localVarFp.drawerResourceV1GetDrawerEntries(appIds, bundleIds, endDate, eventTypeIds, limit, offset, pageNumber, readStatus, sortBy, sortBy2, startDate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DrawerResourceV1GetDrawerEntriesApi - object-oriented interface
 * @export
 * @class DrawerResourceV1GetDrawerEntriesApi
 * @extends {BaseAPI}
 */
export class DrawerResourceV1GetDrawerEntriesApi extends BaseAPI {
    /**
     * Allowed `sort_by` fields are `bundleIds`, `applicationIds`, `eventTypeIds`, `startTime`, `endTime` and `read`. The ordering can be optionally specified by appending `:asc` or `:desc` to the field, e.g. `bundle:desc`. Defaults to `desc` for the `created` field and to `asc` for all other fields.
     * @summary Retrieve drawer notifications entries.
     * @param {Set<string>} [appIds]
     * @param {Set<string>} [bundleIds]
     * @param {string} [endDate]
     * @param {Set<string>} [eventTypeIds]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {boolean} [readStatus]
     * @param {string} [sortBy]
     * @param {string} [sortBy2]
     * @param {string} [startDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrawerResourceV1GetDrawerEntriesApi
     */
    public drawerResourceV1GetDrawerEntries(appIds?: Set<string>, bundleIds?: Set<string>, endDate?: string, eventTypeIds?: Set<string>, limit?: number, offset?: number, pageNumber?: number, readStatus?: boolean, sortBy?: string, sortBy2?: string, startDate?: string, options?: AxiosRequestConfig) {
        return DrawerResourceV1GetDrawerEntriesApiFp(this.configuration).drawerResourceV1GetDrawerEntries(appIds, bundleIds, endDate, eventTypeIds, limit, offset, pageNumber, readStatus, sortBy, sortBy2, startDate, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DrawerResourceV1UpdateNotificationReadStatusApi - axios parameter creator
 * @export
 */
export const DrawerResourceV1UpdateNotificationReadStatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update drawer notifications status.
         * @summary Update drawer notifications status.
         * @param {UpdateNotificationDrawerStatus} [updateNotificationDrawerStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drawerResourceV1UpdateNotificationReadStatus: async (updateNotificationDrawerStatus?: UpdateNotificationDrawerStatus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/drawer/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateNotificationDrawerStatus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DrawerResourceV1UpdateNotificationReadStatusApi - functional programming interface
 * @export
 */
export const DrawerResourceV1UpdateNotificationReadStatusApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DrawerResourceV1UpdateNotificationReadStatusApiAxiosParamCreator(configuration)
    return {
        /**
         * Update drawer notifications status.
         * @summary Update drawer notifications status.
         * @param {UpdateNotificationDrawerStatus} [updateNotificationDrawerStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async drawerResourceV1UpdateNotificationReadStatus(updateNotificationDrawerStatus?: UpdateNotificationDrawerStatus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.drawerResourceV1UpdateNotificationReadStatus(updateNotificationDrawerStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DrawerResourceV1UpdateNotificationReadStatusApi - factory interface
 * @export
 */
export const DrawerResourceV1UpdateNotificationReadStatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DrawerResourceV1UpdateNotificationReadStatusApiFp(configuration)
    return {
        /**
         * Update drawer notifications status.
         * @summary Update drawer notifications status.
         * @param {UpdateNotificationDrawerStatus} [updateNotificationDrawerStatus]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        drawerResourceV1UpdateNotificationReadStatus(updateNotificationDrawerStatus?: UpdateNotificationDrawerStatus, options?: any): AxiosPromise<number> {
            return localVarFp.drawerResourceV1UpdateNotificationReadStatus(updateNotificationDrawerStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DrawerResourceV1UpdateNotificationReadStatusApi - object-oriented interface
 * @export
 * @class DrawerResourceV1UpdateNotificationReadStatusApi
 * @extends {BaseAPI}
 */
export class DrawerResourceV1UpdateNotificationReadStatusApi extends BaseAPI {
    /**
     * Update drawer notifications status.
     * @summary Update drawer notifications status.
     * @param {UpdateNotificationDrawerStatus} [updateNotificationDrawerStatus]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DrawerResourceV1UpdateNotificationReadStatusApi
     */
    public drawerResourceV1UpdateNotificationReadStatus(updateNotificationDrawerStatus?: UpdateNotificationDrawerStatus, options?: AxiosRequestConfig) {
        return DrawerResourceV1UpdateNotificationReadStatusApiFp(this.configuration).drawerResourceV1UpdateNotificationReadStatus(updateNotificationDrawerStatus, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventResourceV1GetEventsApi - axios parameter creator
 * @export
 */
export const EventResourceV1GetEventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the event log entries. Use this endpoint to review a full history of the events related to the tenant. You can sort by the bundle, application, event, and created fields. You can specify the sort order by appending :asc or :desc to the field, for example bundle:desc. Sorting defaults to desc for the created field and to asc for all other fields.
         * @summary Retrieve the event log entries
         * @param {Set<string>} [appIds]
         * @param {Set<string>} [bundleIds]
         * @param {string} [endDate]
         * @param {Set<string>} [endpointTypes]
         * @param {string} [eventTypeDisplayName]
         * @param {boolean} [includeActions]
         * @param {boolean} [includeDetails]
         * @param {boolean} [includePayload]
         * @param {Set<boolean>} [invocationResults]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {string} [startDate]
         * @param {Set<EventLogEntryActionStatus>} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventResourceV1GetEvents: async (appIds?: Set<string>, bundleIds?: Set<string>, endDate?: string, endpointTypes?: Set<string>, eventTypeDisplayName?: string, includeActions?: boolean, includeDetails?: boolean, includePayload?: boolean, invocationResults?: Set<boolean>, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, startDate?: string, status?: Set<EventLogEntryActionStatus>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (appIds) {
                localVarQueryParameter['appIds'] = Array.from(appIds);
            }

            if (bundleIds) {
                localVarQueryParameter['bundleIds'] = Array.from(bundleIds);
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }

            if (endpointTypes) {
                localVarQueryParameter['endpointTypes'] = Array.from(endpointTypes);
            }

            if (eventTypeDisplayName !== undefined) {
                localVarQueryParameter['eventTypeDisplayName'] = eventTypeDisplayName;
            }

            if (includeActions !== undefined) {
                localVarQueryParameter['includeActions'] = includeActions;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }

            if (includePayload !== undefined) {
                localVarQueryParameter['includePayload'] = includePayload;
            }

            if (invocationResults) {
                localVarQueryParameter['invocationResults'] = Array.from(invocationResults);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortBy2 !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy2;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (status) {
                localVarQueryParameter['status'] = Array.from(status);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventResourceV1GetEventsApi - functional programming interface
 * @export
 */
export const EventResourceV1GetEventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventResourceV1GetEventsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the event log entries. Use this endpoint to review a full history of the events related to the tenant. You can sort by the bundle, application, event, and created fields. You can specify the sort order by appending :asc or :desc to the field, for example bundle:desc. Sorting defaults to desc for the created field and to asc for all other fields.
         * @summary Retrieve the event log entries
         * @param {Set<string>} [appIds]
         * @param {Set<string>} [bundleIds]
         * @param {string} [endDate]
         * @param {Set<string>} [endpointTypes]
         * @param {string} [eventTypeDisplayName]
         * @param {boolean} [includeActions]
         * @param {boolean} [includeDetails]
         * @param {boolean} [includePayload]
         * @param {Set<boolean>} [invocationResults]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {string} [startDate]
         * @param {Set<EventLogEntryActionStatus>} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eventResourceV1GetEvents(appIds?: Set<string>, bundleIds?: Set<string>, endDate?: string, endpointTypes?: Set<string>, eventTypeDisplayName?: string, includeActions?: boolean, includeDetails?: boolean, includePayload?: boolean, invocationResults?: Set<boolean>, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, startDate?: string, status?: Set<EventLogEntryActionStatus>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageEventLogEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eventResourceV1GetEvents(appIds, bundleIds, endDate, endpointTypes, eventTypeDisplayName, includeActions, includeDetails, includePayload, invocationResults, limit, offset, pageNumber, sortBy, sortBy2, startDate, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventResourceV1GetEventsApi - factory interface
 * @export
 */
export const EventResourceV1GetEventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventResourceV1GetEventsApiFp(configuration)
    return {
        /**
         * Retrieves the event log entries. Use this endpoint to review a full history of the events related to the tenant. You can sort by the bundle, application, event, and created fields. You can specify the sort order by appending :asc or :desc to the field, for example bundle:desc. Sorting defaults to desc for the created field and to asc for all other fields.
         * @summary Retrieve the event log entries
         * @param {Set<string>} [appIds]
         * @param {Set<string>} [bundleIds]
         * @param {string} [endDate]
         * @param {Set<string>} [endpointTypes]
         * @param {string} [eventTypeDisplayName]
         * @param {boolean} [includeActions]
         * @param {boolean} [includeDetails]
         * @param {boolean} [includePayload]
         * @param {Set<boolean>} [invocationResults]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {string} [startDate]
         * @param {Set<EventLogEntryActionStatus>} [status]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eventResourceV1GetEvents(appIds?: Set<string>, bundleIds?: Set<string>, endDate?: string, endpointTypes?: Set<string>, eventTypeDisplayName?: string, includeActions?: boolean, includeDetails?: boolean, includePayload?: boolean, invocationResults?: Set<boolean>, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, startDate?: string, status?: Set<EventLogEntryActionStatus>, options?: any): AxiosPromise<PageEventLogEntry> {
            return localVarFp.eventResourceV1GetEvents(appIds, bundleIds, endDate, endpointTypes, eventTypeDisplayName, includeActions, includeDetails, includePayload, invocationResults, limit, offset, pageNumber, sortBy, sortBy2, startDate, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventResourceV1GetEventsApi - object-oriented interface
 * @export
 * @class EventResourceV1GetEventsApi
 * @extends {BaseAPI}
 */
export class EventResourceV1GetEventsApi extends BaseAPI {
    /**
     * Retrieves the event log entries. Use this endpoint to review a full history of the events related to the tenant. You can sort by the bundle, application, event, and created fields. You can specify the sort order by appending :asc or :desc to the field, for example bundle:desc. Sorting defaults to desc for the created field and to asc for all other fields.
     * @summary Retrieve the event log entries
     * @param {Set<string>} [appIds]
     * @param {Set<string>} [bundleIds]
     * @param {string} [endDate]
     * @param {Set<string>} [endpointTypes]
     * @param {string} [eventTypeDisplayName]
     * @param {boolean} [includeActions]
     * @param {boolean} [includeDetails]
     * @param {boolean} [includePayload]
     * @param {Set<boolean>} [invocationResults]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {string} [sortBy]
     * @param {string} [sortBy2]
     * @param {string} [startDate]
     * @param {Set<EventLogEntryActionStatus>} [status]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventResourceV1GetEventsApi
     */
    public eventResourceV1GetEvents(appIds?: Set<string>, bundleIds?: Set<string>, endDate?: string, endpointTypes?: Set<string>, eventTypeDisplayName?: string, includeActions?: boolean, includeDetails?: boolean, includePayload?: boolean, invocationResults?: Set<boolean>, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, startDate?: string, status?: Set<EventLogEntryActionStatus>, options?: AxiosRequestConfig) {
        return EventResourceV1GetEventsApiFp(this.configuration).eventResourceV1GetEvents(appIds, bundleIds, endDate, endpointTypes, eventTypeDisplayName, includeActions, includeDetails, includePayload, invocationResults, limit, offset, pageNumber, sortBy, sortBy2, startDate, status, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1AppendBehaviorGroupToEventTypeApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1AppendBehaviorGroupToEventTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add a behavior group to the given event type.
         * @param {string} behaviorGroupUuid
         * @param {string} eventTypeUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1AppendBehaviorGroupToEventType: async (behaviorGroupUuid: string, eventTypeUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'behaviorGroupUuid' is not null or undefined
            assertParamExists('notificationResourceV1AppendBehaviorGroupToEventType', 'behaviorGroupUuid', behaviorGroupUuid)
            // verify required parameter 'eventTypeUuid' is not null or undefined
            assertParamExists('notificationResourceV1AppendBehaviorGroupToEventType', 'eventTypeUuid', eventTypeUuid)
            const localVarPath = `/notifications/eventTypes/{eventTypeUuid}/behaviorGroups/{behaviorGroupUuid}`
                .replace(`{${"behaviorGroupUuid"}}`, encodeURIComponent(String(behaviorGroupUuid)))
                .replace(`{${"eventTypeUuid"}}`, encodeURIComponent(String(eventTypeUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1AppendBehaviorGroupToEventTypeApi - functional programming interface
 * @export
 */
export const NotificationResourceV1AppendBehaviorGroupToEventTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1AppendBehaviorGroupToEventTypeApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Add a behavior group to the given event type.
         * @param {string} behaviorGroupUuid
         * @param {string} eventTypeUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1AppendBehaviorGroupToEventType(behaviorGroupUuid: string, eventTypeUuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1AppendBehaviorGroupToEventType(behaviorGroupUuid, eventTypeUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1AppendBehaviorGroupToEventTypeApi - factory interface
 * @export
 */
export const NotificationResourceV1AppendBehaviorGroupToEventTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1AppendBehaviorGroupToEventTypeApiFp(configuration)
    return {
        /**
         *
         * @summary Add a behavior group to the given event type.
         * @param {string} behaviorGroupUuid
         * @param {string} eventTypeUuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1AppendBehaviorGroupToEventType(behaviorGroupUuid: string, eventTypeUuid: string, options?: any): AxiosPromise<void> {
            return localVarFp.notificationResourceV1AppendBehaviorGroupToEventType(behaviorGroupUuid, eventTypeUuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1AppendBehaviorGroupToEventTypeApi - object-oriented interface
 * @export
 * @class NotificationResourceV1AppendBehaviorGroupToEventTypeApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1AppendBehaviorGroupToEventTypeApi extends BaseAPI {
    /**
     *
     * @summary Add a behavior group to the given event type.
     * @param {string} behaviorGroupUuid
     * @param {string} eventTypeUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1AppendBehaviorGroupToEventTypeApi
     */
    public notificationResourceV1AppendBehaviorGroupToEventType(behaviorGroupUuid: string, eventTypeUuid: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1AppendBehaviorGroupToEventTypeApiFp(this.configuration).notificationResourceV1AppendBehaviorGroupToEventType(behaviorGroupUuid, eventTypeUuid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1CreateBehaviorGroupApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1CreateBehaviorGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a behavior group that defines which notifications will be sent to external services after an event is received. Use this endpoint to control the types of events users are notified about.
         * @summary Create a behavior group
         * @param {CreateBehaviorGroupRequest} createBehaviorGroupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1CreateBehaviorGroup: async (createBehaviorGroupRequest: CreateBehaviorGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createBehaviorGroupRequest' is not null or undefined
            assertParamExists('notificationResourceV1CreateBehaviorGroup', 'createBehaviorGroupRequest', createBehaviorGroupRequest)
            const localVarPath = `/notifications/behaviorGroups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createBehaviorGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1CreateBehaviorGroupApi - functional programming interface
 * @export
 */
export const NotificationResourceV1CreateBehaviorGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1CreateBehaviorGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a behavior group that defines which notifications will be sent to external services after an event is received. Use this endpoint to control the types of events users are notified about.
         * @summary Create a behavior group
         * @param {CreateBehaviorGroupRequest} createBehaviorGroupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1CreateBehaviorGroup(createBehaviorGroupRequest: CreateBehaviorGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateBehaviorGroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1CreateBehaviorGroup(createBehaviorGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1CreateBehaviorGroupApi - factory interface
 * @export
 */
export const NotificationResourceV1CreateBehaviorGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1CreateBehaviorGroupApiFp(configuration)
    return {
        /**
         * Creates a behavior group that defines which notifications will be sent to external services after an event is received. Use this endpoint to control the types of events users are notified about.
         * @summary Create a behavior group
         * @param {CreateBehaviorGroupRequest} createBehaviorGroupRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1CreateBehaviorGroup(createBehaviorGroupRequest: CreateBehaviorGroupRequest, options?: any): AxiosPromise<CreateBehaviorGroupResponse> {
            return localVarFp.notificationResourceV1CreateBehaviorGroup(createBehaviorGroupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1CreateBehaviorGroupApi - object-oriented interface
 * @export
 * @class NotificationResourceV1CreateBehaviorGroupApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1CreateBehaviorGroupApi extends BaseAPI {
    /**
     * Creates a behavior group that defines which notifications will be sent to external services after an event is received. Use this endpoint to control the types of events users are notified about.
     * @summary Create a behavior group
     * @param {CreateBehaviorGroupRequest} createBehaviorGroupRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1CreateBehaviorGroupApi
     */
    public notificationResourceV1CreateBehaviorGroup(createBehaviorGroupRequest: CreateBehaviorGroupRequest, options?: AxiosRequestConfig) {
        return NotificationResourceV1CreateBehaviorGroupApiFp(this.configuration).notificationResourceV1CreateBehaviorGroup(createBehaviorGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1DeleteBehaviorGroupApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1DeleteBehaviorGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a behavior group and all of its configured actions. Use this endpoint when you no longer need a behavior group.
         * @summary Delete a behavior group
         * @param {string} id The UUID of the behavior group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1DeleteBehaviorGroup: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationResourceV1DeleteBehaviorGroup', 'id', id)
            const localVarPath = `/notifications/behaviorGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1DeleteBehaviorGroupApi - functional programming interface
 * @export
 */
export const NotificationResourceV1DeleteBehaviorGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1DeleteBehaviorGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes a behavior group and all of its configured actions. Use this endpoint when you no longer need a behavior group.
         * @summary Delete a behavior group
         * @param {string} id The UUID of the behavior group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1DeleteBehaviorGroup(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1DeleteBehaviorGroup(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1DeleteBehaviorGroupApi - factory interface
 * @export
 */
export const NotificationResourceV1DeleteBehaviorGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1DeleteBehaviorGroupApiFp(configuration)
    return {
        /**
         * Deletes a behavior group and all of its configured actions. Use this endpoint when you no longer need a behavior group.
         * @summary Delete a behavior group
         * @param {string} id The UUID of the behavior group to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1DeleteBehaviorGroup(id: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.notificationResourceV1DeleteBehaviorGroup(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1DeleteBehaviorGroupApi - object-oriented interface
 * @export
 * @class NotificationResourceV1DeleteBehaviorGroupApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1DeleteBehaviorGroupApi extends BaseAPI {
    /**
     * Deletes a behavior group and all of its configured actions. Use this endpoint when you no longer need a behavior group.
     * @summary Delete a behavior group
     * @param {string} id The UUID of the behavior group to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1DeleteBehaviorGroupApi
     */
    public notificationResourceV1DeleteBehaviorGroup(id: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1DeleteBehaviorGroupApiFp(this.configuration).notificationResourceV1DeleteBehaviorGroup(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1DeleteBehaviorGroupFromEventTypeApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1DeleteBehaviorGroupFromEventTypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds a behavior group to the specified event type.
         * @summary Add a behavior group to an event type
         * @param {string} behaviorGroupId
         * @param {string} eventTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1DeleteBehaviorGroupFromEventType: async (behaviorGroupId: string, eventTypeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'behaviorGroupId' is not null or undefined
            assertParamExists('notificationResourceV1DeleteBehaviorGroupFromEventType', 'behaviorGroupId', behaviorGroupId)
            // verify required parameter 'eventTypeId' is not null or undefined
            assertParamExists('notificationResourceV1DeleteBehaviorGroupFromEventType', 'eventTypeId', eventTypeId)
            const localVarPath = `/notifications/eventTypes/{eventTypeId}/behaviorGroups/{behaviorGroupId}`
                .replace(`{${"behaviorGroupId"}}`, encodeURIComponent(String(behaviorGroupId)))
                .replace(`{${"eventTypeId"}}`, encodeURIComponent(String(eventTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1DeleteBehaviorGroupFromEventTypeApi - functional programming interface
 * @export
 */
export const NotificationResourceV1DeleteBehaviorGroupFromEventTypeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1DeleteBehaviorGroupFromEventTypeApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds a behavior group to the specified event type.
         * @summary Add a behavior group to an event type
         * @param {string} behaviorGroupId
         * @param {string} eventTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1DeleteBehaviorGroupFromEventType(behaviorGroupId: string, eventTypeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1DeleteBehaviorGroupFromEventType(behaviorGroupId, eventTypeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1DeleteBehaviorGroupFromEventTypeApi - factory interface
 * @export
 */
export const NotificationResourceV1DeleteBehaviorGroupFromEventTypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1DeleteBehaviorGroupFromEventTypeApiFp(configuration)
    return {
        /**
         * Adds a behavior group to the specified event type.
         * @summary Add a behavior group to an event type
         * @param {string} behaviorGroupId
         * @param {string} eventTypeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1DeleteBehaviorGroupFromEventType(behaviorGroupId: string, eventTypeId: string, options?: any): AxiosPromise<void> {
            return localVarFp.notificationResourceV1DeleteBehaviorGroupFromEventType(behaviorGroupId, eventTypeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1DeleteBehaviorGroupFromEventTypeApi - object-oriented interface
 * @export
 * @class NotificationResourceV1DeleteBehaviorGroupFromEventTypeApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1DeleteBehaviorGroupFromEventTypeApi extends BaseAPI {
    /**
     * Adds a behavior group to the specified event type.
     * @summary Add a behavior group to an event type
     * @param {string} behaviorGroupId
     * @param {string} eventTypeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1DeleteBehaviorGroupFromEventTypeApi
     */
    public notificationResourceV1DeleteBehaviorGroupFromEventType(behaviorGroupId: string, eventTypeId: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1DeleteBehaviorGroupFromEventTypeApiFp(this.configuration).notificationResourceV1DeleteBehaviorGroupFromEventType(behaviorGroupId, eventTypeId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1FindBehaviorGroupsByBundleIdApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1FindBehaviorGroupsByBundleIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists the behavior groups associated with a bundle. Use this endpoint to see the behavior groups that are configured for a particular bundle for a particular tenant.
         * @summary List behavior groups in a bundle
         * @param {string} bundleId UUID of the bundle to retrieve the behavior groups for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1FindBehaviorGroupsByBundleId: async (bundleId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bundleId' is not null or undefined
            assertParamExists('notificationResourceV1FindBehaviorGroupsByBundleId', 'bundleId', bundleId)
            const localVarPath = `/notifications/bundles/{bundleId}/behaviorGroups`
                .replace(`{${"bundleId"}}`, encodeURIComponent(String(bundleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1FindBehaviorGroupsByBundleIdApi - functional programming interface
 * @export
 */
export const NotificationResourceV1FindBehaviorGroupsByBundleIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1FindBehaviorGroupsByBundleIdApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists the behavior groups associated with a bundle. Use this endpoint to see the behavior groups that are configured for a particular bundle for a particular tenant.
         * @summary List behavior groups in a bundle
         * @param {string} bundleId UUID of the bundle to retrieve the behavior groups for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1FindBehaviorGroupsByBundleId(bundleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BehaviorGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1FindBehaviorGroupsByBundleId(bundleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1FindBehaviorGroupsByBundleIdApi - factory interface
 * @export
 */
export const NotificationResourceV1FindBehaviorGroupsByBundleIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1FindBehaviorGroupsByBundleIdApiFp(configuration)
    return {
        /**
         * Lists the behavior groups associated with a bundle. Use this endpoint to see the behavior groups that are configured for a particular bundle for a particular tenant.
         * @summary List behavior groups in a bundle
         * @param {string} bundleId UUID of the bundle to retrieve the behavior groups for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1FindBehaviorGroupsByBundleId(bundleId: string, options?: any): AxiosPromise<Array<BehaviorGroup>> {
            return localVarFp.notificationResourceV1FindBehaviorGroupsByBundleId(bundleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1FindBehaviorGroupsByBundleIdApi - object-oriented interface
 * @export
 * @class NotificationResourceV1FindBehaviorGroupsByBundleIdApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1FindBehaviorGroupsByBundleIdApi extends BaseAPI {
    /**
     * Lists the behavior groups associated with a bundle. Use this endpoint to see the behavior groups that are configured for a particular bundle for a particular tenant.
     * @summary List behavior groups in a bundle
     * @param {string} bundleId UUID of the bundle to retrieve the behavior groups for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1FindBehaviorGroupsByBundleIdApi
     */
    public notificationResourceV1FindBehaviorGroupsByBundleId(bundleId: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1FindBehaviorGroupsByBundleIdApiFp(this.configuration).notificationResourceV1FindBehaviorGroupsByBundleId(bundleId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1GetApplicationByNameAndBundleNameApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1GetApplicationByNameAndBundleNameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves an application by bundle and application names. Use this endpoint to  find an application by searching for the bundle that the application is part of. This is useful if you do not know the UUID of the bundle or application.
         * @summary Retrieve an application by bundle and application names
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetApplicationByNameAndBundleName: async (applicationName: string, bundleName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationName' is not null or undefined
            assertParamExists('notificationResourceV1GetApplicationByNameAndBundleName', 'applicationName', applicationName)
            // verify required parameter 'bundleName' is not null or undefined
            assertParamExists('notificationResourceV1GetApplicationByNameAndBundleName', 'bundleName', bundleName)
            const localVarPath = `/notifications/bundles/{bundleName}/applications/{applicationName}`
                .replace(`{${"applicationName"}}`, encodeURIComponent(String(applicationName)))
                .replace(`{${"bundleName"}}`, encodeURIComponent(String(bundleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1GetApplicationByNameAndBundleNameApi - functional programming interface
 * @export
 */
export const NotificationResourceV1GetApplicationByNameAndBundleNameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1GetApplicationByNameAndBundleNameApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves an application by bundle and application names. Use this endpoint to  find an application by searching for the bundle that the application is part of. This is useful if you do not know the UUID of the bundle or application.
         * @summary Retrieve an application by bundle and application names
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1GetApplicationByNameAndBundleName(applicationName: string, bundleName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1GetApplicationByNameAndBundleName(applicationName, bundleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1GetApplicationByNameAndBundleNameApi - factory interface
 * @export
 */
export const NotificationResourceV1GetApplicationByNameAndBundleNameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1GetApplicationByNameAndBundleNameApiFp(configuration)
    return {
        /**
         * Retrieves an application by bundle and application names. Use this endpoint to  find an application by searching for the bundle that the application is part of. This is useful if you do not know the UUID of the bundle or application.
         * @summary Retrieve an application by bundle and application names
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetApplicationByNameAndBundleName(applicationName: string, bundleName: string, options?: any): AxiosPromise<Application> {
            return localVarFp.notificationResourceV1GetApplicationByNameAndBundleName(applicationName, bundleName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1GetApplicationByNameAndBundleNameApi - object-oriented interface
 * @export
 * @class NotificationResourceV1GetApplicationByNameAndBundleNameApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1GetApplicationByNameAndBundleNameApi extends BaseAPI {
    /**
     * Retrieves an application by bundle and application names. Use this endpoint to  find an application by searching for the bundle that the application is part of. This is useful if you do not know the UUID of the bundle or application.
     * @summary Retrieve an application by bundle and application names
     * @param {string} applicationName
     * @param {string} bundleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1GetApplicationByNameAndBundleNameApi
     */
    public notificationResourceV1GetApplicationByNameAndBundleName(applicationName: string, bundleName: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1GetApplicationByNameAndBundleNameApiFp(this.configuration).notificationResourceV1GetApplicationByNameAndBundleName(applicationName, bundleName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1GetApplicationsFacetsApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1GetApplicationsFacetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of configured applications that includes the application name, the display name, and the ID. You can use this list to configure a filter in the UI.
         * @summary List configured applications
         * @param {string} [bundleName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetApplicationsFacets: async (bundleName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/facets/applications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (bundleName !== undefined) {
                localVarQueryParameter['bundleName'] = bundleName;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1GetApplicationsFacetsApi - functional programming interface
 * @export
 */
export const NotificationResourceV1GetApplicationsFacetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1GetApplicationsFacetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of configured applications that includes the application name, the display name, and the ID. You can use this list to configure a filter in the UI.
         * @summary List configured applications
         * @param {string} [bundleName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1GetApplicationsFacets(bundleName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Facet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1GetApplicationsFacets(bundleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1GetApplicationsFacetsApi - factory interface
 * @export
 */
export const NotificationResourceV1GetApplicationsFacetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1GetApplicationsFacetsApiFp(configuration)
    return {
        /**
         * Returns a list of configured applications that includes the application name, the display name, and the ID. You can use this list to configure a filter in the UI.
         * @summary List configured applications
         * @param {string} [bundleName]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetApplicationsFacets(bundleName?: string, options?: any): AxiosPromise<Array<Facet>> {
            return localVarFp.notificationResourceV1GetApplicationsFacets(bundleName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1GetApplicationsFacetsApi - object-oriented interface
 * @export
 * @class NotificationResourceV1GetApplicationsFacetsApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1GetApplicationsFacetsApi extends BaseAPI {
    /**
     * Returns a list of configured applications that includes the application name, the display name, and the ID. You can use this list to configure a filter in the UI.
     * @summary List configured applications
     * @param {string} [bundleName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1GetApplicationsFacetsApi
     */
    public notificationResourceV1GetApplicationsFacets(bundleName?: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1GetApplicationsFacetsApiFp(this.configuration).notificationResourceV1GetApplicationsFacets(bundleName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists the behavior groups that are affected by the removal of an endpoint. Use this endpoint to understand how removing an endpoint affects existing behavior groups.
         * @summary List the behavior groups affected by the removal of an endpoint
         * @param {string} endpointId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpoint: async (endpointId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpointId' is not null or undefined
            assertParamExists('notificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpoint', 'endpointId', endpointId)
            const localVarPath = `/notifications/behaviorGroups/affectedByRemovalOfEndpoint/{endpointId}`
                .replace(`{${"endpointId"}}`, encodeURIComponent(String(endpointId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApi - functional programming interface
 * @export
 */
export const NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists the behavior groups that are affected by the removal of an endpoint. Use this endpoint to understand how removing an endpoint affects existing behavior groups.
         * @summary List the behavior groups affected by the removal of an endpoint
         * @param {string} endpointId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpoint(endpointId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BehaviorGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpoint(endpointId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApi - factory interface
 * @export
 */
export const NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApiFp(configuration)
    return {
        /**
         * Lists the behavior groups that are affected by the removal of an endpoint. Use this endpoint to understand how removing an endpoint affects existing behavior groups.
         * @summary List the behavior groups affected by the removal of an endpoint
         * @param {string} endpointId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpoint(endpointId: string, options?: any): AxiosPromise<Array<BehaviorGroup>> {
            return localVarFp.notificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpoint(endpointId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApi - object-oriented interface
 * @export
 * @class NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApi extends BaseAPI {
    /**
     * Lists the behavior groups that are affected by the removal of an endpoint. Use this endpoint to understand how removing an endpoint affects existing behavior groups.
     * @summary List the behavior groups affected by the removal of an endpoint
     * @param {string} endpointId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApi
     */
    public notificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpoint(endpointId: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpointApiFp(this.configuration).notificationResourceV1GetBehaviorGroupsAffectedByRemovalOfEndpoint(endpointId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1GetBundleByNameApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1GetBundleByNameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the details of a bundle by searching by its name.
         * @summary Retrieve a bundle by name
         * @param {string} bundleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetBundleByName: async (bundleName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bundleName' is not null or undefined
            assertParamExists('notificationResourceV1GetBundleByName', 'bundleName', bundleName)
            const localVarPath = `/notifications/bundles/{bundleName}`
                .replace(`{${"bundleName"}}`, encodeURIComponent(String(bundleName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1GetBundleByNameApi - functional programming interface
 * @export
 */
export const NotificationResourceV1GetBundleByNameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1GetBundleByNameApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the details of a bundle by searching by its name.
         * @summary Retrieve a bundle by name
         * @param {string} bundleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1GetBundleByName(bundleName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bundle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1GetBundleByName(bundleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1GetBundleByNameApi - factory interface
 * @export
 */
export const NotificationResourceV1GetBundleByNameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1GetBundleByNameApiFp(configuration)
    return {
        /**
         * Retrieves the details of a bundle by searching by its name.
         * @summary Retrieve a bundle by name
         * @param {string} bundleName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetBundleByName(bundleName: string, options?: any): AxiosPromise<Bundle> {
            return localVarFp.notificationResourceV1GetBundleByName(bundleName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1GetBundleByNameApi - object-oriented interface
 * @export
 * @class NotificationResourceV1GetBundleByNameApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1GetBundleByNameApi extends BaseAPI {
    /**
     * Retrieves the details of a bundle by searching by its name.
     * @summary Retrieve a bundle by name
     * @param {string} bundleName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1GetBundleByNameApi
     */
    public notificationResourceV1GetBundleByName(bundleName: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1GetBundleByNameApiFp(this.configuration).notificationResourceV1GetBundleByName(bundleName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1GetBundleFacetsApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1GetBundleFacetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of configured bundles that includes the bundle name, the display name, and the ID. You can use this list to configure a filter in the UI.
         * @summary List configured bundles
         * @param {boolean} [includeApplications]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetBundleFacets: async (includeApplications?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/facets/bundles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includeApplications !== undefined) {
                localVarQueryParameter['includeApplications'] = includeApplications;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1GetBundleFacetsApi - functional programming interface
 * @export
 */
export const NotificationResourceV1GetBundleFacetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1GetBundleFacetsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of configured bundles that includes the bundle name, the display name, and the ID. You can use this list to configure a filter in the UI.
         * @summary List configured bundles
         * @param {boolean} [includeApplications]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1GetBundleFacets(includeApplications?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Facet>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1GetBundleFacets(includeApplications, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1GetBundleFacetsApi - factory interface
 * @export
 */
export const NotificationResourceV1GetBundleFacetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1GetBundleFacetsApiFp(configuration)
    return {
        /**
         * Returns a list of configured bundles that includes the bundle name, the display name, and the ID. You can use this list to configure a filter in the UI.
         * @summary List configured bundles
         * @param {boolean} [includeApplications]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetBundleFacets(includeApplications?: boolean, options?: any): AxiosPromise<Array<Facet>> {
            return localVarFp.notificationResourceV1GetBundleFacets(includeApplications, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1GetBundleFacetsApi - object-oriented interface
 * @export
 * @class NotificationResourceV1GetBundleFacetsApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1GetBundleFacetsApi extends BaseAPI {
    /**
     * Returns a list of configured bundles that includes the bundle name, the display name, and the ID. You can use this list to configure a filter in the UI.
     * @summary List configured bundles
     * @param {boolean} [includeApplications]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1GetBundleFacetsApi
     */
    public notificationResourceV1GetBundleFacets(includeApplications?: boolean, options?: AxiosRequestConfig) {
        return NotificationResourceV1GetBundleFacetsApiFp(this.configuration).notificationResourceV1GetBundleFacets(includeApplications, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1GetEventTypesApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1GetEventTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists all event types. You can filter the returned list by bundle or application name.
         * @summary List all event types
         * @param {Set<string>} [applicationIds]
         * @param {string} [bundleId]
         * @param {string} [eventTypeName]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetEventTypes: async (applicationIds?: Set<string>, bundleId?: string, eventTypeName?: string, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/eventTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (applicationIds) {
                localVarQueryParameter['applicationIds'] = Array.from(applicationIds);
            }

            if (bundleId !== undefined) {
                localVarQueryParameter['bundleId'] = bundleId;
            }

            if (eventTypeName !== undefined) {
                localVarQueryParameter['eventTypeName'] = eventTypeName;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortBy2 !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy2;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1GetEventTypesApi - functional programming interface
 * @export
 */
export const NotificationResourceV1GetEventTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1GetEventTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists all event types. You can filter the returned list by bundle or application name.
         * @summary List all event types
         * @param {Set<string>} [applicationIds]
         * @param {string} [bundleId]
         * @param {string} [eventTypeName]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1GetEventTypes(applicationIds?: Set<string>, bundleId?: string, eventTypeName?: string, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageEventType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1GetEventTypes(applicationIds, bundleId, eventTypeName, limit, offset, pageNumber, sortBy, sortBy2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1GetEventTypesApi - factory interface
 * @export
 */
export const NotificationResourceV1GetEventTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1GetEventTypesApiFp(configuration)
    return {
        /**
         * Lists all event types. You can filter the returned list by bundle or application name.
         * @summary List all event types
         * @param {Set<string>} [applicationIds]
         * @param {string} [bundleId]
         * @param {string} [eventTypeName]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetEventTypes(applicationIds?: Set<string>, bundleId?: string, eventTypeName?: string, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, options?: any): AxiosPromise<PageEventType> {
            return localVarFp.notificationResourceV1GetEventTypes(applicationIds, bundleId, eventTypeName, limit, offset, pageNumber, sortBy, sortBy2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1GetEventTypesApi - object-oriented interface
 * @export
 * @class NotificationResourceV1GetEventTypesApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1GetEventTypesApi extends BaseAPI {
    /**
     * Lists all event types. You can filter the returned list by bundle or application name.
     * @summary List all event types
     * @param {Set<string>} [applicationIds]
     * @param {string} [bundleId]
     * @param {string} [eventTypeName]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {string} [sortBy]
     * @param {string} [sortBy2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1GetEventTypesApi
     */
    public notificationResourceV1GetEventTypes(applicationIds?: Set<string>, bundleId?: string, eventTypeName?: string, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1GetEventTypesApiFp(this.configuration).notificationResourceV1GetEventTypes(applicationIds, bundleId, eventTypeName, limit, offset, pageNumber, sortBy, sortBy2, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists the event types that will be affected by the removal of a behavior group. Use this endpoint to see which event types will be removed if you delete a behavior group.
         * @summary List the event types affected by the removal of a behavior group
         * @param {string} behaviorGroupId The UUID of the behavior group to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroup: async (behaviorGroupId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'behaviorGroupId' is not null or undefined
            assertParamExists('notificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroup', 'behaviorGroupId', behaviorGroupId)
            const localVarPath = `/notifications/eventTypes/affectedByRemovalOfBehaviorGroup/{behaviorGroupId}`
                .replace(`{${"behaviorGroupId"}}`, encodeURIComponent(String(behaviorGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApi - functional programming interface
 * @export
 */
export const NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists the event types that will be affected by the removal of a behavior group. Use this endpoint to see which event types will be removed if you delete a behavior group.
         * @summary List the event types affected by the removal of a behavior group
         * @param {string} behaviorGroupId The UUID of the behavior group to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroup(behaviorGroupId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EventType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroup(behaviorGroupId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApi - factory interface
 * @export
 */
export const NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApiFp(configuration)
    return {
        /**
         * Lists the event types that will be affected by the removal of a behavior group. Use this endpoint to see which event types will be removed if you delete a behavior group.
         * @summary List the event types affected by the removal of a behavior group
         * @param {string} behaviorGroupId The UUID of the behavior group to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroup(behaviorGroupId: string, options?: any): AxiosPromise<Array<EventType>> {
            return localVarFp.notificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroup(behaviorGroupId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApi - object-oriented interface
 * @export
 * @class NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApi extends BaseAPI {
    /**
     * Lists the event types that will be affected by the removal of a behavior group. Use this endpoint to see which event types will be removed if you delete a behavior group.
     * @summary List the event types affected by the removal of a behavior group
     * @param {string} behaviorGroupId The UUID of the behavior group to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApi
     */
    public notificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroup(behaviorGroupId: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroupApiFp(this.configuration).notificationResourceV1GetEventTypesAffectedByRemovalOfBehaviorGroup(behaviorGroupId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the details of an event type by specifying the bundle name, the application name, and the event type name.
         * @summary Retrieve an event type by bundle, application and event type names
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {string} eventTypeName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetEventTypesByNameAndBundleAndApplicationName: async (applicationName: string, bundleName: string, eventTypeName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationName' is not null or undefined
            assertParamExists('notificationResourceV1GetEventTypesByNameAndBundleAndApplicationName', 'applicationName', applicationName)
            // verify required parameter 'bundleName' is not null or undefined
            assertParamExists('notificationResourceV1GetEventTypesByNameAndBundleAndApplicationName', 'bundleName', bundleName)
            // verify required parameter 'eventTypeName' is not null or undefined
            assertParamExists('notificationResourceV1GetEventTypesByNameAndBundleAndApplicationName', 'eventTypeName', eventTypeName)
            const localVarPath = `/notifications/bundles/{bundleName}/applications/{applicationName}/eventTypes/{eventTypeName}`
                .replace(`{${"applicationName"}}`, encodeURIComponent(String(applicationName)))
                .replace(`{${"bundleName"}}`, encodeURIComponent(String(bundleName)))
                .replace(`{${"eventTypeName"}}`, encodeURIComponent(String(eventTypeName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApi - functional programming interface
 * @export
 */
export const NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the details of an event type by specifying the bundle name, the application name, and the event type name.
         * @summary Retrieve an event type by bundle, application and event type names
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {string} eventTypeName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1GetEventTypesByNameAndBundleAndApplicationName(applicationName: string, bundleName: string, eventTypeName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventType>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1GetEventTypesByNameAndBundleAndApplicationName(applicationName, bundleName, eventTypeName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApi - factory interface
 * @export
 */
export const NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApiFp(configuration)
    return {
        /**
         * Retrieves the details of an event type by specifying the bundle name, the application name, and the event type name.
         * @summary Retrieve an event type by bundle, application and event type names
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {string} eventTypeName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetEventTypesByNameAndBundleAndApplicationName(applicationName: string, bundleName: string, eventTypeName: string, options?: any): AxiosPromise<EventType> {
            return localVarFp.notificationResourceV1GetEventTypesByNameAndBundleAndApplicationName(applicationName, bundleName, eventTypeName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApi - object-oriented interface
 * @export
 * @class NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApi extends BaseAPI {
    /**
     * Retrieves the details of an event type by specifying the bundle name, the application name, and the event type name.
     * @summary Retrieve an event type by bundle, application and event type names
     * @param {string} applicationName
     * @param {string} bundleName
     * @param {string} eventTypeName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApi
     */
    public notificationResourceV1GetEventTypesByNameAndBundleAndApplicationName(applicationName: string, bundleName: string, eventTypeName: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1GetEventTypesByNameAndBundleAndApplicationNameApiFp(this.configuration).notificationResourceV1GetEventTypesByNameAndBundleAndApplicationName(applicationName, bundleName, eventTypeName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1GetLinkedBehaviorGroupsApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1GetLinkedBehaviorGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists the behavior groups that are linked to an event type. Use this endpoint to see which behavior groups will be affected if you delete an event type.
         * @summary List the behavior groups linked to an event type
         * @param {string} eventTypeId
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetLinkedBehaviorGroups: async (eventTypeId: string, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventTypeId' is not null or undefined
            assertParamExists('notificationResourceV1GetLinkedBehaviorGroups', 'eventTypeId', eventTypeId)
            const localVarPath = `/notifications/eventTypes/{eventTypeId}/behaviorGroups`
                .replace(`{${"eventTypeId"}}`, encodeURIComponent(String(eventTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortBy2 !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy2;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1GetLinkedBehaviorGroupsApi - functional programming interface
 * @export
 */
export const NotificationResourceV1GetLinkedBehaviorGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1GetLinkedBehaviorGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists the behavior groups that are linked to an event type. Use this endpoint to see which behavior groups will be affected if you delete an event type.
         * @summary List the behavior groups linked to an event type
         * @param {string} eventTypeId
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1GetLinkedBehaviorGroups(eventTypeId: string, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BehaviorGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1GetLinkedBehaviorGroups(eventTypeId, limit, offset, pageNumber, sortBy, sortBy2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1GetLinkedBehaviorGroupsApi - factory interface
 * @export
 */
export const NotificationResourceV1GetLinkedBehaviorGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1GetLinkedBehaviorGroupsApiFp(configuration)
    return {
        /**
         * Lists the behavior groups that are linked to an event type. Use this endpoint to see which behavior groups will be affected if you delete an event type.
         * @summary List the behavior groups linked to an event type
         * @param {string} eventTypeId
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {number} [pageNumber]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1GetLinkedBehaviorGroups(eventTypeId: string, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, options?: any): AxiosPromise<Array<BehaviorGroup>> {
            return localVarFp.notificationResourceV1GetLinkedBehaviorGroups(eventTypeId, limit, offset, pageNumber, sortBy, sortBy2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1GetLinkedBehaviorGroupsApi - object-oriented interface
 * @export
 * @class NotificationResourceV1GetLinkedBehaviorGroupsApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1GetLinkedBehaviorGroupsApi extends BaseAPI {
    /**
     * Lists the behavior groups that are linked to an event type. Use this endpoint to see which behavior groups will be affected if you delete an event type.
     * @summary List the behavior groups linked to an event type
     * @param {string} eventTypeId
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {number} [pageNumber]
     * @param {string} [sortBy]
     * @param {string} [sortBy2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1GetLinkedBehaviorGroupsApi
     */
    public notificationResourceV1GetLinkedBehaviorGroups(eventTypeId: string, limit?: number, offset?: number, pageNumber?: number, sortBy?: string, sortBy2?: string, options?: AxiosRequestConfig) {
        return NotificationResourceV1GetLinkedBehaviorGroupsApiFp(this.configuration).notificationResourceV1GetLinkedBehaviorGroups(eventTypeId, limit, offset, pageNumber, sortBy, sortBy2, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1UpdateBehaviorGroupApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1UpdateBehaviorGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the details of a behavior group. Use this endpoint to update the list of related endpoints and event types associated with this behavior group.
         * @summary Update a behavior group
         * @param {string} id The UUID of the behavior group to update
         * @param {UpdateBehaviorGroupRequest} updateBehaviorGroupRequest New parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1UpdateBehaviorGroup: async (id: string, updateBehaviorGroupRequest: UpdateBehaviorGroupRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('notificationResourceV1UpdateBehaviorGroup', 'id', id)
            // verify required parameter 'updateBehaviorGroupRequest' is not null or undefined
            assertParamExists('notificationResourceV1UpdateBehaviorGroup', 'updateBehaviorGroupRequest', updateBehaviorGroupRequest)
            const localVarPath = `/notifications/behaviorGroups/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateBehaviorGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1UpdateBehaviorGroupApi - functional programming interface
 * @export
 */
export const NotificationResourceV1UpdateBehaviorGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1UpdateBehaviorGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the details of a behavior group. Use this endpoint to update the list of related endpoints and event types associated with this behavior group.
         * @summary Update a behavior group
         * @param {string} id The UUID of the behavior group to update
         * @param {UpdateBehaviorGroupRequest} updateBehaviorGroupRequest New parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1UpdateBehaviorGroup(id: string, updateBehaviorGroupRequest: UpdateBehaviorGroupRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1UpdateBehaviorGroup(id, updateBehaviorGroupRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1UpdateBehaviorGroupApi - factory interface
 * @export
 */
export const NotificationResourceV1UpdateBehaviorGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1UpdateBehaviorGroupApiFp(configuration)
    return {
        /**
         * Updates the details of a behavior group. Use this endpoint to update the list of related endpoints and event types associated with this behavior group.
         * @summary Update a behavior group
         * @param {string} id The UUID of the behavior group to update
         * @param {UpdateBehaviorGroupRequest} updateBehaviorGroupRequest New parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1UpdateBehaviorGroup(id: string, updateBehaviorGroupRequest: UpdateBehaviorGroupRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.notificationResourceV1UpdateBehaviorGroup(id, updateBehaviorGroupRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1UpdateBehaviorGroupApi - object-oriented interface
 * @export
 * @class NotificationResourceV1UpdateBehaviorGroupApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1UpdateBehaviorGroupApi extends BaseAPI {
    /**
     * Updates the details of a behavior group. Use this endpoint to update the list of related endpoints and event types associated with this behavior group.
     * @summary Update a behavior group
     * @param {string} id The UUID of the behavior group to update
     * @param {UpdateBehaviorGroupRequest} updateBehaviorGroupRequest New parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1UpdateBehaviorGroupApi
     */
    public notificationResourceV1UpdateBehaviorGroup(id: string, updateBehaviorGroupRequest: UpdateBehaviorGroupRequest, options?: AxiosRequestConfig) {
        return NotificationResourceV1UpdateBehaviorGroupApiFp(this.configuration).notificationResourceV1UpdateBehaviorGroup(id, updateBehaviorGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1UpdateBehaviorGroupActionsApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1UpdateBehaviorGroupActionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the list of actions to be executed in that particular behavior group after an event is received.
         * @summary Update the list of behavior group actions
         * @param {string} behaviorGroupId The UUID of the behavior group to update
         * @param {Array<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1UpdateBehaviorGroupActions: async (behaviorGroupId: string, requestBody?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'behaviorGroupId' is not null or undefined
            assertParamExists('notificationResourceV1UpdateBehaviorGroupActions', 'behaviorGroupId', behaviorGroupId)
            const localVarPath = `/notifications/behaviorGroups/{behaviorGroupId}/actions`
                .replace(`{${"behaviorGroupId"}}`, encodeURIComponent(String(behaviorGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1UpdateBehaviorGroupActionsApi - functional programming interface
 * @export
 */
export const NotificationResourceV1UpdateBehaviorGroupActionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1UpdateBehaviorGroupActionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the list of actions to be executed in that particular behavior group after an event is received.
         * @summary Update the list of behavior group actions
         * @param {string} behaviorGroupId The UUID of the behavior group to update
         * @param {Array<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1UpdateBehaviorGroupActions(behaviorGroupId: string, requestBody?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1UpdateBehaviorGroupActions(behaviorGroupId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1UpdateBehaviorGroupActionsApi - factory interface
 * @export
 */
export const NotificationResourceV1UpdateBehaviorGroupActionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1UpdateBehaviorGroupActionsApiFp(configuration)
    return {
        /**
         * Updates the list of actions to be executed in that particular behavior group after an event is received.
         * @summary Update the list of behavior group actions
         * @param {string} behaviorGroupId The UUID of the behavior group to update
         * @param {Array<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1UpdateBehaviorGroupActions(behaviorGroupId: string, requestBody?: Array<string>, options?: any): AxiosPromise<string> {
            return localVarFp.notificationResourceV1UpdateBehaviorGroupActions(behaviorGroupId, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1UpdateBehaviorGroupActionsApi - object-oriented interface
 * @export
 * @class NotificationResourceV1UpdateBehaviorGroupActionsApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1UpdateBehaviorGroupActionsApi extends BaseAPI {
    /**
     * Updates the list of actions to be executed in that particular behavior group after an event is received.
     * @summary Update the list of behavior group actions
     * @param {string} behaviorGroupId The UUID of the behavior group to update
     * @param {Array<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1UpdateBehaviorGroupActionsApi
     */
    public notificationResourceV1UpdateBehaviorGroupActions(behaviorGroupId: string, requestBody?: Array<string>, options?: AxiosRequestConfig) {
        return NotificationResourceV1UpdateBehaviorGroupActionsApiFp(this.configuration).notificationResourceV1UpdateBehaviorGroupActions(behaviorGroupId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationResourceV1UpdateEventTypeBehaviorsApi - axios parameter creator
 * @export
 */
export const NotificationResourceV1UpdateEventTypeBehaviorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the list of behavior groups associated with an event type.
         * @summary Update the list of behavior groups for an event type
         * @param {string} eventTypeId UUID of the eventType to associate with the behavior group(s)
         * @param {Set<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1UpdateEventTypeBehaviors: async (eventTypeId: string, requestBody?: Set<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventTypeId' is not null or undefined
            assertParamExists('notificationResourceV1UpdateEventTypeBehaviors', 'eventTypeId', eventTypeId)
            const localVarPath = `/notifications/eventTypes/{eventTypeId}/behaviorGroups`
                .replace(`{${"eventTypeId"}}`, encodeURIComponent(String(eventTypeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationResourceV1UpdateEventTypeBehaviorsApi - functional programming interface
 * @export
 */
export const NotificationResourceV1UpdateEventTypeBehaviorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationResourceV1UpdateEventTypeBehaviorsApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the list of behavior groups associated with an event type.
         * @summary Update the list of behavior groups for an event type
         * @param {string} eventTypeId UUID of the eventType to associate with the behavior group(s)
         * @param {Set<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async notificationResourceV1UpdateEventTypeBehaviors(eventTypeId: string, requestBody?: Set<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.notificationResourceV1UpdateEventTypeBehaviors(eventTypeId, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationResourceV1UpdateEventTypeBehaviorsApi - factory interface
 * @export
 */
export const NotificationResourceV1UpdateEventTypeBehaviorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationResourceV1UpdateEventTypeBehaviorsApiFp(configuration)
    return {
        /**
         * Updates the list of behavior groups associated with an event type.
         * @summary Update the list of behavior groups for an event type
         * @param {string} eventTypeId UUID of the eventType to associate with the behavior group(s)
         * @param {Set<string>} [requestBody]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        notificationResourceV1UpdateEventTypeBehaviors(eventTypeId: string, requestBody?: Set<string>, options?: any): AxiosPromise<string> {
            return localVarFp.notificationResourceV1UpdateEventTypeBehaviors(eventTypeId, requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationResourceV1UpdateEventTypeBehaviorsApi - object-oriented interface
 * @export
 * @class NotificationResourceV1UpdateEventTypeBehaviorsApi
 * @extends {BaseAPI}
 */
export class NotificationResourceV1UpdateEventTypeBehaviorsApi extends BaseAPI {
    /**
     * Updates the list of behavior groups associated with an event type.
     * @summary Update the list of behavior groups for an event type
     * @param {string} eventTypeId UUID of the eventType to associate with the behavior group(s)
     * @param {Set<string>} [requestBody]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationResourceV1UpdateEventTypeBehaviorsApi
     */
    public notificationResourceV1UpdateEventTypeBehaviors(eventTypeId: string, requestBody?: Set<string>, options?: AxiosRequestConfig) {
        return NotificationResourceV1UpdateEventTypeBehaviorsApiFp(this.configuration).notificationResourceV1UpdateEventTypeBehaviors(eventTypeId, requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrgConfigResourceV1GetDailyDigestTimePreferenceApi - axios parameter creator
 * @export
 */
export const OrgConfigResourceV1GetDailyDigestTimePreferenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the daily digest time setting. Use this endpoint to check the time that daily emails are sent.
         * @summary Retrieve the daily digest time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgConfigResourceV1GetDailyDigestTimePreference: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org-config/daily-digest/time-preference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgConfigResourceV1GetDailyDigestTimePreferenceApi - functional programming interface
 * @export
 */
export const OrgConfigResourceV1GetDailyDigestTimePreferenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgConfigResourceV1GetDailyDigestTimePreferenceApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the daily digest time setting. Use this endpoint to check the time that daily emails are sent.
         * @summary Retrieve the daily digest time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgConfigResourceV1GetDailyDigestTimePreference(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgConfigResourceV1GetDailyDigestTimePreference(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgConfigResourceV1GetDailyDigestTimePreferenceApi - factory interface
 * @export
 */
export const OrgConfigResourceV1GetDailyDigestTimePreferenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgConfigResourceV1GetDailyDigestTimePreferenceApiFp(configuration)
    return {
        /**
         * Retrieves the daily digest time setting. Use this endpoint to check the time that daily emails are sent.
         * @summary Retrieve the daily digest time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgConfigResourceV1GetDailyDigestTimePreference(options?: any): AxiosPromise<string> {
            return localVarFp.orgConfigResourceV1GetDailyDigestTimePreference(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgConfigResourceV1GetDailyDigestTimePreferenceApi - object-oriented interface
 * @export
 * @class OrgConfigResourceV1GetDailyDigestTimePreferenceApi
 * @extends {BaseAPI}
 */
export class OrgConfigResourceV1GetDailyDigestTimePreferenceApi extends BaseAPI {
    /**
     * Retrieves the daily digest time setting. Use this endpoint to check the time that daily emails are sent.
     * @summary Retrieve the daily digest time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgConfigResourceV1GetDailyDigestTimePreferenceApi
     */
    public orgConfigResourceV1GetDailyDigestTimePreference(options?: AxiosRequestConfig) {
        return OrgConfigResourceV1GetDailyDigestTimePreferenceApiFp(this.configuration).orgConfigResourceV1GetDailyDigestTimePreference(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * OrgConfigResourceV1SaveDailyDigestTimePreferenceApi - axios parameter creator
 * @export
 */
export const OrgConfigResourceV1SaveDailyDigestTimePreferenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sets the daily digest UTC time. The accepted minute values are 00, 15, 30, and 45. Use this endpoint to set the time when daily emails are sent.
         * @summary Set the daily digest time
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgConfigResourceV1SaveDailyDigestTimePreference: async (body?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/org-config/daily-digest/time-preference`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrgConfigResourceV1SaveDailyDigestTimePreferenceApi - functional programming interface
 * @export
 */
export const OrgConfigResourceV1SaveDailyDigestTimePreferenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrgConfigResourceV1SaveDailyDigestTimePreferenceApiAxiosParamCreator(configuration)
    return {
        /**
         * Sets the daily digest UTC time. The accepted minute values are 00, 15, 30, and 45. Use this endpoint to set the time when daily emails are sent.
         * @summary Set the daily digest time
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orgConfigResourceV1SaveDailyDigestTimePreference(body?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orgConfigResourceV1SaveDailyDigestTimePreference(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrgConfigResourceV1SaveDailyDigestTimePreferenceApi - factory interface
 * @export
 */
export const OrgConfigResourceV1SaveDailyDigestTimePreferenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrgConfigResourceV1SaveDailyDigestTimePreferenceApiFp(configuration)
    return {
        /**
         * Sets the daily digest UTC time. The accepted minute values are 00, 15, 30, and 45. Use this endpoint to set the time when daily emails are sent.
         * @summary Set the daily digest time
         * @param {string} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orgConfigResourceV1SaveDailyDigestTimePreference(body?: string, options?: any): AxiosPromise<void> {
            return localVarFp.orgConfigResourceV1SaveDailyDigestTimePreference(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrgConfigResourceV1SaveDailyDigestTimePreferenceApi - object-oriented interface
 * @export
 * @class OrgConfigResourceV1SaveDailyDigestTimePreferenceApi
 * @extends {BaseAPI}
 */
export class OrgConfigResourceV1SaveDailyDigestTimePreferenceApi extends BaseAPI {
    /**
     * Sets the daily digest UTC time. The accepted minute values are 00, 15, 30, and 45. Use this endpoint to set the time when daily emails are sent.
     * @summary Set the daily digest time
     * @param {string} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrgConfigResourceV1SaveDailyDigestTimePreferenceApi
     */
    public orgConfigResourceV1SaveDailyDigestTimePreference(body?: string, options?: AxiosRequestConfig) {
        return OrgConfigResourceV1SaveDailyDigestTimePreferenceApiFp(this.configuration).orgConfigResourceV1SaveDailyDigestTimePreference(body, options).then((request) => request(this.axios, this.basePath));
    }
}



