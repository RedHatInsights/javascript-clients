// tslint:disable
/**
 * Advisor API
 * The API of the Advisor project in Insights
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Pairings of C.R.C rule URL and its KCS solution number (node_id)
 * @export
 * @interface Kcs
 */
export interface Kcs {
    /**
     * Rule URL on C.R.C.
     * @type {string}
     * @memberof Kcs
     */
    rule_url: string;
    /**
     * KCS solution number
     * @type {string}
     * @memberof Kcs
     */
    node_id: string;
}
/**
 * The category for a rule.  In Advisor this is one of \'Security\', \'Availability\', \'Stability\' or \'Performance\'.  We don\'t use a Choices field because we want other projects to use this and choose their own categories.
 * @export
 * @interface RuleCategory
 */
export interface RuleCategory {
    /**
     *
     * @type {number}
     * @memberof RuleCategory
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof RuleCategory
     */
    name: string;
}
/**
 * Outputs the description of the settings in a Data-Driven Forms format.
 * @export
 * @interface SettingDDF
 */
export interface SettingDDF {
    /**
     *
     * @type {string}
     * @memberof SettingDDF
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof SettingDDF
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof SettingDDF
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof SettingDDF
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof SettingDDF
     */
    helpText?: string;
    /**
     *
     * @type {string}
     * @memberof SettingDDF
     */
    component: string;
    /**
     *
     * @type {boolean}
     * @memberof SettingDDF
     */
    isRequired: boolean;
    /**
     *
     * @type {boolean}
     * @memberof SettingDDF
     */
    initialValue: boolean;
}
/**
 * Combining the DDF fields into one \'fields\' object.
 * @export
 * @interface SettingsDDF
 */
export interface SettingsDDF {
    /**
     *
     * @type {Array<SettingDDF>}
     * @memberof SettingsDDF
     */
    fields: Array<SettingDDF>;
}
/**
 * Basic information about whether we are ready to serve information.
 * @export
 * @interface StatusReady
 */
export interface StatusReady {
    /**
     *
     * @type {boolean}
     * @memberof StatusReady
     */
    django: boolean;
    /**
     *
     * @type {boolean}
     * @memberof StatusReady
     */
    database: boolean;
    /**
     * RBAC (Role-Based Access Control)
     * @type {boolean}
     * @memberof StatusReady
     */
    rbac: boolean;
    /**
     *
     * @type {boolean}
     * @memberof StatusReady
     */
    advisor: boolean;
}
/**
 * RHN-based system types classified by role and product code.
 * @export
 * @interface SystemType
 */
export interface SystemType {
    /**
     *
     * @type {number}
     * @memberof SystemType
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof SystemType
     */
    role: string;
    /**
     *
     * @type {string}
     * @memberof SystemType
     */
    product_code: string;
}

/**
 * AccountSettingApi - axios parameter creator
 * @export
 */
export const AccountSettingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This will not create a new account settings object if none exists.
         * @summary Show this account\'s settings, or the defaults.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSettingList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/account_setting/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccountSettingApi - functional programming interface
 * @export
 */
export const AccountSettingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This will not create a new account settings object if none exists.
         * @summary Show this account\'s settings, or the defaults.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accountSettingList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AccountSettingApiAxiosParamCreator(configuration).accountSettingList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AccountSettingApi - factory interface
 * @export
 */
export const AccountSettingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This will not create a new account settings object if none exists.
         * @summary Show this account\'s settings, or the defaults.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accountSettingList(options?: any): AxiosPromise<void> {
            return AccountSettingApiFp(configuration).accountSettingList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AccountSettingApi - object-oriented interface
 * @export
 * @class AccountSettingApi
 * @extends {BaseAPI}
 */
export class AccountSettingApi extends BaseAPI {
    /**
     * This will not create a new account settings object if none exists.
     * @summary Show this account\'s settings, or the defaults.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountSettingApi
     */
    public accountSettingList(options?: any) {
        return AccountSettingApiFp(this.configuration).accountSettingList(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * KcsApi - axios parameter creator
 * @export
 */
export const KcsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of dicts of the C.R.C rule URL and its KCS solution number
         * @summary Looks for all active rules with KCS solutions
         * @param {Array<string>} [nodeIds] Display the rule urls for the given list of comma separated KCS solution node_ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kcsList: async (nodeIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/kcs/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nodeIds) {
                localVarQueryParameter['node_ids'] = nodeIds.join(COLLECTION_FORMATS.csv);
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of C.R.C rule url(s) for that KCS solution
         * @summary Gets active rule(s) for a particular KCS solution (node_id)
         * @param {string} nodeId KCS solution number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kcsRead: async (nodeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'nodeId' is not null or undefined
            if (nodeId === null || nodeId === undefined) {
                throw new RequiredError('nodeId','Required parameter nodeId was null or undefined when calling kcsRead.');
            }
            const localVarPath = `/kcs/{node_id}/`
                .replace(`{${"node_id"}}`, encodeURIComponent(String(nodeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KcsApi - functional programming interface
 * @export
 */
export const KcsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a list of dicts of the C.R.C rule URL and its KCS solution number
         * @summary Looks for all active rules with KCS solutions
         * @param {Array<string>} [nodeIds] Display the rule urls for the given list of comma separated KCS solution node_ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kcsList(nodeIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Kcs>>> {
            const localVarAxiosArgs = await KcsApiAxiosParamCreator(configuration).kcsList(nodeIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of C.R.C rule url(s) for that KCS solution
         * @summary Gets active rule(s) for a particular KCS solution (node_id)
         * @param {string} nodeId KCS solution number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async kcsRead(nodeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await KcsApiAxiosParamCreator(configuration).kcsRead(nodeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * KcsApi - factory interface
 * @export
 */
export const KcsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns a list of dicts of the C.R.C rule URL and its KCS solution number
         * @summary Looks for all active rules with KCS solutions
         * @param {Array<string>} [nodeIds] Display the rule urls for the given list of comma separated KCS solution node_ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kcsList(nodeIds?: Array<string>, options?: any): AxiosPromise<Array<Kcs>> {
            return KcsApiFp(configuration).kcsList(nodeIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of C.R.C rule url(s) for that KCS solution
         * @summary Gets active rule(s) for a particular KCS solution (node_id)
         * @param {string} nodeId KCS solution number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        kcsRead(nodeId: string, options?: any): AxiosPromise<Array<string>> {
            return KcsApiFp(configuration).kcsRead(nodeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KcsApi - object-oriented interface
 * @export
 * @class KcsApi
 * @extends {BaseAPI}
 */
export class KcsApi extends BaseAPI {
    /**
     * Returns a list of dicts of the C.R.C rule URL and its KCS solution number
     * @summary Looks for all active rules with KCS solutions
     * @param {Array<string>} [nodeIds] Display the rule urls for the given list of comma separated KCS solution node_ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KcsApi
     */
    public kcsList(nodeIds?: Array<string>, options?: any) {
        return KcsApiFp(this.configuration).kcsList(nodeIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of C.R.C rule url(s) for that KCS solution
     * @summary Gets active rule(s) for a particular KCS solution (node_id)
     * @param {string} nodeId KCS solution number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KcsApi
     */
    public kcsRead(nodeId: string, options?: any) {
        return KcsApiFp(this.configuration).kcsRead(nodeId, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * ResolutionRiskApi - axios parameter creator
 * @export
 */
export const ResolutionRiskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Risks are listed in increasing order of severity.
         * @summary List all total risk values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolutionRiskList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/resolution_risk/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResolutionRiskApi - functional programming interface
 * @export
 */
export const ResolutionRiskApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Risks are listed in increasing order of severity.
         * @summary List all total risk values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resolutionRiskList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ResolutionRiskApiAxiosParamCreator(configuration).resolutionRiskList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ResolutionRiskApi - factory interface
 * @export
 */
export const ResolutionRiskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Risks are listed in increasing order of severity.
         * @summary List all total risk values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resolutionRiskList(options?: any): AxiosPromise<void> {
            return ResolutionRiskApiFp(configuration).resolutionRiskList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResolutionRiskApi - object-oriented interface
 * @export
 * @class ResolutionRiskApi
 * @extends {BaseAPI}
 */
export class ResolutionRiskApi extends BaseAPI {
    /**
     * Risks are listed in increasing order of severity.
     * @summary List all total risk values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResolutionRiskApi
     */
    public resolutionRiskList(options?: any) {
        return ResolutionRiskApiFp(this.configuration).resolutionRiskList(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * RulecategoryApi - axios parameter creator
 * @export
 */
export const RulecategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Categories are listed in decreasing order of importance.
         * @summary Rules are divided into categories, the usual being Availability, Stability, Security and Performance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulecategoryList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/rulecategory/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Categories are listed in decreasing order of importance.
         * @summary Rules are divided into categories, the usual being Availability, Stability, Security and Performance.
         * @param {number} id A unique integer value identifying this rule category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulecategoryRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling rulecategoryRead.');
            }
            const localVarPath = `/rulecategory/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RulecategoryApi - functional programming interface
 * @export
 */
export const RulecategoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Categories are listed in decreasing order of importance.
         * @summary Rules are divided into categories, the usual being Availability, Stability, Security and Performance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rulecategoryList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RuleCategory>>> {
            const localVarAxiosArgs = await RulecategoryApiAxiosParamCreator(configuration).rulecategoryList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Categories are listed in decreasing order of importance.
         * @summary Rules are divided into categories, the usual being Availability, Stability, Security and Performance.
         * @param {number} id A unique integer value identifying this rule category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rulecategoryRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleCategory>> {
            const localVarAxiosArgs = await RulecategoryApiAxiosParamCreator(configuration).rulecategoryRead(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RulecategoryApi - factory interface
 * @export
 */
export const RulecategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Categories are listed in decreasing order of importance.
         * @summary Rules are divided into categories, the usual being Availability, Stability, Security and Performance.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulecategoryList(options?: any): AxiosPromise<Array<RuleCategory>> {
            return RulecategoryApiFp(configuration).rulecategoryList(options).then((request) => request(axios, basePath));
        },
        /**
         * Categories are listed in decreasing order of importance.
         * @summary Rules are divided into categories, the usual being Availability, Stability, Security and Performance.
         * @param {number} id A unique integer value identifying this rule category.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulecategoryRead(id: number, options?: any): AxiosPromise<RuleCategory> {
            return RulecategoryApiFp(configuration).rulecategoryRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RulecategoryApi - object-oriented interface
 * @export
 * @class RulecategoryApi
 * @extends {BaseAPI}
 */
export class RulecategoryApi extends BaseAPI {
    /**
     * Categories are listed in decreasing order of importance.
     * @summary Rules are divided into categories, the usual being Availability, Stability, Security and Performance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulecategoryApi
     */
    public rulecategoryList(options?: any) {
        return RulecategoryApiFp(this.configuration).rulecategoryList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Categories are listed in decreasing order of importance.
     * @summary Rules are divided into categories, the usual being Availability, Stability, Security and Performance.
     * @param {number} id A unique integer value identifying this rule category.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulecategoryApi
     */
    public rulecategoryRead(id: number, options?: any) {
        return RulecategoryApiFp(this.configuration).rulecategoryRead(id, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This simply compiles the \'show_satellite_hosts\' account-wide setting into a format compatible with Data-Driven Forms.
         * @summary Describe the settings we have in a Data-Driven Forms way.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This simply compiles the \'show_satellite_hosts\' account-wide setting into a format compatible with Data-Driven Forms.
         * @summary Describe the settings we have in a Data-Driven Forms way.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SettingsDDF>>> {
            const localVarAxiosArgs = await SettingsApiAxiosParamCreator(configuration).settingsList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This simply compiles the \'show_satellite_hosts\' account-wide setting into a format compatible with Data-Driven Forms.
         * @summary Describe the settings we have in a Data-Driven Forms way.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsList(options?: any): AxiosPromise<Array<SettingsDDF>> {
            return SettingsApiFp(configuration).settingsList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * This simply compiles the \'show_satellite_hosts\' account-wide setting into a format compatible with Data-Driven Forms.
     * @summary Describe the settings we have in a Data-Driven Forms way.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public settingsList(options?: any) {
        return SettingsApiFp(this.configuration).settingsList(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * StatusApi - axios parameter creator
 * @export
 */
export const StatusApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * A list of statistics views.
         * @summary Provide a simple list of URLs contained here.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/status/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a dictionary with properties defining the status of the components Advisor relies on. At the moment this is the same as the Readiness check (see `/ready/`). In the future it may include other checks if we need to, but the properties of `/ready/` will always be included.
         * @summary Is the Advisor API live and serving requests?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusLiveRead: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/status/live/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This returns a dictionary with properties defining the status of the components Advisor relies on. * \'django\' should always be True.  If Django isn\'t ready, you can\'t get this information :-) * \'database\' is True when a database access returns successfully with valid information. * \'rbac\' is True when we can make a request to the RBAC API and get a valid response. * \'advisor\' is True if all of the above are True.
         * @summary Is the Advisor API ready to serve requests?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusReadyRead: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/status/ready/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatusApi - functional programming interface
 * @export
 */
export const StatusApiFp = function(configuration?: Configuration) {
    return {
        /**
         * A list of statistics views.
         * @summary Provide a simple list of URLs contained here.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statusList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await StatusApiAxiosParamCreator(configuration).statusList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This returns a dictionary with properties defining the status of the components Advisor relies on. At the moment this is the same as the Readiness check (see `/ready/`). In the future it may include other checks if we need to, but the properties of `/ready/` will always be included.
         * @summary Is the Advisor API live and serving requests?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statusLiveRead(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusReady>> {
            const localVarAxiosArgs = await StatusApiAxiosParamCreator(configuration).statusLiveRead(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This returns a dictionary with properties defining the status of the components Advisor relies on. * \'django\' should always be True.  If Django isn\'t ready, you can\'t get this information :-) * \'database\' is True when a database access returns successfully with valid information. * \'rbac\' is True when we can make a request to the RBAC API and get a valid response. * \'advisor\' is True if all of the above are True.
         * @summary Is the Advisor API ready to serve requests?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statusReadyRead(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusReady>> {
            const localVarAxiosArgs = await StatusApiAxiosParamCreator(configuration).statusReadyRead(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StatusApi - factory interface
 * @export
 */
export const StatusApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * A list of statistics views.
         * @summary Provide a simple list of URLs contained here.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusList(options?: any): AxiosPromise<void> {
            return StatusApiFp(configuration).statusList(options).then((request) => request(axios, basePath));
        },
        /**
         * This returns a dictionary with properties defining the status of the components Advisor relies on. At the moment this is the same as the Readiness check (see `/ready/`). In the future it may include other checks if we need to, but the properties of `/ready/` will always be included.
         * @summary Is the Advisor API live and serving requests?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusLiveRead(options?: any): AxiosPromise<StatusReady> {
            return StatusApiFp(configuration).statusLiveRead(options).then((request) => request(axios, basePath));
        },
        /**
         * This returns a dictionary with properties defining the status of the components Advisor relies on. * \'django\' should always be True.  If Django isn\'t ready, you can\'t get this information :-) * \'database\' is True when a database access returns successfully with valid information. * \'rbac\' is True when we can make a request to the RBAC API and get a valid response. * \'advisor\' is True if all of the above are True.
         * @summary Is the Advisor API ready to serve requests?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusReadyRead(options?: any): AxiosPromise<StatusReady> {
            return StatusApiFp(configuration).statusReadyRead(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
export class StatusApi extends BaseAPI {
    /**
     * A list of statistics views.
     * @summary Provide a simple list of URLs contained here.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public statusList(options?: any) {
        return StatusApiFp(this.configuration).statusList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This returns a dictionary with properties defining the status of the components Advisor relies on. At the moment this is the same as the Readiness check (see `/ready/`). In the future it may include other checks if we need to, but the properties of `/ready/` will always be included.
     * @summary Is the Advisor API live and serving requests?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public statusLiveRead(options?: any) {
        return StatusApiFp(this.configuration).statusLiveRead(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This returns a dictionary with properties defining the status of the components Advisor relies on. * \'django\' should always be True.  If Django isn\'t ready, you can\'t get this information :-) * \'database\' is True when a database access returns successfully with valid information. * \'rbac\' is True when we can make a request to the RBAC API and get a valid response. * \'advisor\' is True if all of the above are True.
     * @summary Is the Advisor API ready to serve requests?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    public statusReadyRead(options?: any) {
        return StatusApiFp(this.configuration).statusReadyRead(options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * SystemtypeApi - axios parameter creator
 * @export
 */
export const SystemtypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all system types by role and product code
         * @summary List all system types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemtypeList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/systemtype/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve details of a single system type
         * @summary Retrieve a system type
         * @param {number} id A unique integer value identifying this system type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemtypeRead: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling systemtypeRead.');
            }
            const localVarPath = `/systemtype/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemtypeApi - functional programming interface
 * @export
 */
export const SystemtypeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * List all system types by role and product code
         * @summary List all system types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemtypeList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SystemType>>> {
            const localVarAxiosArgs = await SystemtypeApiAxiosParamCreator(configuration).systemtypeList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve details of a single system type
         * @summary Retrieve a system type
         * @param {number} id A unique integer value identifying this system type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemtypeRead(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemType>> {
            const localVarAxiosArgs = await SystemtypeApiAxiosParamCreator(configuration).systemtypeRead(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SystemtypeApi - factory interface
 * @export
 */
export const SystemtypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * List all system types by role and product code
         * @summary List all system types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemtypeList(options?: any): AxiosPromise<Array<SystemType>> {
            return SystemtypeApiFp(configuration).systemtypeList(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve details of a single system type
         * @summary Retrieve a system type
         * @param {number} id A unique integer value identifying this system type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemtypeRead(id: number, options?: any): AxiosPromise<SystemType> {
            return SystemtypeApiFp(configuration).systemtypeRead(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemtypeApi - object-oriented interface
 * @export
 * @class SystemtypeApi
 * @extends {BaseAPI}
 */
export class SystemtypeApi extends BaseAPI {
    /**
     * List all system types by role and product code
     * @summary List all system types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemtypeApi
     */
    public systemtypeList(options?: any) {
        return SystemtypeApiFp(this.configuration).systemtypeList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve details of a single system type
     * @summary Retrieve a system type
     * @param {number} id A unique integer value identifying this system type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemtypeApi
     */
    public systemtypeRead(id: number, options?: any) {
        return SystemtypeApiFp(this.configuration).systemtypeRead(id, options).then((request) => request(this.axios, this.basePath));
    }

}


/**
 * TotalRiskApi - axios parameter creator
 * @export
 */
export const TotalRiskApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Total risk values are listed in increasing order of severity.
         * @summary List all total risk values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalRiskList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/total_risk/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TotalRiskApi - functional programming interface
 * @export
 */
export const TotalRiskApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Total risk values are listed in increasing order of severity.
         * @summary List all total risk values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async totalRiskList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TotalRiskApiAxiosParamCreator(configuration).totalRiskList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TotalRiskApi - factory interface
 * @export
 */
export const TotalRiskApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Total risk values are listed in increasing order of severity.
         * @summary List all total risk values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalRiskList(options?: any): AxiosPromise<void> {
            return TotalRiskApiFp(configuration).totalRiskList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TotalRiskApi - object-oriented interface
 * @export
 * @class TotalRiskApi
 * @extends {BaseAPI}
 */
export class TotalRiskApi extends BaseAPI {
    /**
     * Total risk values are listed in increasing order of severity.
     * @summary List all total risk values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TotalRiskApi
     */
    public totalRiskList(options?: any) {
        return TotalRiskApiFp(this.configuration).totalRiskList(options).then((request) => request(this.axios, this.basePath));
    }

}


