/* tslint:disable */
/* eslint-disable */
/**
 * Integrations
 * The API for Integrations
 *
 * The version of the OpenAPI document: v1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AddAccessRequest
 */
export interface AddAccessRequest {
    /**
     *
     * @type {string}
     * @memberof AddAccessRequest
     */
    'role'?: string;
    /**
     *
     * @type {string}
     * @memberof AddAccessRequest
     */
    'application_id'?: string;
}
/**
 *
 * @export
 * @interface AddApplicationRequest
 */
export interface AddApplicationRequest {
    /**
     *
     * @type {string}
     * @memberof AddApplicationRequest
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof AddApplicationRequest
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof AddApplicationRequest
     */
    'bundle_id': string;
    /**
     *
     * @type {string}
     * @memberof AddApplicationRequest
     */
    'owner_role'?: string;
}
/**
 *
 * @export
 * @interface AggregationEmailTemplate
 */
export interface AggregationEmailTemplate {
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'id'?: string;
    /**
     *
     * @type {Application}
     * @memberof AggregationEmailTemplate
     */
    'application'?: Application;
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'application_id'?: string;
    /**
     *
     * @type {EmailSubscriptionType}
     * @memberof AggregationEmailTemplate
     */
    'subscription_type': EmailSubscriptionType;
    /**
     *
     * @type {Template}
     * @memberof AggregationEmailTemplate
     */
    'subject_template'?: Template;
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'subject_template_id': string;
    /**
     *
     * @type {Template}
     * @memberof AggregationEmailTemplate
     */
    'body_template'?: Template;
    /**
     *
     * @type {string}
     * @memberof AggregationEmailTemplate
     */
    'body_template_id': string;
}


/**
 *
 * @export
 * @interface Application
 */
export interface Application {
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof Application
     */
    'bundle_id': string;
}
/**
 *
 * @export
 * @interface Application1
 */
export interface Application1 {
    /**
     *
     * @type {string}
     * @memberof Application1
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Application1
     */
    'display_name': string;
}
/**
 *
 * @export
 * @interface ApplicationSettingsValue
 */
export interface ApplicationSettingsValue {
    /**
     *
     * @type {{ [key: string]: EventTypeSettingsValue; }}
     * @memberof ApplicationSettingsValue
     */
    'eventTypes'?: { [key: string]: EventTypeSettingsValue; };
}
/**
 *
 * @export
 * @interface ApplicationSettingsValue1
 */
export interface ApplicationSettingsValue1 {
    /**
     *
     * @type {{ [key: string]: boolean; }}
     * @memberof ApplicationSettingsValue1
     */
    'notifications'?: { [key: string]: boolean; };
    /**
     *
     * @type {boolean}
     * @memberof ApplicationSettingsValue1
     */
    'hasForcedEmail'?: boolean;
}
/**
 *
 * @export
 * @interface BasicAuthentication
 */
export interface BasicAuthentication {
    /**
     *
     * @type {string}
     * @memberof BasicAuthentication
     */
    'username'?: string;
    /**
     *
     * @type {string}
     * @memberof BasicAuthentication
     */
    'password'?: string;
}
/**
 *
 * @export
 * @interface BehaviorGroup
 */
export interface BehaviorGroup {
    /**
     *
     * @type {string}
     * @memberof BehaviorGroup
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof BehaviorGroup
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof BehaviorGroup
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof BehaviorGroup
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof BehaviorGroup
     */
    'bundle_id': string;
    /**
     *
     * @type {Bundle}
     * @memberof BehaviorGroup
     */
    'bundle'?: Bundle;
    /**
     *
     * @type {Array<BehaviorGroupAction>}
     * @memberof BehaviorGroup
     */
    'actions'?: Array<BehaviorGroupAction>;
    /**
     *
     * @type {Set<EventTypeBehavior>}
     * @memberof BehaviorGroup
     */
    'behaviors'?: Set<EventTypeBehavior>;
    /**
     *
     * @type {boolean}
     * @memberof BehaviorGroup
     */
    'default_behavior'?: boolean;
}
/**
 *
 * @export
 * @interface BehaviorGroupAction
 */
export interface BehaviorGroupAction {
    /**
     *
     * @type {string}
     * @memberof BehaviorGroupAction
     */
    'created'?: string;
    /**
     *
     * @type {BehaviorGroupActionId}
     * @memberof BehaviorGroupAction
     */
    'id'?: BehaviorGroupActionId;
    /**
     *
     * @type {Endpoint}
     * @memberof BehaviorGroupAction
     */
    'endpoint'?: Endpoint;
}
/**
 *
 * @export
 * @interface BehaviorGroupActionId
 */
export interface BehaviorGroupActionId {
    /**
     *
     * @type {string}
     * @memberof BehaviorGroupActionId
     */
    'behaviorGroupId': string;
    /**
     *
     * @type {string}
     * @memberof BehaviorGroupActionId
     */
    'endpointId': string;
}
/**
 *
 * @export
 * @interface Bundle
 */
export interface Bundle {
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'display_name': string;
}
/**
 *
 * @export
 * @interface BundleSettingsValue
 */
export interface BundleSettingsValue {
    /**
     *
     * @type {{ [key: string]: ApplicationSettingsValue; }}
     * @memberof BundleSettingsValue
     */
    'applications'?: { [key: string]: ApplicationSettingsValue; };
}
/**
 *
 * @export
 * @interface BundleSettingsValue1
 */
export interface BundleSettingsValue1 {
    /**
     *
     * @type {{ [key: string]: ApplicationSettingsValue1; }}
     * @memberof BundleSettingsValue1
     */
    'applications'?: { [key: string]: ApplicationSettingsValue1; };
}
/**
 *
 * @export
 * @interface CamelProperties
 */
export interface CamelProperties {
    /**
     *
     * @type {string}
     * @memberof CamelProperties
     */
    'url': string;
    /**
     *
     * @type {boolean}
     * @memberof CamelProperties
     */
    'disable_ssl_verification': boolean;
    /**
     *
     * @type {string}
     * @memberof CamelProperties
     */
    'secret_token'?: string;
    /**
     *
     * @type {BasicAuthentication}
     * @memberof CamelProperties
     */
    'basic_authentication'?: BasicAuthentication;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof CamelProperties
     */
    'extras'?: { [key: string]: string; };
}
/**
 *
 * @export
 * @interface CreateBehaviorGroupRequest
 */
export interface CreateBehaviorGroupRequest {
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupRequest
     */
    'bundle_id'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupRequest
     */
    'bundle_name'?: string;
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupRequest
     */
    'display_name': string;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateBehaviorGroupRequest
     */
    'endpoint_ids'?: Array<string>;
    /**
     *
     * @type {Set<string>}
     * @memberof CreateBehaviorGroupRequest
     */
    'event_type_ids'?: Set<string>;
    /**
     *
     * @type {boolean}
     * @memberof CreateBehaviorGroupRequest
     */
    'bundle_uuid_or_bundle_name_valid'?: boolean;
}
/**
 *
 * @export
 * @interface CreateBehaviorGroupResponse
 */
export interface CreateBehaviorGroupResponse {
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupResponse
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupResponse
     */
    'bundle_id': string;
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupResponse
     */
    'display_name': string;
    /**
     *
     * @type {Array<string>}
     * @memberof CreateBehaviorGroupResponse
     */
    'endpoints': Array<string>;
    /**
     *
     * @type {Set<string>}
     * @memberof CreateBehaviorGroupResponse
     */
    'event_types': Set<string>;
    /**
     *
     * @type {string}
     * @memberof CreateBehaviorGroupResponse
     */
    'created': string;
}
/**
 *
 * @export
 * @interface CurrentStatus
 */
export interface CurrentStatus {
    /**
     *
     * @type {Status}
     * @memberof CurrentStatus
     */
    'status': Status;
    /**
     *
     * @type {string}
     * @memberof CurrentStatus
     */
    'start_time'?: string;
    /**
     *
     * @type {string}
     * @memberof CurrentStatus
     */
    'end_time'?: string;
}


/**
 *
 * @export
 * @interface DuplicateNameMigrationReport
 */
export interface DuplicateNameMigrationReport {
    /**
     *
     * @type {number}
     * @memberof DuplicateNameMigrationReport
     */
    'updatedIntegrations'?: number;
    /**
     *
     * @type {number}
     * @memberof DuplicateNameMigrationReport
     */
    'updatedBehaviorGroups'?: number;
}
/**
 *
 * @export
 * @enum {string}
 */

export const EmailSubscriptionType = {
    Daily: 'DAILY'
} as const;

export type EmailSubscriptionType = typeof EmailSubscriptionType[keyof typeof EmailSubscriptionType];


/**
 *
 * @export
 * @interface Endpoint
 */
export interface Endpoint {
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'description': string;
    /**
     *
     * @type {boolean}
     * @memberof Endpoint
     */
    'enabled'?: boolean;
    /**
     *
     * @type {EndpointStatus}
     * @memberof Endpoint
     */
    'status'?: EndpointStatus;
    /**
     *
     * @type {number}
     * @memberof Endpoint
     */
    'server_errors'?: number;
    /**
     *
     * @type {object}
     * @memberof Endpoint
     */
    'properties'?: object;
    /**
     *
     * @type {EndpointType}
     * @memberof Endpoint
     */
    'type': EndpointType;
    /**
     *
     * @type {string}
     * @memberof Endpoint
     */
    'sub_type'?: string;
}


/**
 *
 * @export
 * @interface EndpointPage
 */
export interface EndpointPage {
    /**
     *
     * @type {Array<Endpoint>}
     * @memberof EndpointPage
     */
    'data': Array<Endpoint>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof EndpointPage
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof EndpointPage
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @enum {string}
 */

export const EndpointStatus = {
    Ready: 'READY',
    Unknown: 'UNKNOWN',
    New: 'NEW',
    Provisioning: 'PROVISIONING',
    Deleting: 'DELETING',
    Failed: 'FAILED'
} as const;

export type EndpointStatus = typeof EndpointStatus[keyof typeof EndpointStatus];


/**
 *
 * @export
 * @interface EndpointTestRequest
 */
export interface EndpointTestRequest {
    /**
     *
     * @type {string}
     * @memberof EndpointTestRequest
     */
    'message': string;
}
/**
 *
 * @export
 * @enum {string}
 */

export const EndpointType = {
    Webhook: 'webhook',
    EmailSubscription: 'email_subscription',
    Camel: 'camel',
    Ansible: 'ansible',
    Drawer: 'drawer'
} as const;

export type EndpointType = typeof EndpointType[keyof typeof EndpointType];


/**
 *
 * @export
 * @enum {string}
 */

export const Environment = {
    Prod: 'PROD',
    Stage: 'STAGE',
    Ephemeral: 'EPHEMERAL',
    LocalServer: 'LOCAL_SERVER'
} as const;

export type Environment = typeof Environment[keyof typeof Environment];


/**
 *
 * @export
 * @interface EventLogEntry
 */
export interface EventLogEntry {
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'created': string;
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'bundle': string;
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'application': string;
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'event_type': string;
    /**
     *
     * @type {string}
     * @memberof EventLogEntry
     */
    'payload'?: string;
    /**
     *
     * @type {Array<EventLogEntryAction>}
     * @memberof EventLogEntry
     */
    'actions': Array<EventLogEntryAction>;
}
/**
 *
 * @export
 * @interface EventLogEntryAction
 */
export interface EventLogEntryAction {
    /**
     *
     * @type {string}
     * @memberof EventLogEntryAction
     */
    'id': string;
    /**
     *
     * @type {EndpointType}
     * @memberof EventLogEntryAction
     */
    'endpoint_type': EndpointType;
    /**
     *
     * @type {string}
     * @memberof EventLogEntryAction
     */
    'endpoint_sub_type'?: string;
    /**
     *
     * @type {boolean}
     * @memberof EventLogEntryAction
     * @deprecated
     */
    'invocation_result': boolean;
    /**
     *
     * @type {EventLogEntryActionStatus}
     * @memberof EventLogEntryAction
     */
    'status': EventLogEntryActionStatus;
    /**
     *
     * @type {string}
     * @memberof EventLogEntryAction
     */
    'endpoint_id'?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof EventLogEntryAction
     */
    'details'?: { [key: string]: object; };
}


/**
 *
 * @export
 * @enum {string}
 */

export const EventLogEntryActionStatus = {
    Sent: 'SENT',
    Success: 'SUCCESS',
    Processing: 'PROCESSING',
    Failed: 'FAILED',
    Unknown: 'UNKNOWN'
} as const;

export type EventLogEntryActionStatus = typeof EventLogEntryActionStatus[keyof typeof EventLogEntryActionStatus];


/**
 *
 * @export
 * @interface EventType
 */
export interface EventType {
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'display_name': string;
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'fully_qualified_name'?: string;
    /**
     *
     * @type {string}
     * @memberof EventType
     */
    'application_id': string;
    /**
     *
     * @type {Application}
     * @memberof EventType
     */
    'application'?: Application;
}
/**
 *
 * @export
 * @interface EventTypeBehavior
 */
export interface EventTypeBehavior {
    /**
     *
     * @type {string}
     * @memberof EventTypeBehavior
     */
    'created'?: string;
    /**
     *
     * @type {EventTypeBehaviorId}
     * @memberof EventTypeBehavior
     */
    'id'?: EventTypeBehaviorId;
    /**
     *
     * @type {EventType}
     * @memberof EventTypeBehavior
     */
    'event_type'?: EventType;
}
/**
 *
 * @export
 * @interface EventTypeBehaviorId
 */
export interface EventTypeBehaviorId {
    /**
     *
     * @type {string}
     * @memberof EventTypeBehaviorId
     */
    'eventTypeId': string;
    /**
     *
     * @type {string}
     * @memberof EventTypeBehaviorId
     */
    'behaviorGroupId': string;
}
/**
 *
 * @export
 * @interface EventTypeSettingsValue
 */
export interface EventTypeSettingsValue {
    /**
     *
     * @type {{ [key: string]: boolean; }}
     * @memberof EventTypeSettingsValue
     */
    'emailSubscriptionTypes'?: { [key: string]: boolean; };
    /**
     *
     * @type {boolean}
     * @memberof EventTypeSettingsValue
     */
    'hasForcedEmail'?: boolean;
}
/**
 *
 * @export
 * @interface Facet
 */
export interface Facet {
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Facet
     */
    'displayName': string;
    /**
     *
     * @type {Array<Facet>}
     * @memberof Facet
     */
    'children'?: Array<Facet>;
}
/**
 *
 * @export
 * @enum {string}
 */

export const HttpType = {
    Get: 'GET',
    Post: 'POST',
    Put: 'PUT'
} as const;

export type HttpType = typeof HttpType[keyof typeof HttpType];


/**
 *
 * @export
 * @interface InstantEmailTemplate
 */
export interface InstantEmailTemplate {
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'id'?: string;
    /**
     *
     * @type {EventType}
     * @memberof InstantEmailTemplate
     */
    'event_type'?: EventType;
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'event_type_id'?: string;
    /**
     *
     * @type {Template}
     * @memberof InstantEmailTemplate
     */
    'subject_template'?: Template;
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'subject_template_id': string;
    /**
     *
     * @type {Template}
     * @memberof InstantEmailTemplate
     */
    'body_template'?: Template;
    /**
     *
     * @type {string}
     * @memberof InstantEmailTemplate
     */
    'body_template_id': string;
}
/**
 *
 * @export
 * @interface InternalApplicationUserPermission
 */
export interface InternalApplicationUserPermission {
    /**
     *
     * @type {string}
     * @memberof InternalApplicationUserPermission
     */
    'application_id': string;
    /**
     *
     * @type {string}
     * @memberof InternalApplicationUserPermission
     */
    'application_display_name': string;
    /**
     *
     * @type {string}
     * @memberof InternalApplicationUserPermission
     */
    'role': string;
}
/**
 *
 * @export
 * @interface InternalRoleAccess
 */
export interface InternalRoleAccess {
    /**
     *
     * @type {string}
     * @memberof InternalRoleAccess
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof InternalRoleAccess
     */
    'role': string;
    /**
     *
     * @type {string}
     * @memberof InternalRoleAccess
     */
    'application_id': string;
}
/**
 *
 * @export
 * @interface InternalUserPermissions
 */
export interface InternalUserPermissions {
    /**
     *
     * @type {boolean}
     * @memberof InternalUserPermissions
     */
    'is_admin': boolean;
    /**
     *
     * @type {Array<Application1>}
     * @memberof InternalUserPermissions
     */
    'applications': Array<Application1>;
    /**
     *
     * @type {Array<string>}
     * @memberof InternalUserPermissions
     */
    'roles': Array<string>;
}
/**
 *
 * @export
 * @interface MessageValidationResponse
 */
export interface MessageValidationResponse {
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof MessageValidationResponse
     */
    'errors': { [key: string]: Array<string>; };
}
/**
 *
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     *
     * @type {number}
     * @memberof Meta
     */
    'count': number;
}
/**
 *
 * @export
 * @interface NotificationHistory
 */
export interface NotificationHistory {
    /**
     *
     * @type {string}
     * @memberof NotificationHistory
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof NotificationHistory
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof NotificationHistory
     */
    'invocationTime': number;
    /**
     *
     * @type {boolean}
     * @memberof NotificationHistory
     * @deprecated
     */
    'invocationResult': boolean;
    /**
     *
     * @type {NotificationStatus}
     * @memberof NotificationHistory
     */
    'status': NotificationStatus;
    /**
     *
     * @type {string}
     * @memberof NotificationHistory
     */
    'endpointId'?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof NotificationHistory
     */
    'details'?: { [key: string]: object; };
    /**
     *
     * @type {EndpointType}
     * @memberof NotificationHistory
     */
    'endpointType'?: EndpointType;
    /**
     *
     * @type {string}
     * @memberof NotificationHistory
     */
    'endpointSubType'?: string;
}


/**
 *
 * @export
 * @enum {string}
 */

export const NotificationStatus = {
    FailedInternal: 'FAILED_INTERNAL',
    FailedExternal: 'FAILED_EXTERNAL',
    Processing: 'PROCESSING',
    Sent: 'SENT',
    Success: 'SUCCESS'
} as const;

export type NotificationStatus = typeof NotificationStatus[keyof typeof NotificationStatus];


/**
 *
 * @export
 * @interface PageBehaviorGroup
 */
export interface PageBehaviorGroup {
    /**
     *
     * @type {Array<BehaviorGroup>}
     * @memberof PageBehaviorGroup
     */
    'data': Array<BehaviorGroup>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PageBehaviorGroup
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof PageBehaviorGroup
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @interface PageEventLogEntry
 */
export interface PageEventLogEntry {
    /**
     *
     * @type {Array<EventLogEntry>}
     * @memberof PageEventLogEntry
     */
    'data': Array<EventLogEntry>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PageEventLogEntry
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof PageEventLogEntry
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @interface PageEventType
 */
export interface PageEventType {
    /**
     *
     * @type {Array<EventType>}
     * @memberof PageEventType
     */
    'data': Array<EventType>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PageEventType
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof PageEventType
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @interface PageNotificationHistory
 */
export interface PageNotificationHistory {
    /**
     *
     * @type {Array<NotificationHistory>}
     * @memberof PageNotificationHistory
     */
    'data': Array<NotificationHistory>;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PageNotificationHistory
     */
    'links': { [key: string]: string; };
    /**
     *
     * @type {Meta}
     * @memberof PageNotificationHistory
     */
    'meta': Meta;
}
/**
 *
 * @export
 * @interface RenderEmailTemplateRequest
 */
export interface RenderEmailTemplateRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof RenderEmailTemplateRequest
     */
    'template': Array<string>;
    /**
     *
     * @type {string}
     * @memberof RenderEmailTemplateRequest
     */
    'payload': string;
}
/**
 *
 * @export
 * @interface RequestDefaultBehaviorGroupPropertyList
 */
export interface RequestDefaultBehaviorGroupPropertyList {
    /**
     *
     * @type {boolean}
     * @memberof RequestDefaultBehaviorGroupPropertyList
     */
    'only_admins': boolean;
    /**
     *
     * @type {boolean}
     * @memberof RequestDefaultBehaviorGroupPropertyList
     */
    'ignore_preferences': boolean;
}
/**
 *
 * @export
 * @interface RequestSystemSubscriptionProperties
 */
export interface RequestSystemSubscriptionProperties {
    /**
     *
     * @type {boolean}
     * @memberof RequestSystemSubscriptionProperties
     */
    'only_admins': boolean;
    /**
     *
     * @type {string}
     * @memberof RequestSystemSubscriptionProperties
     */
    'group_id'?: string;
}
/**
 *
 * @export
 * @interface ServerInfo
 */
export interface ServerInfo {
    /**
     *
     * @type {Environment}
     * @memberof ServerInfo
     */
    'environment'?: Environment;
}


/**
 *
 * @export
 * @interface SettingsValues
 */
export interface SettingsValues {
    /**
     *
     * @type {{ [key: string]: BundleSettingsValue1; }}
     * @memberof SettingsValues
     */
    'bundles'?: { [key: string]: BundleSettingsValue1; };
}
/**
 *
 * @export
 * @interface SettingsValuesByEventType
 */
export interface SettingsValuesByEventType {
    /**
     *
     * @type {{ [key: string]: BundleSettingsValue; }}
     * @memberof SettingsValuesByEventType
     */
    'bundles'?: { [key: string]: BundleSettingsValue; };
}
/**
 *
 * @export
 * @enum {string}
 */

export const Status = {
    Up: 'UP',
    Maintenance: 'MAINTENANCE'
} as const;

export type Status = typeof Status[keyof typeof Status];


/**
 *
 * @export
 * @interface SystemSubscriptionProperties
 */
export interface SystemSubscriptionProperties {
    /**
     *
     * @type {boolean}
     * @memberof SystemSubscriptionProperties
     */
    'only_admins': boolean;
    /**
     *
     * @type {boolean}
     * @memberof SystemSubscriptionProperties
     */
    'ignore_preferences': boolean;
    /**
     *
     * @type {string}
     * @memberof SystemSubscriptionProperties
     */
    'group_id'?: string;
}
/**
 *
 * @export
 * @interface Template
 */
export interface Template {
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'updated'?: string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'description': string;
    /**
     *
     * @type {string}
     * @memberof Template
     */
    'data': string;
}
/**
 *
 * @export
 * @interface TriggerDailyDigestRequest
 */
export interface TriggerDailyDigestRequest {
    /**
     *
     * @type {string}
     * @memberof TriggerDailyDigestRequest
     */
    'application_name': string;
    /**
     *
     * @type {string}
     * @memberof TriggerDailyDigestRequest
     */
    'bundle_name': string;
    /**
     *
     * @type {string}
     * @memberof TriggerDailyDigestRequest
     */
    'end'?: string;
    /**
     *
     * @type {string}
     * @memberof TriggerDailyDigestRequest
     */
    'org_id': string;
    /**
     *
     * @type {string}
     * @memberof TriggerDailyDigestRequest
     */
    'start'?: string;
}
/**
 *
 * @export
 * @interface UpdateBehaviorGroupRequest
 */
export interface UpdateBehaviorGroupRequest {
    /**
     *
     * @type {string}
     * @memberof UpdateBehaviorGroupRequest
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof UpdateBehaviorGroupRequest
     */
    'endpoint_ids'?: Array<string>;
    /**
     *
     * @type {Set<string>}
     * @memberof UpdateBehaviorGroupRequest
     */
    'event_type_ids'?: Set<string>;
    /**
     *
     * @type {boolean}
     * @memberof UpdateBehaviorGroupRequest
     */
    'display_name_not_null_and_blank'?: boolean;
}
/**
 *
 * @export
 * @interface UserConfigPreferences
 */
export interface UserConfigPreferences {
    /**
     *
     * @type {boolean}
     * @memberof UserConfigPreferences
     */
    'instant_email'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof UserConfigPreferences
     */
    'daily_email'?: boolean;
}
/**
 *
 * @export
 * @interface WebhookProperties
 */
export interface WebhookProperties {
    /**
     *
     * @type {string}
     * @memberof WebhookProperties
     */
    'url': string;
    /**
     *
     * @type {HttpType}
     * @memberof WebhookProperties
     */
    'method': HttpType;
    /**
     *
     * @type {boolean}
     * @memberof WebhookProperties
     */
    'disable_ssl_verification': boolean;
    /**
     *
     * @type {string}
     * @memberof WebhookProperties
     */
    'secret_token'?: string;
    /**
     *
     * @type {BasicAuthentication}
     * @memberof WebhookProperties
     */
    'basic_authentication'?: BasicAuthentication;
}



/**
 * EndpointResourceV1CreateEndpointApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1CreateEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new endpoint from the passed data
         * @summary Create a new endpoint
         * @param {Endpoint} endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1CreateEndpoint: async (endpoint: Endpoint, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            assertParamExists('endpointResourceV1CreateEndpoint', 'endpoint', endpoint)
            const localVarPath = `/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(endpoint, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1CreateEndpointApi - functional programming interface
 * @export
 */
export const EndpointResourceV1CreateEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1CreateEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new endpoint from the passed data
         * @summary Create a new endpoint
         * @param {Endpoint} endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1CreateEndpoint(endpoint: Endpoint, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Endpoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1CreateEndpoint(endpoint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1CreateEndpointApi - factory interface
 * @export
 */
export const EndpointResourceV1CreateEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1CreateEndpointApiFp(configuration)
    return {
        /**
         * Create a new endpoint from the passed data
         * @summary Create a new endpoint
         * @param {Endpoint} endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1CreateEndpoint(endpoint: Endpoint, options?: any): AxiosPromise<Endpoint> {
            return localVarFp.endpointResourceV1CreateEndpoint(endpoint, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1CreateEndpointApi - object-oriented interface
 * @export
 * @class EndpointResourceV1CreateEndpointApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1CreateEndpointApi extends BaseAPI {
    /**
     * Create a new endpoint from the passed data
     * @summary Create a new endpoint
     * @param {Endpoint} endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1CreateEndpointApi
     */
    public endpointResourceV1CreateEndpoint(endpoint: Endpoint, options?: AxiosRequestConfig) {
        return EndpointResourceV1CreateEndpointApiFp(this.configuration).endpointResourceV1CreateEndpoint(endpoint, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1DeleteEndpointApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1DeleteEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1DeleteEndpoint: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('endpointResourceV1DeleteEndpoint', 'id', id)
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1DeleteEndpointApi - functional programming interface
 * @export
 */
export const EndpointResourceV1DeleteEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1DeleteEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1DeleteEndpoint(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1DeleteEndpoint(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1DeleteEndpointApi - factory interface
 * @export
 */
export const EndpointResourceV1DeleteEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1DeleteEndpointApiFp(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1DeleteEndpoint(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.endpointResourceV1DeleteEndpoint(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1DeleteEndpointApi - object-oriented interface
 * @export
 * @class EndpointResourceV1DeleteEndpointApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1DeleteEndpointApi extends BaseAPI {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1DeleteEndpointApi
     */
    public endpointResourceV1DeleteEndpoint(id: string, options?: AxiosRequestConfig) {
        return EndpointResourceV1DeleteEndpointApiFp(this.configuration).endpointResourceV1DeleteEndpoint(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1DisableEndpointApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1DisableEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1DisableEndpoint: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('endpointResourceV1DisableEndpoint', 'id', id)
            const localVarPath = `/endpoints/{id}/enable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1DisableEndpointApi - functional programming interface
 * @export
 */
export const EndpointResourceV1DisableEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1DisableEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1DisableEndpoint(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1DisableEndpoint(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1DisableEndpointApi - factory interface
 * @export
 */
export const EndpointResourceV1DisableEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1DisableEndpointApiFp(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1DisableEndpoint(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.endpointResourceV1DisableEndpoint(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1DisableEndpointApi - object-oriented interface
 * @export
 * @class EndpointResourceV1DisableEndpointApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1DisableEndpointApi extends BaseAPI {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1DisableEndpointApi
     */
    public endpointResourceV1DisableEndpoint(id: string, options?: AxiosRequestConfig) {
        return EndpointResourceV1DisableEndpointApiFp(this.configuration).endpointResourceV1DisableEndpoint(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1EnableEndpointApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1EnableEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1EnableEndpoint: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('endpointResourceV1EnableEndpoint', 'id', id)
            const localVarPath = `/endpoints/{id}/enable`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1EnableEndpointApi - functional programming interface
 * @export
 */
export const EndpointResourceV1EnableEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1EnableEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1EnableEndpoint(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1EnableEndpoint(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1EnableEndpointApi - factory interface
 * @export
 */
export const EndpointResourceV1EnableEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1EnableEndpointApiFp(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1EnableEndpoint(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.endpointResourceV1EnableEndpoint(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1EnableEndpointApi - object-oriented interface
 * @export
 * @class EndpointResourceV1EnableEndpointApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1EnableEndpointApi extends BaseAPI {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1EnableEndpointApi
     */
    public endpointResourceV1EnableEndpoint(id: string, options?: AxiosRequestConfig) {
        return EndpointResourceV1EnableEndpointApiFp(this.configuration).endpointResourceV1EnableEndpoint(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1GetDetailedEndpointHistoryApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1GetDetailedEndpointHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} historyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetDetailedEndpointHistory: async (historyId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyId' is not null or undefined
            assertParamExists('endpointResourceV1GetDetailedEndpointHistory', 'historyId', historyId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('endpointResourceV1GetDetailedEndpointHistory', 'id', id)
            const localVarPath = `/endpoints/{id}/history/{history_id}/details`
                .replace(`{${"history_id"}}`, encodeURIComponent(String(historyId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1GetDetailedEndpointHistoryApi - functional programming interface
 * @export
 */
export const EndpointResourceV1GetDetailedEndpointHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1GetDetailedEndpointHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} historyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1GetDetailedEndpointHistory(historyId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1GetDetailedEndpointHistory(historyId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1GetDetailedEndpointHistoryApi - factory interface
 * @export
 */
export const EndpointResourceV1GetDetailedEndpointHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1GetDetailedEndpointHistoryApiFp(configuration)
    return {
        /**
         *
         * @param {string} historyId
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetDetailedEndpointHistory(historyId: string, id: string, options?: any): AxiosPromise<string> {
            return localVarFp.endpointResourceV1GetDetailedEndpointHistory(historyId, id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1GetDetailedEndpointHistoryApi - object-oriented interface
 * @export
 * @class EndpointResourceV1GetDetailedEndpointHistoryApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1GetDetailedEndpointHistoryApi extends BaseAPI {
    /**
     *
     * @param {string} historyId
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1GetDetailedEndpointHistoryApi
     */
    public endpointResourceV1GetDetailedEndpointHistory(historyId: string, id: string, options?: AxiosRequestConfig) {
        return EndpointResourceV1GetDetailedEndpointHistoryApiFp(this.configuration).endpointResourceV1GetDetailedEndpointHistory(historyId, id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1GetEndpointApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1GetEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetEndpoint: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('endpointResourceV1GetEndpoint', 'id', id)
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1GetEndpointApi - functional programming interface
 * @export
 */
export const EndpointResourceV1GetEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1GetEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1GetEndpoint(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Endpoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1GetEndpoint(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1GetEndpointApi - factory interface
 * @export
 */
export const EndpointResourceV1GetEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1GetEndpointApiFp(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetEndpoint(id: string, options?: any): AxiosPromise<Endpoint> {
            return localVarFp.endpointResourceV1GetEndpoint(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1GetEndpointApi - object-oriented interface
 * @export
 * @class EndpointResourceV1GetEndpointApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1GetEndpointApi extends BaseAPI {
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1GetEndpointApi
     */
    public endpointResourceV1GetEndpoint(id: string, options?: AxiosRequestConfig) {
        return EndpointResourceV1GetEndpointApiFp(this.configuration).endpointResourceV1GetEndpoint(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1GetEndpointHistoryApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1GetEndpointHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {number} [limit] Number of items per page, if not specified or 0 is used, returns a maximum of 500 elements.
         * @param {number} [pageNumber] Page number. Starts at first page (0), if not specified starts at first page.
         * @param {boolean} [includeDetail] Include the detail in the reply
         * @param {number} [offset]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetEndpointHistory: async (id: string, limit?: number, pageNumber?: number, includeDetail?: boolean, offset?: number, sortBy?: string, sortBy2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('endpointResourceV1GetEndpointHistory', 'id', id)
            const localVarPath = `/endpoints/{id}/history`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SecurityScheme required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (includeDetail !== undefined) {
                localVarQueryParameter['includeDetail'] = includeDetail;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortBy2 !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy2;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1GetEndpointHistoryApi - functional programming interface
 * @export
 */
export const EndpointResourceV1GetEndpointHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1GetEndpointHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {number} [limit] Number of items per page, if not specified or 0 is used, returns a maximum of 500 elements.
         * @param {number} [pageNumber] Page number. Starts at first page (0), if not specified starts at first page.
         * @param {boolean} [includeDetail] Include the detail in the reply
         * @param {number} [offset]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1GetEndpointHistory(id: string, limit?: number, pageNumber?: number, includeDetail?: boolean, offset?: number, sortBy?: string, sortBy2?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NotificationHistory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1GetEndpointHistory(id, limit, pageNumber, includeDetail, offset, sortBy, sortBy2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1GetEndpointHistoryApi - factory interface
 * @export
 */
export const EndpointResourceV1GetEndpointHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1GetEndpointHistoryApiFp(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {number} [limit] Number of items per page, if not specified or 0 is used, returns a maximum of 500 elements.
         * @param {number} [pageNumber] Page number. Starts at first page (0), if not specified starts at first page.
         * @param {boolean} [includeDetail] Include the detail in the reply
         * @param {number} [offset]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetEndpointHistory(id: string, limit?: number, pageNumber?: number, includeDetail?: boolean, offset?: number, sortBy?: string, sortBy2?: string, options?: any): AxiosPromise<Array<NotificationHistory>> {
            return localVarFp.endpointResourceV1GetEndpointHistory(id, limit, pageNumber, includeDetail, offset, sortBy, sortBy2, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1GetEndpointHistoryApi - object-oriented interface
 * @export
 * @class EndpointResourceV1GetEndpointHistoryApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1GetEndpointHistoryApi extends BaseAPI {
    /**
     *
     * @param {string} id
     * @param {number} [limit] Number of items per page, if not specified or 0 is used, returns a maximum of 500 elements.
     * @param {number} [pageNumber] Page number. Starts at first page (0), if not specified starts at first page.
     * @param {boolean} [includeDetail] Include the detail in the reply
     * @param {number} [offset]
     * @param {string} [sortBy]
     * @param {string} [sortBy2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1GetEndpointHistoryApi
     */
    public endpointResourceV1GetEndpointHistory(id: string, limit?: number, pageNumber?: number, includeDetail?: boolean, offset?: number, sortBy?: string, sortBy2?: string, options?: AxiosRequestConfig) {
        return EndpointResourceV1GetEndpointHistoryApiFp(this.configuration).endpointResourceV1GetEndpointHistory(id, limit, pageNumber, includeDetail, offset, sortBy, sortBy2, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1GetEndpointsApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1GetEndpointsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of endpoints filtered down by the passed parameters.
         * @summary List endpoints
         * @param {number} [limit] Number of items per page. If the value is 0, it will return all elements
         * @param {number} [pageNumber] Page number. Starts at first page (0), if not specified starts at first page.
         * @param {boolean} [active]
         * @param {string} [name]
         * @param {number} [offset]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {Array<string>} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetEndpoints: async (limit?: number, pageNumber?: number, active?: boolean, name?: string, offset?: number, sortBy?: string, sortBy2?: string, type?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/endpoints`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['pageNumber'] = pageNumber;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortBy2 !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy2;
            }

            if (type) {
                localVarQueryParameter['type'] = type;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1GetEndpointsApi - functional programming interface
 * @export
 */
export const EndpointResourceV1GetEndpointsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1GetEndpointsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of endpoints filtered down by the passed parameters.
         * @summary List endpoints
         * @param {number} [limit] Number of items per page. If the value is 0, it will return all elements
         * @param {number} [pageNumber] Page number. Starts at first page (0), if not specified starts at first page.
         * @param {boolean} [active]
         * @param {string} [name]
         * @param {number} [offset]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {Array<string>} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1GetEndpoints(limit?: number, pageNumber?: number, active?: boolean, name?: string, offset?: number, sortBy?: string, sortBy2?: string, type?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1GetEndpoints(limit, pageNumber, active, name, offset, sortBy, sortBy2, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1GetEndpointsApi - factory interface
 * @export
 */
export const EndpointResourceV1GetEndpointsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1GetEndpointsApiFp(configuration)
    return {
        /**
         * Get a list of endpoints filtered down by the passed parameters.
         * @summary List endpoints
         * @param {number} [limit] Number of items per page. If the value is 0, it will return all elements
         * @param {number} [pageNumber] Page number. Starts at first page (0), if not specified starts at first page.
         * @param {boolean} [active]
         * @param {string} [name]
         * @param {number} [offset]
         * @param {string} [sortBy]
         * @param {string} [sortBy2]
         * @param {Array<string>} [type]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetEndpoints(limit?: number, pageNumber?: number, active?: boolean, name?: string, offset?: number, sortBy?: string, sortBy2?: string, type?: Array<string>, options?: any): AxiosPromise<EndpointPage> {
            return localVarFp.endpointResourceV1GetEndpoints(limit, pageNumber, active, name, offset, sortBy, sortBy2, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1GetEndpointsApi - object-oriented interface
 * @export
 * @class EndpointResourceV1GetEndpointsApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1GetEndpointsApi extends BaseAPI {
    /**
     * Get a list of endpoints filtered down by the passed parameters.
     * @summary List endpoints
     * @param {number} [limit] Number of items per page. If the value is 0, it will return all elements
     * @param {number} [pageNumber] Page number. Starts at first page (0), if not specified starts at first page.
     * @param {boolean} [active]
     * @param {string} [name]
     * @param {number} [offset]
     * @param {string} [sortBy]
     * @param {string} [sortBy2]
     * @param {Array<string>} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1GetEndpointsApi
     */
    public endpointResourceV1GetEndpoints(limit?: number, pageNumber?: number, active?: boolean, name?: string, offset?: number, sortBy?: string, sortBy2?: string, type?: Array<string>, options?: AxiosRequestConfig) {
        return EndpointResourceV1GetEndpointsApiFp(this.configuration).endpointResourceV1GetEndpoints(limit, pageNumber, active, name, offset, sortBy, sortBy2, type, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {RequestSystemSubscriptionProperties} requestSystemSubscriptionProperties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetOrCreateDrawerSubscriptionEndpoint: async (requestSystemSubscriptionProperties: RequestSystemSubscriptionProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestSystemSubscriptionProperties' is not null or undefined
            assertParamExists('endpointResourceV1GetOrCreateDrawerSubscriptionEndpoint', 'requestSystemSubscriptionProperties', requestSystemSubscriptionProperties)
            const localVarPath = `/endpoints/system/drawer_subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestSystemSubscriptionProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApi - functional programming interface
 * @export
 */
export const EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {RequestSystemSubscriptionProperties} requestSystemSubscriptionProperties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1GetOrCreateDrawerSubscriptionEndpoint(requestSystemSubscriptionProperties: RequestSystemSubscriptionProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Endpoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1GetOrCreateDrawerSubscriptionEndpoint(requestSystemSubscriptionProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApi - factory interface
 * @export
 */
export const EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApiFp(configuration)
    return {
        /**
         *
         * @param {RequestSystemSubscriptionProperties} requestSystemSubscriptionProperties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetOrCreateDrawerSubscriptionEndpoint(requestSystemSubscriptionProperties: RequestSystemSubscriptionProperties, options?: any): AxiosPromise<Endpoint> {
            return localVarFp.endpointResourceV1GetOrCreateDrawerSubscriptionEndpoint(requestSystemSubscriptionProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApi - object-oriented interface
 * @export
 * @class EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApi extends BaseAPI {
    /**
     *
     * @param {RequestSystemSubscriptionProperties} requestSystemSubscriptionProperties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApi
     */
    public endpointResourceV1GetOrCreateDrawerSubscriptionEndpoint(requestSystemSubscriptionProperties: RequestSystemSubscriptionProperties, options?: AxiosRequestConfig) {
        return EndpointResourceV1GetOrCreateDrawerSubscriptionEndpointApiFp(this.configuration).endpointResourceV1GetOrCreateDrawerSubscriptionEndpoint(requestSystemSubscriptionProperties, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {RequestSystemSubscriptionProperties} requestSystemSubscriptionProperties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetOrCreateEmailSubscriptionEndpoint: async (requestSystemSubscriptionProperties: RequestSystemSubscriptionProperties, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestSystemSubscriptionProperties' is not null or undefined
            assertParamExists('endpointResourceV1GetOrCreateEmailSubscriptionEndpoint', 'requestSystemSubscriptionProperties', requestSystemSubscriptionProperties)
            const localVarPath = `/endpoints/system/email_subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestSystemSubscriptionProperties, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApi - functional programming interface
 * @export
 */
export const EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {RequestSystemSubscriptionProperties} requestSystemSubscriptionProperties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1GetOrCreateEmailSubscriptionEndpoint(requestSystemSubscriptionProperties: RequestSystemSubscriptionProperties, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Endpoint>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1GetOrCreateEmailSubscriptionEndpoint(requestSystemSubscriptionProperties, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApi - factory interface
 * @export
 */
export const EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApiFp(configuration)
    return {
        /**
         *
         * @param {RequestSystemSubscriptionProperties} requestSystemSubscriptionProperties
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1GetOrCreateEmailSubscriptionEndpoint(requestSystemSubscriptionProperties: RequestSystemSubscriptionProperties, options?: any): AxiosPromise<Endpoint> {
            return localVarFp.endpointResourceV1GetOrCreateEmailSubscriptionEndpoint(requestSystemSubscriptionProperties, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApi - object-oriented interface
 * @export
 * @class EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApi extends BaseAPI {
    /**
     *
     * @param {RequestSystemSubscriptionProperties} requestSystemSubscriptionProperties
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApi
     */
    public endpointResourceV1GetOrCreateEmailSubscriptionEndpoint(requestSystemSubscriptionProperties: RequestSystemSubscriptionProperties, options?: AxiosRequestConfig) {
        return EndpointResourceV1GetOrCreateEmailSubscriptionEndpointApiFp(this.configuration).endpointResourceV1GetOrCreateEmailSubscriptionEndpoint(requestSystemSubscriptionProperties, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1SubscribeEmailApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1SubscribeEmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {EmailSubscriptionType} type
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        endpointResourceV1SubscribeEmail: async (applicationName: string, bundleName: string, type: EmailSubscriptionType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationName' is not null or undefined
            assertParamExists('endpointResourceV1SubscribeEmail', 'applicationName', applicationName)
            // verify required parameter 'bundleName' is not null or undefined
            assertParamExists('endpointResourceV1SubscribeEmail', 'bundleName', bundleName)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('endpointResourceV1SubscribeEmail', 'type', type)
            const localVarPath = `/endpoints/email/subscription/{bundleName}/{applicationName}/{type}`
                .replace(`{${"applicationName"}}`, encodeURIComponent(String(applicationName)))
                .replace(`{${"bundleName"}}`, encodeURIComponent(String(bundleName)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1SubscribeEmailApi - functional programming interface
 * @export
 */
export const EndpointResourceV1SubscribeEmailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1SubscribeEmailApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {EmailSubscriptionType} type
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async endpointResourceV1SubscribeEmail(applicationName: string, bundleName: string, type: EmailSubscriptionType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1SubscribeEmail(applicationName, bundleName, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1SubscribeEmailApi - factory interface
 * @export
 */
export const EndpointResourceV1SubscribeEmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1SubscribeEmailApiFp(configuration)
    return {
        /**
         *
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {EmailSubscriptionType} type
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        endpointResourceV1SubscribeEmail(applicationName: string, bundleName: string, type: EmailSubscriptionType, options?: any): AxiosPromise<boolean> {
            return localVarFp.endpointResourceV1SubscribeEmail(applicationName, bundleName, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1SubscribeEmailApi - object-oriented interface
 * @export
 * @class EndpointResourceV1SubscribeEmailApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1SubscribeEmailApi extends BaseAPI {
    /**
     *
     * @param {string} applicationName
     * @param {string} bundleName
     * @param {EmailSubscriptionType} type
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EndpointResourceV1SubscribeEmailApi
     */
    public endpointResourceV1SubscribeEmail(applicationName: string, bundleName: string, type: EmailSubscriptionType, options?: AxiosRequestConfig) {
        return EndpointResourceV1SubscribeEmailApiFp(this.configuration).endpointResourceV1SubscribeEmail(applicationName, bundleName, type, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1TestEndpointApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1TestEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} uuid The UUID of the endpoint to test
         * @param {EndpointTestRequest} [endpointTestRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1TestEndpoint: async (uuid: string, endpointTestRequest?: EndpointTestRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('endpointResourceV1TestEndpoint', 'uuid', uuid)
            const localVarPath = `/endpoints/{uuid}/test`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(endpointTestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1TestEndpointApi - functional programming interface
 * @export
 */
export const EndpointResourceV1TestEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1TestEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} uuid The UUID of the endpoint to test
         * @param {EndpointTestRequest} [endpointTestRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1TestEndpoint(uuid: string, endpointTestRequest?: EndpointTestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1TestEndpoint(uuid, endpointTestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1TestEndpointApi - factory interface
 * @export
 */
export const EndpointResourceV1TestEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1TestEndpointApiFp(configuration)
    return {
        /**
         *
         * @param {string} uuid The UUID of the endpoint to test
         * @param {EndpointTestRequest} [endpointTestRequest]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1TestEndpoint(uuid: string, endpointTestRequest?: EndpointTestRequest, options?: any): AxiosPromise<void> {
            return localVarFp.endpointResourceV1TestEndpoint(uuid, endpointTestRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1TestEndpointApi - object-oriented interface
 * @export
 * @class EndpointResourceV1TestEndpointApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1TestEndpointApi extends BaseAPI {
    /**
     *
     * @param {string} uuid The UUID of the endpoint to test
     * @param {EndpointTestRequest} [endpointTestRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1TestEndpointApi
     */
    public endpointResourceV1TestEndpoint(uuid: string, endpointTestRequest?: EndpointTestRequest, options?: AxiosRequestConfig) {
        return EndpointResourceV1TestEndpointApiFp(this.configuration).endpointResourceV1TestEndpoint(uuid, endpointTestRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1UnsubscribeEmailApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1UnsubscribeEmailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {EmailSubscriptionType} type
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        endpointResourceV1UnsubscribeEmail: async (applicationName: string, bundleName: string, type: EmailSubscriptionType, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicationName' is not null or undefined
            assertParamExists('endpointResourceV1UnsubscribeEmail', 'applicationName', applicationName)
            // verify required parameter 'bundleName' is not null or undefined
            assertParamExists('endpointResourceV1UnsubscribeEmail', 'bundleName', bundleName)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('endpointResourceV1UnsubscribeEmail', 'type', type)
            const localVarPath = `/endpoints/email/subscription/{bundleName}/{applicationName}/{type}`
                .replace(`{${"applicationName"}}`, encodeURIComponent(String(applicationName)))
                .replace(`{${"bundleName"}}`, encodeURIComponent(String(bundleName)))
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1UnsubscribeEmailApi - functional programming interface
 * @export
 */
export const EndpointResourceV1UnsubscribeEmailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1UnsubscribeEmailApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {EmailSubscriptionType} type
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async endpointResourceV1UnsubscribeEmail(applicationName: string, bundleName: string, type: EmailSubscriptionType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1UnsubscribeEmail(applicationName, bundleName, type, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1UnsubscribeEmailApi - factory interface
 * @export
 */
export const EndpointResourceV1UnsubscribeEmailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1UnsubscribeEmailApiFp(configuration)
    return {
        /**
         *
         * @param {string} applicationName
         * @param {string} bundleName
         * @param {EmailSubscriptionType} type
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        endpointResourceV1UnsubscribeEmail(applicationName: string, bundleName: string, type: EmailSubscriptionType, options?: any): AxiosPromise<boolean> {
            return localVarFp.endpointResourceV1UnsubscribeEmail(applicationName, bundleName, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1UnsubscribeEmailApi - object-oriented interface
 * @export
 * @class EndpointResourceV1UnsubscribeEmailApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1UnsubscribeEmailApi extends BaseAPI {
    /**
     *
     * @param {string} applicationName
     * @param {string} bundleName
     * @param {EmailSubscriptionType} type
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof EndpointResourceV1UnsubscribeEmailApi
     */
    public endpointResourceV1UnsubscribeEmail(applicationName: string, bundleName: string, type: EmailSubscriptionType, options?: AxiosRequestConfig) {
        return EndpointResourceV1UnsubscribeEmailApiFp(this.configuration).endpointResourceV1UnsubscribeEmail(applicationName, bundleName, type, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EndpointResourceV1UpdateEndpointApi - axios parameter creator
 * @export
 */
export const EndpointResourceV1UpdateEndpointApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} id
         * @param {Endpoint} endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1UpdateEndpoint: async (id: string, endpoint: Endpoint, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('endpointResourceV1UpdateEndpoint', 'id', id)
            // verify required parameter 'endpoint' is not null or undefined
            assertParamExists('endpointResourceV1UpdateEndpoint', 'endpoint', endpoint)
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(endpoint, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EndpointResourceV1UpdateEndpointApi - functional programming interface
 * @export
 */
export const EndpointResourceV1UpdateEndpointApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EndpointResourceV1UpdateEndpointApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {Endpoint} endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async endpointResourceV1UpdateEndpoint(id: string, endpoint: Endpoint, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.endpointResourceV1UpdateEndpoint(id, endpoint, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EndpointResourceV1UpdateEndpointApi - factory interface
 * @export
 */
export const EndpointResourceV1UpdateEndpointApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EndpointResourceV1UpdateEndpointApiFp(configuration)
    return {
        /**
         *
         * @param {string} id
         * @param {Endpoint} endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        endpointResourceV1UpdateEndpoint(id: string, endpoint: Endpoint, options?: any): AxiosPromise<string> {
            return localVarFp.endpointResourceV1UpdateEndpoint(id, endpoint, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EndpointResourceV1UpdateEndpointApi - object-oriented interface
 * @export
 * @class EndpointResourceV1UpdateEndpointApi
 * @extends {BaseAPI}
 */
export class EndpointResourceV1UpdateEndpointApi extends BaseAPI {
    /**
     *
     * @param {string} id
     * @param {Endpoint} endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EndpointResourceV1UpdateEndpointApi
     */
    public endpointResourceV1UpdateEndpoint(id: string, endpoint: Endpoint, options?: AxiosRequestConfig) {
        return EndpointResourceV1UpdateEndpointApiFp(this.configuration).endpointResourceV1UpdateEndpoint(id, endpoint, options).then((request) => request(this.axios, this.basePath));
    }
}



