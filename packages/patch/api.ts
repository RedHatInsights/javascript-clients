/* tslint:disable */
/* eslint-disable */
/**
 * Patchman-engine API
 * API of the Patch application on [console.redhat.com](https://console.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v3.6.94
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ControllersAdvisoriesDBLookup
 */
export interface ControllersAdvisoriesDBLookup {
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'advisory_type_name'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'applicable_systems'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'cve_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'installable_systems'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'public_date'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'reboot_required'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'release_versions'?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'severity'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoriesDBLookup
     */
    'synopsis'?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoriesResponse
 */
export interface ControllersAdvisoriesResponse {
    /**
     *
     * @type {Array<ControllersAdvisoryItem>}
     * @memberof ControllersAdvisoriesResponse
     */
    'data'?: Array<ControllersAdvisoryItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersAdvisoriesResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersAdvisoriesResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersAdvisoriesSystemsResponse
 */
export interface ControllersAdvisoriesSystemsResponse {
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ControllersAdvisoriesSystemsResponse
     */
    'data'?: { [key: string]: Array<string>; };
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersAdvisoriesSystemsResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersAdvisoriesSystemsResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailAttributes
 */
export interface ControllersAdvisoryDetailAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'advisory_type_name'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'cves'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'fixes'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'modified_date'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'packages'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'public_date'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'reboot_required'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'references'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'release_versions'?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'severity'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'solution'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'synopsis'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    'topic'?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailItem
 */
export interface ControllersAdvisoryDetailItem {
    /**
     *
     * @type {ControllersAdvisoryDetailAttributes}
     * @memberof ControllersAdvisoryDetailItem
     */
    'attributes'?: ControllersAdvisoryDetailAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailItem
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailResponse
 */
export interface ControllersAdvisoryDetailResponse {
    /**
     *
     * @type {ControllersAdvisoryDetailItem}
     * @memberof ControllersAdvisoryDetailResponse
     */
    'data'?: ControllersAdvisoryDetailItem;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryItem
 */
export interface ControllersAdvisoryItem {
    /**
     *
     * @type {ControllersAdvisoryItemAttributes}
     * @memberof ControllersAdvisoryItem
     */
    'attributes'?: ControllersAdvisoryItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItem
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryItemAttributes
 */
export interface ControllersAdvisoryItemAttributes {
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    'advisory_type_name'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    'applicable_systems'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    'cve_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    'description'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    'installable_systems'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    'public_date'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisoryItemAttributes
     */
    'reboot_required'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryItemAttributes
     */
    'release_versions'?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    'severity'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    'synopsis'?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisorySystemDBLookup
 */
export interface ControllersAdvisorySystemDBLookup {
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'baseline_id'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'baseline_name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'built_pkgcache'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'culled_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'groups'?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'last_upload'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'os'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'rhsm'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'satellite_managed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'stale'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'stale_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'stale_warning_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'status'?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'tags'?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'template_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    'template_uuid'?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisorySystemItem
 */
export interface ControllersAdvisorySystemItem {
    /**
     *
     * @type {ControllersAdvisorySystemItemAttributes}
     * @memberof ControllersAdvisorySystemItem
     */
    'attributes'?: ControllersAdvisorySystemItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItem
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisorySystemItemAttributes
 */
export interface ControllersAdvisorySystemItemAttributes {
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'baseline_id'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'baseline_name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'built_pkgcache'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'culled_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'groups'?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'last_upload'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'os'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'rhsm'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'satellite_managed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'stale'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'stale_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'stale_warning_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'status'?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'tags'?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'template_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    'template_uuid'?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisorySystemsResponse
 */
export interface ControllersAdvisorySystemsResponse {
    /**
     *
     * @type {Array<ControllersAdvisorySystemItem>}
     * @memberof ControllersAdvisorySystemsResponse
     */
    'data'?: Array<ControllersAdvisorySystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersAdvisorySystemsResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersAdvisorySystemsResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersBaselineConfig
 */
export interface ControllersBaselineConfig {
    /**
     * Filter applicable advisories (updates) by the latest publish time.
     * @type {string}
     * @memberof ControllersBaselineConfig
     */
    'to_time'?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineDetailAttributes
 */
export interface ControllersBaselineDetailAttributes {
    /**
     *
     * @type {ControllersBaselineConfig}
     * @memberof ControllersBaselineDetailAttributes
     */
    'config'?: ControllersBaselineConfig;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    'creator'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    'last_edited'?: string;
    /**
     * Baseline name
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    'published'?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineDetailItem
 */
export interface ControllersBaselineDetailItem {
    /**
     *
     * @type {ControllersBaselineDetailAttributes}
     * @memberof ControllersBaselineDetailItem
     */
    'attributes'?: ControllersBaselineDetailAttributes;
    /**
     * Baseline ID
     * @type {number}
     * @memberof ControllersBaselineDetailItem
     */
    'id'?: number;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersBaselineDetailItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineDetailResponse
 */
export interface ControllersBaselineDetailResponse {
    /**
     *
     * @type {ControllersBaselineDetailItem}
     * @memberof ControllersBaselineDetailResponse
     */
    'data'?: ControllersBaselineDetailItem;
}
/**
 *
 * @export
 * @interface ControllersBaselineItem
 */
export interface ControllersBaselineItem {
    /**
     *
     * @type {ControllersBaselineItemAttributes}
     * @memberof ControllersBaselineItem
     */
    'attributes'?: ControllersBaselineItemAttributes;
    /**
     * Unique baseline id
     * @type {number}
     * @memberof ControllersBaselineItem
     */
    'id'?: number;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersBaselineItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineItemAttributes
 */
export interface ControllersBaselineItemAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineItemAttributes
     */
    'creator'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineItemAttributes
     */
    'last_edited'?: string;
    /**
     * Baseline name
     * @type {string}
     * @memberof ControllersBaselineItemAttributes
     */
    'name'?: string;
    /**
     * Created and updated dates
     * @type {string}
     * @memberof ControllersBaselineItemAttributes
     */
    'published'?: string;
    /**
     * Count of the systems associated with the baseline
     * @type {number}
     * @memberof ControllersBaselineItemAttributes
     */
    'systems'?: number;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemAttributes
 */
export interface ControllersBaselineSystemAttributes {
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    'applicable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    'applicable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    'applicable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    'applicable_rhsa_count'?: number;
    /**
     * Baseline system display name
     * @type {string}
     * @memberof ControllersBaselineSystemAttributes
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersBaselineSystemAttributes
     */
    'groups'?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    'installable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    'installable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    'installable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    'installable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemAttributes
     */
    'last_upload'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemAttributes
     */
    'os'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemAttributes
     */
    'rhsm'?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersBaselineSystemAttributes
     */
    'tags'?: Array<ControllersSystemTag>;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemItem
 */
export interface ControllersBaselineSystemItem {
    /**
     *
     * @type {ControllersBaselineSystemAttributes}
     * @memberof ControllersBaselineSystemItem
     */
    'attributes'?: ControllersBaselineSystemAttributes;
    /**
     * Baseline system inventory ID (uuid format)
     * @type {string}
     * @memberof ControllersBaselineSystemItem
     */
    'inventory_id'?: string;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersBaselineSystemItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemsDBLookup
 */
export interface ControllersBaselineSystemsDBLookup {
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'applicable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'applicable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'applicable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'applicable_rhsa_count'?: number;
    /**
     * Baseline system display name
     * @type {string}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'groups'?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'installable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'installable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'installable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'installable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'last_upload'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'os'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'rhsm'?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    'tags'?: Array<ControllersSystemTag>;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemsRemoveRequest
 */
export interface ControllersBaselineSystemsRemoveRequest {
    /**
     * List of inventory IDs to have baselines removed
     * @type {Array<string>}
     * @memberof ControllersBaselineSystemsRemoveRequest
     */
    'inventory_ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemsResponse
 */
export interface ControllersBaselineSystemsResponse {
    /**
     *
     * @type {Array<ControllersBaselineSystemItem>}
     * @memberof ControllersBaselineSystemsResponse
     */
    'data'?: Array<ControllersBaselineSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersBaselineSystemsResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersBaselineSystemsResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersBaselinesMeta
 */
export interface ControllersBaselinesMeta {
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersBaselinesMeta
     */
    'creators'?: Array<string>;
    /**
     * Used filters
     * @type {{ [key: string]: ControllersFilterData; }}
     * @memberof ControllersBaselinesMeta
     */
    'filter'?: { [key: string]: ControllersFilterData; };
    /**
     * Show whether customer has some registered systems
     * @type {boolean}
     * @memberof ControllersBaselinesMeta
     */
    'has_systems'?: boolean;
    /**
     * Used response limit (page size) - pagination
     * @type {number}
     * @memberof ControllersBaselinesMeta
     */
    'limit'?: number;
    /**
     * Used response offset - pagination
     * @type {number}
     * @memberof ControllersBaselinesMeta
     */
    'offset'?: number;
    /**
     * Used search terms
     * @type {string}
     * @memberof ControllersBaselinesMeta
     */
    'search'?: string;
    /**
     * Used sorting fields
     * @type {Array<string>}
     * @memberof ControllersBaselinesMeta
     */
    'sort'?: Array<string>;
    /**
     * Some subtotals used by some endpoints
     * @type {{ [key: string]: number; }}
     * @memberof ControllersBaselinesMeta
     */
    'subtotals'?: { [key: string]: number; };
    /**
     * Total items count to return
     * @type {number}
     * @memberof ControllersBaselinesMeta
     */
    'total_items'?: number;
}
/**
 *
 * @export
 * @interface ControllersBaselinesResponse
 */
export interface ControllersBaselinesResponse {
    /**
     * Baseline items
     * @type {Array<ControllersBaselineItem>}
     * @memberof ControllersBaselinesResponse
     */
    'data'?: Array<ControllersBaselineItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersBaselinesResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersBaselinesMeta}
     * @memberof ControllersBaselinesResponse
     */
    'meta'?: ControllersBaselinesMeta;
}
/**
 *
 * @export
 * @interface ControllersCreateBaselineRequest
 */
export interface ControllersCreateBaselineRequest {
    /**
     *
     * @type {ControllersBaselineConfig}
     * @memberof ControllersCreateBaselineRequest
     */
    'config'?: ControllersBaselineConfig;
    /**
     * Description of the baseline (optional).
     * @type {string}
     * @memberof ControllersCreateBaselineRequest
     */
    'description'?: string;
    /**
     * Inventory IDs list of systems to associate with this baseline (optional).
     * @type {Array<string>}
     * @memberof ControllersCreateBaselineRequest
     */
    'inventory_ids'?: Array<string>;
    /**
     * Baseline name
     * @type {string}
     * @memberof ControllersCreateBaselineRequest
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ControllersCreateBaselineResponse
 */
export interface ControllersCreateBaselineResponse {
    /**
     * Updated baseline unique ID, it can not be changed
     * @type {number}
     * @memberof ControllersCreateBaselineResponse
     */
    'baseline_id'?: number;
}
/**
 *
 * @export
 * @interface ControllersDeleteBaselineResponse
 */
export interface ControllersDeleteBaselineResponse {
    /**
     * Updated baseline unique ID, it can not be changed
     * @type {number}
     * @memberof ControllersDeleteBaselineResponse
     */
    'baseline_id'?: number;
}
/**
 *
 * @export
 * @interface ControllersFilterData
 */
export interface ControllersFilterData {
    /**
     *
     * @type {string}
     * @memberof ControllersFilterData
     */
    'op'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersFilterData
     */
    'values'?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersIDPlain
 */
export interface ControllersIDPlain {
    /**
     *
     * @type {string}
     * @memberof ControllersIDPlain
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface ControllersIDSatelliteManaged
 */
export interface ControllersIDSatelliteManaged {
    /**
     *
     * @type {string}
     * @memberof ControllersIDSatelliteManaged
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersIDSatelliteManaged
     */
    'satellite_managed'?: boolean;
}
/**
 *
 * @export
 * @interface ControllersIDStatus
 */
export interface ControllersIDStatus {
    /**
     *
     * @type {string}
     * @memberof ControllersIDStatus
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersIDStatus
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface ControllersIDsPlainResponse
 */
export interface ControllersIDsPlainResponse {
    /**
     *
     * @type {Array<ControllersIDPlain>}
     * @memberof ControllersIDsPlainResponse
     */
    'data'?: Array<ControllersIDPlain>;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersIDsPlainResponse
     */
    'ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersIDsSatelliteManagedResponse
 */
export interface ControllersIDsSatelliteManagedResponse {
    /**
     *
     * @type {Array<ControllersIDSatelliteManaged>}
     * @memberof ControllersIDsSatelliteManagedResponse
     */
    'data'?: Array<ControllersIDSatelliteManaged>;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersIDsSatelliteManagedResponse
     */
    'ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersIDsStatusResponse
 */
export interface ControllersIDsStatusResponse {
    /**
     *
     * @type {Array<ControllersIDStatus>}
     * @memberof ControllersIDsStatusResponse
     */
    'data'?: Array<ControllersIDStatus>;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersIDsStatusResponse
     */
    'ids'?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersLinks
 */
export interface ControllersLinks {
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    'first'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    'last'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    'next'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    'previous'?: string;
}
/**
 *
 * @export
 * @interface ControllersListMeta
 */
export interface ControllersListMeta {
    /**
     * Used filters
     * @type {{ [key: string]: ControllersFilterData; }}
     * @memberof ControllersListMeta
     */
    'filter'?: { [key: string]: ControllersFilterData; };
    /**
     * Show whether customer has some registered systems
     * @type {boolean}
     * @memberof ControllersListMeta
     */
    'has_systems'?: boolean;
    /**
     * Used response limit (page size) - pagination
     * @type {number}
     * @memberof ControllersListMeta
     */
    'limit'?: number;
    /**
     * Used response offset - pagination
     * @type {number}
     * @memberof ControllersListMeta
     */
    'offset'?: number;
    /**
     * Used search terms
     * @type {string}
     * @memberof ControllersListMeta
     */
    'search'?: string;
    /**
     * Used sorting fields
     * @type {Array<string>}
     * @memberof ControllersListMeta
     */
    'sort'?: Array<string>;
    /**
     * Some subtotals used by some endpoints
     * @type {{ [key: string]: number; }}
     * @memberof ControllersListMeta
     */
    'subtotals'?: { [key: string]: number; };
    /**
     * Total items count to return
     * @type {number}
     * @memberof ControllersListMeta
     */
    'total_items'?: number;
}
/**
 *
 * @export
 * @interface ControllersPackageDetailAttributes
 */
export interface ControllersPackageDetailAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    'advisory_id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    'summary'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    'version'?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageDetailItem
 */
export interface ControllersPackageDetailItem {
    /**
     *
     * @type {ControllersPackageDetailAttributes}
     * @memberof ControllersPackageDetailItem
     */
    'attributes'?: ControllersPackageDetailAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailItem
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageDetailResponse
 */
export interface ControllersPackageDetailResponse {
    /**
     *
     * @type {ControllersPackageDetailItem}
     * @memberof ControllersPackageDetailResponse
     */
    'data'?: ControllersPackageDetailItem;
}
/**
 *
 * @export
 * @interface ControllersPackageItem
 */
export interface ControllersPackageItem {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageItem
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageItem
     */
    'summary'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersPackageItem
     */
    'systems_applicable'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersPackageItem
     */
    'systems_installable'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersPackageItem
     */
    'systems_installed'?: number;
}
/**
 *
 * @export
 * @interface ControllersPackageSystemItem
 */
export interface ControllersPackageSystemItem {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    'available_evra'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersPackageSystemItem
     */
    'baseline_id'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    'baseline_name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersPackageSystemItem
     */
    'baseline_uptodate'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersPackageSystemItem
     */
    'groups'?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    'installed_evra'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    'os'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    'rhsm'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersPackageSystemItem
     */
    'satellite_managed'?: boolean;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersPackageSystemItem
     */
    'tags'?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    'template_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    'template_uuid'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersPackageSystemItem
     */
    'updatable'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    'update_status'?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageSystemsResponse
 */
export interface ControllersPackageSystemsResponse {
    /**
     *
     * @type {Array<ControllersPackageSystemItem>}
     * @memberof ControllersPackageSystemsResponse
     */
    'data'?: Array<ControllersPackageSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersPackageSystemsResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersPackageSystemsResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersPackageVersionItem
 */
export interface ControllersPackageVersionItem {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageVersionItem
     */
    'evra'?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageVersionsResponse
 */
export interface ControllersPackageVersionsResponse {
    /**
     *
     * @type {Array<ControllersPackageVersionItem>}
     * @memberof ControllersPackageVersionsResponse
     */
    'data'?: Array<ControllersPackageVersionItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersPackageVersionsResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersPackageVersionsResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersPackagesResponse
 */
export interface ControllersPackagesResponse {
    /**
     *
     * @type {Array<ControllersPackageItem>}
     * @memberof ControllersPackagesResponse
     */
    'data'?: Array<ControllersPackageItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersPackagesResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersPackagesResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoriesDBLookup
 */
export interface ControllersSystemAdvisoriesDBLookup {
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    'advisory_type_name'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    'cve_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    'public_date'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    'reboot_required'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    'release_versions'?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    'severity'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    'status'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    'synopsis'?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoriesResponse
 */
export interface ControllersSystemAdvisoriesResponse {
    /**
     * advisories items
     * @type {Array<ControllersSystemAdvisoryItem>}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    'data'?: Array<ControllersSystemAdvisoryItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoryItem
 */
export interface ControllersSystemAdvisoryItem {
    /**
     *
     * @type {ControllersSystemAdvisoryItemAttributes}
     * @memberof ControllersSystemAdvisoryItem
     */
    'attributes'?: ControllersSystemAdvisoryItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItem
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoryItemAttributes
 */
export interface ControllersSystemAdvisoryItemAttributes {
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    'advisory_type_name'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    'cve_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    'public_date'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    'reboot_required'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    'release_versions'?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    'severity'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    'status'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    'synopsis'?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemDBLookup
 */
export interface ControllersSystemDBLookup {
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'applicable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'applicable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'applicable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'applicable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'arch'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'baseline_id'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'baseline_name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemDBLookup
     */
    'built_pkgcache'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'culled_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersSystemDBLookup
     */
    'groups'?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'installable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'installable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'installable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'installable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'last_evaluation'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'last_upload'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'os'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'packages_applicable'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'packages_installable'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'packages_installed'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    'rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'rhsm'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemDBLookup
     */
    'satellite_managed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemDBLookup
     */
    'stale'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'stale_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'stale_warning_timestamp'?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersSystemDBLookup
     */
    'tags'?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'template_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    'template_uuid'?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemDetailResponse
 */
export interface ControllersSystemDetailResponse {
    /**
     *
     * @type {ControllersSystemItemExtended}
     * @memberof ControllersSystemDetailResponse
     */
    'data'?: ControllersSystemItemExtended;
}
/**
 *
 * @export
 * @interface ControllersSystemGroup
 */
export interface ControllersSystemGroup {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemGroup
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemGroup
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemItem
 */
export interface ControllersSystemItem {
    /**
     *
     * @type {ControllersSystemItemAttributes}
     * @memberof ControllersSystemItem
     */
    'attributes'?: ControllersSystemItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItem
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemItemAttributes
 */
export interface ControllersSystemItemAttributes {
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'applicable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'applicable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'applicable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'applicable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'arch'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'baseline_id'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'baseline_name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributes
     */
    'built_pkgcache'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'culled_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersSystemItemAttributes
     */
    'groups'?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'installable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'installable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'installable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'installable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'last_evaluation'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'last_upload'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'os'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'packages_applicable'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'packages_installable'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'packages_installed'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    'rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'rhsm'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributes
     */
    'satellite_managed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributes
     */
    'stale'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'stale_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'stale_warning_timestamp'?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersSystemItemAttributes
     */
    'tags'?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'template_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    'template_uuid'?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemItemAttributesExtended
 */
export interface ControllersSystemItemAttributesExtended {
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'applicable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'applicable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'applicable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'applicable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'arch'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'baseline_id'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'baseline_name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'baseline_uptodate'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'built_pkgcache'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'created'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'culled_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'groups'?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'insights_id'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'installable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'installable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'installable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'installable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'last_evaluation'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'last_upload'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'os'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'os_major'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'os_minor'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'os_name'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'packages_applicable'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'packages_installable'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'packages_installed'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'packages_updatable'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'rhsm'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'satellite_managed'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'stale'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'stale_timestamp'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'stale_warning_timestamp'?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'tags'?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'template_name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'template_uuid'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributesExtended
     */
    'third_party'?: boolean;
}
/**
 *
 * @export
 * @interface ControllersSystemItemExtended
 */
export interface ControllersSystemItemExtended {
    /**
     *
     * @type {ControllersSystemItemAttributesExtended}
     * @memberof ControllersSystemItemExtended
     */
    'attributes'?: ControllersSystemItemAttributesExtended;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemExtended
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemExtended
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemPackageData
 */
export interface ControllersSystemPackageData {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    'evra'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    'summary'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemPackageData
     */
    'updatable'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    'update_status'?: string;
    /**
     *
     * @type {Array<ModelsPackageUpdate>}
     * @memberof ControllersSystemPackageData
     */
    'updates'?: Array<ModelsPackageUpdate>;
}
/**
 *
 * @export
 * @interface ControllersSystemPackageInline
 */
export interface ControllersSystemPackageInline {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    'evra'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    'latest_applicable'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    'latest_installable'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    'summary'?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemPackageInline
     */
    'updatable'?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    'update_status'?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemPackageResponse
 */
export interface ControllersSystemPackageResponse {
    /**
     *
     * @type {Array<ControllersSystemPackageData>}
     * @memberof ControllersSystemPackageResponse
     */
    'data'?: Array<ControllersSystemPackageData>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemPackageResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemPackageResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemTag
 */
export interface ControllersSystemTag {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemTag
     */
    'key'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemTag
     */
    'namespace'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemTag
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemTagItem
 */
export interface ControllersSystemTagItem {
    /**
     *
     * @type {number}
     * @memberof ControllersSystemTagItem
     */
    'count'?: number;
    /**
     *
     * @type {ControllersSystemTag}
     * @memberof ControllersSystemTagItem
     */
    'tag'?: ControllersSystemTag;
}
/**
 *
 * @export
 * @interface ControllersSystemTagsResponse
 */
export interface ControllersSystemTagsResponse {
    /**
     *
     * @type {Array<ControllersSystemTagItem>}
     * @memberof ControllersSystemTagsResponse
     */
    'data'?: Array<ControllersSystemTagItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemTagsResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemTagsResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemVmaasJSONResponse
 */
export interface ControllersSystemVmaasJSONResponse {
    /**
     *
     * @type {VmaasUpdatesV3Request}
     * @memberof ControllersSystemVmaasJSONResponse
     */
    'data'?: VmaasUpdatesV3Request;
}
/**
 *
 * @export
 * @interface ControllersSystemYumUpdatesResponse
 */
export interface ControllersSystemYumUpdatesResponse {
    /**
     *
     * @type {VmaasUpdatesV3Response}
     * @memberof ControllersSystemYumUpdatesResponse
     */
    'data'?: VmaasUpdatesV3Response;
}
/**
 *
 * @export
 * @interface ControllersSystemsAdvisoriesRequest
 */
export interface ControllersSystemsAdvisoriesRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemsAdvisoriesRequest
     */
    'advisories'?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemsAdvisoriesRequest
     */
    'limit'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemsAdvisoriesRequest
     */
    'offset'?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemsAdvisoriesRequest
     */
    'systems'?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersSystemsAdvisoriesResponse
 */
export interface ControllersSystemsAdvisoriesResponse {
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ControllersSystemsAdvisoriesResponse
     */
    'data'?: { [key: string]: Array<string>; };
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemsAdvisoriesResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemsAdvisoriesResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemsResponse
 */
export interface ControllersSystemsResponse {
    /**
     *
     * @type {Array<ControllersSystemItem>}
     * @memberof ControllersSystemsResponse
     */
    'data'?: Array<ControllersSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemsResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemsResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersTemplateItem
 */
export interface ControllersTemplateItem {
    /**
     *
     * @type {ControllersTemplateItemAttributes}
     * @memberof ControllersTemplateItem
     */
    'attributes'?: ControllersTemplateItemAttributes;
    /**
     * Unique template id
     * @type {string}
     * @memberof ControllersTemplateItem
     */
    'id'?: string;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersTemplateItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersTemplateItemAttributes
 */
export interface ControllersTemplateItemAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateItemAttributes
     */
    'creator'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateItemAttributes
     */
    'last_edited'?: string;
    /**
     * Template name
     * @type {string}
     * @memberof ControllersTemplateItemAttributes
     */
    'name'?: string;
    /**
     * Created and updated dates
     * @type {string}
     * @memberof ControllersTemplateItemAttributes
     */
    'published'?: string;
    /**
     * Count of the systems associated with the template
     * @type {number}
     * @memberof ControllersTemplateItemAttributes
     */
    'systems'?: number;
}
/**
 *
 * @export
 * @interface ControllersTemplateSystemAttributes
 */
export interface ControllersTemplateSystemAttributes {
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    'applicable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    'applicable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    'applicable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    'applicable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemAttributes
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersTemplateSystemAttributes
     */
    'groups'?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    'installable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    'installable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    'installable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    'installable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemAttributes
     */
    'last_upload'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemAttributes
     */
    'os'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemAttributes
     */
    'rhsm'?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersTemplateSystemAttributes
     */
    'tags'?: Array<ControllersSystemTag>;
}
/**
 *
 * @export
 * @interface ControllersTemplateSystemItem
 */
export interface ControllersTemplateSystemItem {
    /**
     *
     * @type {ControllersTemplateSystemAttributes}
     * @memberof ControllersTemplateSystemItem
     */
    'attributes'?: ControllersTemplateSystemAttributes;
    /**
     * Template system inventory ID (uuid format)
     * @type {string}
     * @memberof ControllersTemplateSystemItem
     */
    'inventory_id'?: string;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersTemplateSystemItem
     */
    'type'?: string;
}
/**
 *
 * @export
 * @interface ControllersTemplateSystemsDBLookup
 */
export interface ControllersTemplateSystemsDBLookup {
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'applicable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'applicable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'applicable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'applicable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'display_name'?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'groups'?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'installable_other_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'installable_rhba_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'installable_rhea_count'?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'installable_rhsa_count'?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'last_upload'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'os'?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'rhsm'?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    'tags'?: Array<ControllersSystemTag>;
}
/**
 *
 * @export
 * @interface ControllersTemplateSystemsResponse
 */
export interface ControllersTemplateSystemsResponse {
    /**
     *
     * @type {Array<ControllersTemplateSystemItem>}
     * @memberof ControllersTemplateSystemsResponse
     */
    'data'?: Array<ControllersTemplateSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersTemplateSystemsResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersTemplateSystemsResponse
     */
    'meta'?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersTemplateSystemsUpdateRequest
 */
export interface ControllersTemplateSystemsUpdateRequest {
    /**
     * List of inventory IDs to have templates removed
     * @type {Array<string>}
     * @memberof ControllersTemplateSystemsUpdateRequest
     */
    'systems'?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersTemplatesMeta
 */
export interface ControllersTemplatesMeta {
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersTemplatesMeta
     */
    'creators'?: Array<string>;
    /**
     * Used filters
     * @type {{ [key: string]: ControllersFilterData; }}
     * @memberof ControllersTemplatesMeta
     */
    'filter'?: { [key: string]: ControllersFilterData; };
    /**
     * Show whether customer has some registered systems
     * @type {boolean}
     * @memberof ControllersTemplatesMeta
     */
    'has_systems'?: boolean;
    /**
     * Used response limit (page size) - pagination
     * @type {number}
     * @memberof ControllersTemplatesMeta
     */
    'limit'?: number;
    /**
     * Used response offset - pagination
     * @type {number}
     * @memberof ControllersTemplatesMeta
     */
    'offset'?: number;
    /**
     * Used search terms
     * @type {string}
     * @memberof ControllersTemplatesMeta
     */
    'search'?: string;
    /**
     * Used sorting fields
     * @type {Array<string>}
     * @memberof ControllersTemplatesMeta
     */
    'sort'?: Array<string>;
    /**
     * Some subtotals used by some endpoints
     * @type {{ [key: string]: number; }}
     * @memberof ControllersTemplatesMeta
     */
    'subtotals'?: { [key: string]: number; };
    /**
     * Total items count to return
     * @type {number}
     * @memberof ControllersTemplatesMeta
     */
    'total_items'?: number;
}
/**
 *
 * @export
 * @interface ControllersTemplatesResponse
 */
export interface ControllersTemplatesResponse {
    /**
     * Template items
     * @type {Array<ControllersTemplateItem>}
     * @memberof ControllersTemplatesResponse
     */
    'data'?: Array<ControllersTemplateItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersTemplatesResponse
     */
    'links'?: ControllersLinks;
    /**
     *
     * @type {ControllersTemplatesMeta}
     * @memberof ControllersTemplatesResponse
     */
    'meta'?: ControllersTemplatesMeta;
}
/**
 *
 * @export
 * @interface ControllersUpdateBaselineRequest
 */
export interface ControllersUpdateBaselineRequest {
    /**
     *
     * @type {ControllersBaselineConfig}
     * @memberof ControllersUpdateBaselineRequest
     */
    'config'?: ControllersBaselineConfig;
    /**
     * Description of the baseline (optional).
     * @type {string}
     * @memberof ControllersUpdateBaselineRequest
     */
    'description'?: string;
    /**
     * Map of inventories to add to (true) or remove (false) from given baseline (optional)
     * @type {{ [key: string]: boolean; }}
     * @memberof ControllersUpdateBaselineRequest
     */
    'inventory_ids'?: { [key: string]: boolean; };
    /**
     * Updated baseline name (optional)
     * @type {string}
     * @memberof ControllersUpdateBaselineRequest
     */
    'name'?: string;
}
/**
 *
 * @export
 * @interface ControllersUpdateBaselineResponse
 */
export interface ControllersUpdateBaselineResponse {
    /**
     * Updated baseline unique ID, it can not be changed
     * @type {number}
     * @memberof ControllersUpdateBaselineResponse
     */
    'baseline_id'?: number;
}
/**
 *
 * @export
 * @interface ModelsPackageUpdate
 */
export interface ModelsPackageUpdate {
    /**
     *
     * @type {string}
     * @memberof ModelsPackageUpdate
     */
    'evra'?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsPackageUpdate
     */
    'status'?: string;
}
/**
 *
 * @export
 * @interface UtilsErrorResponse
 */
export interface UtilsErrorResponse {
    /**
     *
     * @type {string}
     * @memberof UtilsErrorResponse
     */
    'error'?: string;
}
/**
 *
 * @export
 * @interface VmaasUpdatesV3Request
 */
export interface VmaasUpdatesV3Request {
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3Request
     */
    'basearch'?: string;
    /**
     * VMaaS will check package_list and return error if we provide package_list without epochs
     * @type {boolean}
     * @memberof VmaasUpdatesV3Request
     */
    'epoch_required'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof VmaasUpdatesV3Request
     */
    'latest_only'?: boolean;
    /**
     *
     * @type {Array<VmaasUpdatesV3RequestModulesList>}
     * @memberof VmaasUpdatesV3Request
     */
    'modules_list'?: Array<VmaasUpdatesV3RequestModulesList>;
    /**
     * Search for updates of unknown package EVRAs.
     * @type {boolean}
     * @memberof VmaasUpdatesV3Request
     */
    'optimistic_updates'?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof VmaasUpdatesV3Request
     */
    'package_list'?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3Request
     */
    'releasever'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof VmaasUpdatesV3Request
     */
    'repository_list'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof VmaasUpdatesV3Request
     */
    'repository_paths'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof VmaasUpdatesV3Request
     */
    'security_only'?: boolean;
    /**
     * Include content from \\\"third party\\\" repositories into the response, disabled by default.
     * @type {boolean}
     * @memberof VmaasUpdatesV3Request
     */
    'third_party'?: boolean;
}
/**
 *
 * @export
 * @interface VmaasUpdatesV3RequestModulesList
 */
export interface VmaasUpdatesV3RequestModulesList {
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3RequestModulesList
     */
    'module_name'?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3RequestModulesList
     */
    'module_stream'?: string;
}
/**
 *
 * @export
 * @interface VmaasUpdatesV3Response
 */
export interface VmaasUpdatesV3Response {
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3Response
     */
    'basearch'?: string;
    /**
     *
     * @type {boolean}
     * @memberof VmaasUpdatesV3Response
     */
    'build_pkgcache'?: boolean;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3Response
     */
    'last_change'?: string;
    /**
     *
     * @type {Array<VmaasUpdatesV3RequestModulesList>}
     * @memberof VmaasUpdatesV3Response
     */
    'modules_list'?: Array<VmaasUpdatesV3RequestModulesList>;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3Response
     */
    'releasever'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof VmaasUpdatesV3Response
     */
    'repository_list'?: Array<string>;
    /**
     *
     * @type {{ [key: string]: VmaasUpdatesV3ResponseUpdateList; }}
     * @memberof VmaasUpdatesV3Response
     */
    'update_list'?: { [key: string]: VmaasUpdatesV3ResponseUpdateList; };
}
/**
 *
 * @export
 * @interface VmaasUpdatesV3ResponseAvailableUpdates
 */
export interface VmaasUpdatesV3ResponseAvailableUpdates {
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    'basearch'?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    'erratum'?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    'evra'?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    'package'?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    'package_name'?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    'releasever'?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    'repository'?: string;
}
/**
 *
 * @export
 * @interface VmaasUpdatesV3ResponseUpdateList
 */
export interface VmaasUpdatesV3ResponseUpdateList {
    /**
     *
     * @type {Array<VmaasUpdatesV3ResponseAvailableUpdates>}
     * @memberof VmaasUpdatesV3ResponseUpdateList
     */
    'available_updates'?: Array<VmaasUpdatesV3ResponseAvailableUpdates>;
}

/**
 * BaselineDeleteApi - axios parameter creator
 * @export
 */
export const BaselineDeleteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a baseline
         * @summary Delete a baseline
         * @param {number} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baselineDelete: async (baselineId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('baselineDelete', 'baselineId', baselineId)
            const localVarPath = `/baselines/{baseline_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BaselineDeleteApi - functional programming interface
 * @export
 */
export const BaselineDeleteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BaselineDeleteApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete a baseline
         * @summary Delete a baseline
         * @param {number} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baselineDelete(baselineId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersDeleteBaselineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.baselineDelete(baselineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BaselineDeleteApi - factory interface
 * @export
 */
export const BaselineDeleteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BaselineDeleteApiFp(configuration)
    return {
        /**
         * Delete a baseline
         * @summary Delete a baseline
         * @param {number} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baselineDelete(baselineId: number, options?: any): AxiosPromise<ControllersDeleteBaselineResponse> {
            return localVarFp.baselineDelete(baselineId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BaselineDeleteApi - object-oriented interface
 * @export
 * @class BaselineDeleteApi
 * @extends {BaseAPI}
 */
export class BaselineDeleteApi extends BaseAPI {
    /**
     * Delete a baseline
     * @summary Delete a baseline
     * @param {number} baselineId Baseline ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BaselineDeleteApi
     */
    public baselineDelete(baselineId: number, options?: AxiosRequestConfig) {
        return BaselineDeleteApiFp(this.configuration).baselineDelete(baselineId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CreateBaselineApi - axios parameter creator
 * @export
 */
export const CreateBaselineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a baseline for my set of systems. System cannot be satellite managed.
         * @summary Create a baseline for my set of systems
         * @param {ControllersCreateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBaseline: async (body: ControllersCreateBaselineRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createBaseline', 'body', body)
            const localVarPath = `/baselines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreateBaselineApi - functional programming interface
 * @export
 */
export const CreateBaselineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreateBaselineApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a baseline for my set of systems. System cannot be satellite managed.
         * @summary Create a baseline for my set of systems
         * @param {ControllersCreateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBaseline(body: ControllersCreateBaselineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersCreateBaselineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBaseline(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreateBaselineApi - factory interface
 * @export
 */
export const CreateBaselineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreateBaselineApiFp(configuration)
    return {
        /**
         * Create a baseline for my set of systems. System cannot be satellite managed.
         * @summary Create a baseline for my set of systems
         * @param {ControllersCreateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBaseline(body: ControllersCreateBaselineRequest, options?: any): AxiosPromise<ControllersCreateBaselineResponse> {
            return localVarFp.createBaseline(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreateBaselineApi - object-oriented interface
 * @export
 * @class CreateBaselineApi
 * @extends {BaseAPI}
 */
export class CreateBaselineApi extends BaseAPI {
    /**
     * Create a baseline for my set of systems. System cannot be satellite managed.
     * @summary Create a baseline for my set of systems
     * @param {ControllersCreateBaselineRequest} body Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateBaselineApi
     */
    public createBaseline(body: ControllersCreateBaselineRequest, options?: AxiosRequestConfig) {
        return CreateBaselineApiFp(this.configuration).createBaseline(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeletesystemApi - axios parameter creator
 * @export
 */
export const DeletesystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletesystem: async (inventoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            assertParamExists('deletesystem', 'inventoryId', inventoryId)
            const localVarPath = `/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeletesystemApi - functional programming interface
 * @export
 */
export const DeletesystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeletesystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletesystem(inventoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletesystem(inventoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeletesystemApi - factory interface
 * @export
 */
export const DeletesystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeletesystemApiFp(configuration)
    return {
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletesystem(inventoryId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletesystem(inventoryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeletesystemApi - object-oriented interface
 * @export
 * @class DeletesystemApi
 * @extends {BaseAPI}
 */
export class DeletesystemApi extends BaseAPI {
    /**
     * Delete system by inventory id
     * @summary Delete system by inventory id
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeletesystemApi
     */
    public deletesystem(inventoryId: string, options?: AxiosRequestConfig) {
        return DeletesystemApiFp(this.configuration).deletesystem(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DetailAdvisoryApi - axios parameter creator
 * @export
 */
export const DetailAdvisoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAdvisory: async (advisoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            assertParamExists('detailAdvisory', 'advisoryId', advisoryId)
            const localVarPath = `/advisories/{advisory_id}`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DetailAdvisoryApi - functional programming interface
 * @export
 */
export const DetailAdvisoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DetailAdvisoryApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailAdvisory(advisoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoryDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailAdvisory(advisoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DetailAdvisoryApi - factory interface
 * @export
 */
export const DetailAdvisoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DetailAdvisoryApiFp(configuration)
    return {
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAdvisory(advisoryId: string, options?: any): AxiosPromise<ControllersAdvisoryDetailResponse> {
            return localVarFp.detailAdvisory(advisoryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DetailAdvisoryApi - object-oriented interface
 * @export
 * @class DetailAdvisoryApi
 * @extends {BaseAPI}
 */
export class DetailAdvisoryApi extends BaseAPI {
    /**
     * Show me details an advisory by given advisory name
     * @summary Show me details an advisory by given advisory name
     * @param {string} advisoryId Advisory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailAdvisoryApi
     */
    public detailAdvisory(advisoryId: string, options?: AxiosRequestConfig) {
        return DetailAdvisoryApiFp(this.configuration).detailAdvisory(advisoryId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DetailBaselineApi - axios parameter creator
 * @export
 */
export const DetailBaselineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show baseline detail by given baseline ID
         * @summary Show baseline detail by given baseline ID
         * @param {string} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailBaseline: async (baselineId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('detailBaseline', 'baselineId', baselineId)
            const localVarPath = `/baselines/{baseline_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DetailBaselineApi - functional programming interface
 * @export
 */
export const DetailBaselineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DetailBaselineApiAxiosParamCreator(configuration)
    return {
        /**
         * Show baseline detail by given baseline ID
         * @summary Show baseline detail by given baseline ID
         * @param {string} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailBaseline(baselineId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersBaselineDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailBaseline(baselineId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DetailBaselineApi - factory interface
 * @export
 */
export const DetailBaselineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DetailBaselineApiFp(configuration)
    return {
        /**
         * Show baseline detail by given baseline ID
         * @summary Show baseline detail by given baseline ID
         * @param {string} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailBaseline(baselineId: string, options?: any): AxiosPromise<ControllersBaselineDetailResponse> {
            return localVarFp.detailBaseline(baselineId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DetailBaselineApi - object-oriented interface
 * @export
 * @class DetailBaselineApi
 * @extends {BaseAPI}
 */
export class DetailBaselineApi extends BaseAPI {
    /**
     * Show baseline detail by given baseline ID
     * @summary Show baseline detail by given baseline ID
     * @param {string} baselineId Baseline ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailBaselineApi
     */
    public detailBaseline(baselineId: string, options?: AxiosRequestConfig) {
        return DetailBaselineApiFp(this.configuration).detailBaseline(baselineId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DetailSystemApi - axios parameter creator
 * @export
 */
export const DetailSystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailSystem: async (inventoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            assertParamExists('detailSystem', 'inventoryId', inventoryId)
            const localVarPath = `/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DetailSystemApi - functional programming interface
 * @export
 */
export const DetailSystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DetailSystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailSystem(inventoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailSystem(inventoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DetailSystemApi - factory interface
 * @export
 */
export const DetailSystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DetailSystemApiFp(configuration)
    return {
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailSystem(inventoryId: string, options?: any): AxiosPromise<ControllersSystemDetailResponse> {
            return localVarFp.detailSystem(inventoryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DetailSystemApi - object-oriented interface
 * @export
 * @class DetailSystemApi
 * @extends {BaseAPI}
 */
export class DetailSystemApi extends BaseAPI {
    /**
     * Show me details about a system by given inventory id
     * @summary Show me details about a system by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DetailSystemApi
     */
    public detailSystem(inventoryId: string, options?: AxiosRequestConfig) {
        return DetailSystemApiFp(this.configuration).detailSystem(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExportAdvisoriesApi - axios parameter creator
 * @export
 */
export const ExportAdvisoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisories: async (search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/export/advisories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }

            if (filterApplicableSystems !== undefined) {
                localVarQueryParameter['filter[applicable_systems]'] = filterApplicableSystems;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportAdvisoriesApi - functional programming interface
 * @export
 */
export const ExportAdvisoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExportAdvisoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersAdvisoriesDBLookup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExportAdvisoriesApi - factory interface
 * @export
 */
export const ExportAdvisoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExportAdvisoriesApiFp(configuration)
    return {
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any): AxiosPromise<Array<ControllersAdvisoriesDBLookup>> {
            return localVarFp.exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExportAdvisoriesApi - object-oriented interface
 * @export
 * @class ExportAdvisoriesApi
 * @extends {BaseAPI}
 */
export class ExportAdvisoriesApi extends BaseAPI {
    /**
     * Export applicable advisories for all my systems. Export endpoints are not paginated.
     * @summary Export applicable advisories for all my systems
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {string} [filterApplicableSystems] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportAdvisoriesApi
     */
    public exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: AxiosRequestConfig) {
        return ExportAdvisoriesApiFp(this.configuration).exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExportAdvisorySystemsApi - axios parameter creator
 * @export
 */
export const ExportAdvisorySystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} advisoryId Advisory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisorySystems: async (advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOs?: string, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            assertParamExists('exportAdvisorySystems', 'advisoryId', advisoryId)
            const localVarPath = `/export/advisories/{advisory_id}/systems`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportAdvisorySystemsApi - functional programming interface
 * @export
 */
export const ExportAdvisorySystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExportAdvisorySystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} advisoryId Advisory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAdvisorySystems(advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOs?: string, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersAdvisorySystemDBLookup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAdvisorySystems(advisoryId, search, filterId, filterDisplayName, filterStale, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOs, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExportAdvisorySystemsApi - factory interface
 * @export
 */
export const ExportAdvisorySystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExportAdvisorySystemsApiFp(configuration)
    return {
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} advisoryId Advisory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisorySystems(advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOs?: string, tags?: Array<string>, options?: any): AxiosPromise<Array<ControllersAdvisorySystemDBLookup>> {
            return localVarFp.exportAdvisorySystems(advisoryId, search, filterId, filterDisplayName, filterStale, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOs, tags, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExportAdvisorySystemsApi - object-oriented interface
 * @export
 * @class ExportAdvisorySystemsApi
 * @extends {BaseAPI}
 */
export class ExportAdvisorySystemsApi extends BaseAPI {
    /**
     * Export systems for my account. Export endpoints are not paginated.
     * @summary Export systems for my account
     * @param {string} advisoryId Advisory ID
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterStale] Filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {string} [filterOs] Filter OS version
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportAdvisorySystemsApi
     */
    public exportAdvisorySystems(advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOs?: string, tags?: Array<string>, options?: AxiosRequestConfig) {
        return ExportAdvisorySystemsApiFp(this.configuration).exportAdvisorySystems(advisoryId, search, filterId, filterDisplayName, filterStale, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOs, tags, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExportBaselineSystemsApi - axios parameter creator
 * @export
 */
export const ExportBaselineSystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Export systems applicable to a baseline. Export endpoints are not paginated.
         * @summary Export systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBaselineSystems: async (baselineId: number, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('exportBaselineSystems', 'baselineId', baselineId)
            const localVarPath = `/export/baselines/{baseline_id}/systems`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportBaselineSystemsApi - functional programming interface
 * @export
 */
export const ExportBaselineSystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExportBaselineSystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Export systems applicable to a baseline. Export endpoints are not paginated.
         * @summary Export systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportBaselineSystems(baselineId: number, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersBaselineSystemsDBLookup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportBaselineSystems(baselineId, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExportBaselineSystemsApi - factory interface
 * @export
 */
export const ExportBaselineSystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExportBaselineSystemsApiFp(configuration)
    return {
        /**
         * Export systems applicable to a baseline. Export endpoints are not paginated.
         * @summary Export systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBaselineSystems(baselineId: number, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<Array<ControllersBaselineSystemsDBLookup>> {
            return localVarFp.exportBaselineSystems(baselineId, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExportBaselineSystemsApi - object-oriented interface
 * @export
 * @class ExportBaselineSystemsApi
 * @extends {BaseAPI}
 */
export class ExportBaselineSystemsApi extends BaseAPI {
    /**
     * Export systems applicable to a baseline. Export endpoints are not paginated.
     * @summary Export systems belonging to a baseline
     * @param {number} baselineId Baseline ID
     * @param {string} [search] Find matching text
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterOs] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportBaselineSystemsApi
     */
    public exportBaselineSystems(baselineId: number, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ExportBaselineSystemsApiFp(this.configuration).exportBaselineSystems(baselineId, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExportPackageSystemsApi - axios parameter creator
 * @export
 */
export const ExportPackageSystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all my systems which have a package installed. Export endpoints are not paginated.
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackageSystems: async (packageName: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('exportPackageSystems', 'packageName', packageName)
            const localVarPath = `/export/packages/{package_name}/systems`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportPackageSystemsApi - functional programming interface
 * @export
 */
export const ExportPackageSystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExportPackageSystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all my systems which have a package installed. Export endpoints are not paginated.
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportPackageSystems(packageName: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersPackageSystemItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportPackageSystems(packageName, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExportPackageSystemsApi - factory interface
 * @export
 */
export const ExportPackageSystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExportPackageSystemsApiFp(configuration)
    return {
        /**
         * Show me all my systems which have a package installed. Export endpoints are not paginated.
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackageSystems(packageName: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options?: any): AxiosPromise<Array<ControllersPackageSystemItem>> {
            return localVarFp.exportPackageSystems(packageName, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, tags, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExportPackageSystemsApi - object-oriented interface
 * @export
 * @class ExportPackageSystemsApi
 * @extends {BaseAPI}
 */
export class ExportPackageSystemsApi extends BaseAPI {
    /**
     * Show me all my systems which have a package installed. Export endpoints are not paginated.
     * @summary Show me all my systems which have a package installed
     * @param {string} packageName Package name
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportPackageSystemsApi
     */
    public exportPackageSystems(packageName: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options?: AxiosRequestConfig) {
        return ExportPackageSystemsApiFp(this.configuration).exportPackageSystems(packageName, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, tags, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExportPackagesApi - axios parameter creator
 * @export
 */
export const ExportPackagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all installed packages across my systems. Export endpoints are not paginated.
         * @summary Show me all installed packages across my systems
         * @param {ExportPackagesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackages: async (sort?: ExportPackagesSortEnum, search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/export/packages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterSystemsInstalled !== undefined) {
                localVarQueryParameter['filter[systems_installed]'] = filterSystemsInstalled;
            }

            if (filterSystemsInstallable !== undefined) {
                localVarQueryParameter['filter[systems_installable]'] = filterSystemsInstallable;
            }

            if (filterSystemsApplicable !== undefined) {
                localVarQueryParameter['filter[systems_applicable]'] = filterSystemsApplicable;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportPackagesApi - functional programming interface
 * @export
 */
export const ExportPackagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExportPackagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all installed packages across my systems. Export endpoints are not paginated.
         * @summary Show me all installed packages across my systems
         * @param {ExportPackagesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportPackages(sort?: ExportPackagesSortEnum, search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersPackageItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportPackages(sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExportPackagesApi - factory interface
 * @export
 */
export const ExportPackagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExportPackagesApiFp(configuration)
    return {
        /**
         * Show me all installed packages across my systems. Export endpoints are not paginated.
         * @summary Show me all installed packages across my systems
         * @param {ExportPackagesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackages(sort?: ExportPackagesSortEnum, search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, options?: any): AxiosPromise<Array<ControllersPackageItem>> {
            return localVarFp.exportPackages(sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExportPackagesApi - object-oriented interface
 * @export
 * @class ExportPackagesApi
 * @extends {BaseAPI}
 */
export class ExportPackagesApi extends BaseAPI {
    /**
     * Show me all installed packages across my systems. Export endpoints are not paginated.
     * @summary Show me all installed packages across my systems
     * @param {ExportPackagesSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterSystemsInstalled] Filter
     * @param {string} [filterSystemsInstallable] Filter
     * @param {string} [filterSystemsApplicable] Filter
     * @param {string} [filterSummary] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportPackagesApi
     */
    public exportPackages(sort?: ExportPackagesSortEnum, search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, options?: AxiosRequestConfig) {
        return ExportPackagesApiFp(this.configuration).exportPackages(sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ExportPackagesSortEnum = {
    Id: 'id',
    Name: 'name',
    SystemsInstalled: 'systems_installed',
    SystemsInstallable: 'systems_installable',
    SystemsApplicable: 'systems_applicable'
} as const;
export type ExportPackagesSortEnum = typeof ExportPackagesSortEnum[keyof typeof ExportPackagesSortEnum];


/**
 * ExportSystemAdvisoriesApi - axios parameter creator
 * @export
 */
export const ExportSystemAdvisoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemAdvisories: async (inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            assertParamExists('exportSystemAdvisories', 'inventoryId', inventoryId)
            const localVarPath = `/export/systems/{inventory_id}/advisories`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportSystemAdvisoriesApi - functional programming interface
 * @export
 */
export const ExportSystemAdvisoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExportSystemAdvisoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSystemAdvisories(inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemAdvisoriesDBLookup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportSystemAdvisories(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExportSystemAdvisoriesApi - factory interface
 * @export
 */
export const ExportSystemAdvisoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExportSystemAdvisoriesApiFp(configuration)
    return {
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemAdvisories(inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): AxiosPromise<Array<ControllersSystemAdvisoriesDBLookup>> {
            return localVarFp.exportSystemAdvisories(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExportSystemAdvisoriesApi - object-oriented interface
 * @export
 * @class ExportSystemAdvisoriesApi
 * @extends {BaseAPI}
 */
export class ExportSystemAdvisoriesApi extends BaseAPI {
    /**
     * Export applicable advisories for all my systems. Export endpoints are not paginated.
     * @summary Export applicable advisories for all my systems
     * @param {string} inventoryId Inventory ID
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportSystemAdvisoriesApi
     */
    public exportSystemAdvisories(inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: AxiosRequestConfig) {
        return ExportSystemAdvisoriesApiFp(this.configuration).exportSystemAdvisories(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExportSystemPackagesApi - axios parameter creator
 * @export
 */
export const ExportSystemPackagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me details about a system packages by given inventory id. Export endpoints are not paginated.
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemPackages: async (inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            assertParamExists('exportSystemPackages', 'inventoryId', inventoryId)
            const localVarPath = `/export/systems/{inventory_id}/packages`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterEvra !== undefined) {
                localVarQueryParameter['filter[evra]'] = filterEvra;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }

            if (filterUpdatable !== undefined) {
                localVarQueryParameter['filter[updatable]'] = filterUpdatable;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportSystemPackagesApi - functional programming interface
 * @export
 */
export const ExportSystemPackagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExportSystemPackagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me details about a system packages by given inventory id. Export endpoints are not paginated.
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSystemPackages(inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemPackageInline>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportSystemPackages(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExportSystemPackagesApi - factory interface
 * @export
 */
export const ExportSystemPackagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExportSystemPackagesApiFp(configuration)
    return {
        /**
         * Show me details about a system packages by given inventory id. Export endpoints are not paginated.
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemPackages(inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: any): AxiosPromise<Array<ControllersSystemPackageInline>> {
            return localVarFp.exportSystemPackages(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExportSystemPackagesApi - object-oriented interface
 * @export
 * @class ExportSystemPackagesApi
 * @extends {BaseAPI}
 */
export class ExportSystemPackagesApi extends BaseAPI {
    /**
     * Show me details about a system packages by given inventory id. Export endpoints are not paginated.
     * @summary Show me details about a system packages by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterEvra] Filter
     * @param {string} [filterSummary] Filter
     * @param {boolean} [filterUpdatable] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportSystemPackagesApi
     */
    public exportSystemPackages(inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: AxiosRequestConfig) {
        return ExportSystemPackagesApiFp(this.configuration).exportSystemPackages(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ExportSystemsApi - axios parameter creator
 * @export
 */
export const ExportSystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystems: async (search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterBaselineName?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/export/systems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterInstallableRhsaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhsa_count]'] = filterInstallableRhsaCount;
            }

            if (filterInstallableRhbaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhba_count]'] = filterInstallableRhbaCount;
            }

            if (filterInstallableRheaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhea_count]'] = filterInstallableRheaCount;
            }

            if (filterInstallableOtherCount !== undefined) {
                localVarQueryParameter['filter[installable_other_count]'] = filterInstallableOtherCount;
            }

            if (filterApplicableRhsaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhsa_count]'] = filterApplicableRhsaCount;
            }

            if (filterApplicableRhbaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhba_count]'] = filterApplicableRhbaCount;
            }

            if (filterApplicableRheaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhea_count]'] = filterApplicableRheaCount;
            }

            if (filterApplicableOtherCount !== undefined) {
                localVarQueryParameter['filter[applicable_other_count]'] = filterApplicableOtherCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterPackagesInstalled !== undefined) {
                localVarQueryParameter['filter[packages_installed]'] = filterPackagesInstalled;
            }

            if (filterPackagesInstallable !== undefined) {
                localVarQueryParameter['filter[packages_installable]'] = filterPackagesInstallable;
            }

            if (filterPackagesApplicable !== undefined) {
                localVarQueryParameter['filter[packages_applicable]'] = filterPackagesApplicable;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (filterBaselineName !== undefined) {
                localVarQueryParameter['filter[baseline_name]'] = filterBaselineName;
            }

            if (filterArch !== undefined) {
                localVarQueryParameter['filter[arch]'] = filterArch;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExportSystemsApi - functional programming interface
 * @export
 */
export const ExportSystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExportSystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSystems(search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterBaselineName?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemDBLookup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportSystems(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterBaselineName, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExportSystemsApi - factory interface
 * @export
 */
export const ExportSystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExportSystemsApiFp(configuration)
    return {
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystems(search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterBaselineName?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, options?: any): AxiosPromise<Array<ControllersSystemDBLookup>> {
            return localVarFp.exportSystems(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterBaselineName, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExportSystemsApi - object-oriented interface
 * @export
 * @class ExportSystemsApi
 * @extends {BaseAPI}
 */
export class ExportSystemsApi extends BaseAPI {
    /**
     * Export systems for my account. Export endpoints are not paginated.
     * @summary Export systems for my account
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterInstallableRhsaCount] Filter
     * @param {string} [filterInstallableRhbaCount] Filter
     * @param {string} [filterInstallableRheaCount] Filter
     * @param {string} [filterInstallableOtherCount] Filter
     * @param {string} [filterApplicableRhsaCount] Filter
     * @param {string} [filterApplicableRhbaCount] Filter
     * @param {string} [filterApplicableRheaCount] Filter
     * @param {string} [filterApplicableOtherCount] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterPackagesInstalled] Filter
     * @param {string} [filterPackagesInstallable] Filter
     * @param {string} [filterPackagesApplicable] Filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {string} [filterBaselineName] Filter
     * @param {string} [filterArch] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {string} [filterOsname] Filter OS name
     * @param {string} [filterOsmajor] Filter OS major version
     * @param {string} [filterOsminor] Filter OS minor version
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportSystemsApi
     */
    public exportSystems(search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterBaselineName?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, options?: AxiosRequestConfig) {
        return ExportSystemsApiFp(this.configuration).exportSystems(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterBaselineName, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LatestPackageApi - axios parameter creator
 * @export
 */
export const LatestPackageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me metadata of selected package
         * @summary Show me metadata of selected package
         * @param {string} packageName package_name - latest, nevra - exact version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        latestPackage: async (packageName: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('latestPackage', 'packageName', packageName)
            const localVarPath = `/packages/{package_name}`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LatestPackageApi - functional programming interface
 * @export
 */
export const LatestPackageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LatestPackageApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me metadata of selected package
         * @summary Show me metadata of selected package
         * @param {string} packageName package_name - latest, nevra - exact version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async latestPackage(packageName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackageDetailResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.latestPackage(packageName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LatestPackageApi - factory interface
 * @export
 */
export const LatestPackageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LatestPackageApiFp(configuration)
    return {
        /**
         * Show me metadata of selected package
         * @summary Show me metadata of selected package
         * @param {string} packageName package_name - latest, nevra - exact version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        latestPackage(packageName: string, options?: any): AxiosPromise<ControllersPackageDetailResponse> {
            return localVarFp.latestPackage(packageName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LatestPackageApi - object-oriented interface
 * @export
 * @class LatestPackageApi
 * @extends {BaseAPI}
 */
export class LatestPackageApi extends BaseAPI {
    /**
     * Show me metadata of selected package
     * @summary Show me metadata of selected package
     * @param {string} packageName package_name - latest, nevra - exact version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LatestPackageApi
     */
    public latestPackage(packageName: string, options?: AxiosRequestConfig) {
        return LatestPackageApiFp(this.configuration).latestPackage(packageName, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListAdvisoriesApi - axios parameter creator
 * @export
 */
export const ListAdvisoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisoriesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisories: async (limit?: number, offset?: number, sort?: ListAdvisoriesSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/advisories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }

            if (filterInstallableSystems !== undefined) {
                localVarQueryParameter['filter[installable_systems]'] = filterInstallableSystems;
            }

            if (filterApplicableSystems !== undefined) {
                localVarQueryParameter['filter[applicable_systems]'] = filterApplicableSystems;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListAdvisoriesApi - functional programming interface
 * @export
 */
export const ListAdvisoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListAdvisoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisoriesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdvisories(limit?: number, offset?: number, sort?: ListAdvisoriesSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListAdvisoriesApi - factory interface
 * @export
 */
export const ListAdvisoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListAdvisoriesApiFp(configuration)
    return {
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisoriesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisories(limit?: number, offset?: number, sort?: ListAdvisoriesSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersAdvisoriesResponse> {
            return localVarFp.listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListAdvisoriesApi - object-oriented interface
 * @export
 * @class ListAdvisoriesApi
 * @extends {BaseAPI}
 */
export class ListAdvisoriesApi extends BaseAPI {
    /**
     * Show me all applicable advisories for all my systems
     * @summary Show me all applicable advisories for all my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListAdvisoriesSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {string} [filterInstallableSystems] Filter
     * @param {string} [filterApplicableSystems] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListAdvisoriesApi
     */
    public listAdvisories(limit?: number, offset?: number, sort?: ListAdvisoriesSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ListAdvisoriesApiFp(this.configuration).listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListAdvisoriesSortEnum = {
    Id: 'id',
    AdvisoryTypeName: 'advisory_type_name',
    Synopsis: 'synopsis',
    PublicDate: 'public_date',
    Severity: 'severity',
    InstallableSystems: 'installable_systems',
    ApplicableSystems: 'applicable_systems'
} as const;
export type ListAdvisoriesSortEnum = typeof ListAdvisoriesSortEnum[keyof typeof ListAdvisoriesSortEnum];


/**
 * ListAdvisoriesIdsApi - axios parameter creator
 * @export
 */
export const ListAdvisoriesIdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisoriesIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisoriesIds: async (limit?: number, offset?: number, sort?: ListAdvisoriesIdsSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ids/advisories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }

            if (filterInstallableSystems !== undefined) {
                localVarQueryParameter['filter[installable_systems]'] = filterInstallableSystems;
            }

            if (filterApplicableSystems !== undefined) {
                localVarQueryParameter['filter[applicable_systems]'] = filterApplicableSystems;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListAdvisoriesIdsApi - functional programming interface
 * @export
 */
export const ListAdvisoriesIdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListAdvisoriesIdsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisoriesIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdvisoriesIds(limit?: number, offset?: number, sort?: ListAdvisoriesIdsSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsPlainResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdvisoriesIds(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListAdvisoriesIdsApi - factory interface
 * @export
 */
export const ListAdvisoriesIdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListAdvisoriesIdsApiFp(configuration)
    return {
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisoriesIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisoriesIds(limit?: number, offset?: number, sort?: ListAdvisoriesIdsSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersIDsPlainResponse> {
            return localVarFp.listAdvisoriesIds(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListAdvisoriesIdsApi - object-oriented interface
 * @export
 * @class ListAdvisoriesIdsApi
 * @extends {BaseAPI}
 */
export class ListAdvisoriesIdsApi extends BaseAPI {
    /**
     * Show me all applicable advisories for all my systems
     * @summary Show me all applicable advisories for all my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListAdvisoriesIdsSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {string} [filterInstallableSystems] Filter
     * @param {string} [filterApplicableSystems] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListAdvisoriesIdsApi
     */
    public listAdvisoriesIds(limit?: number, offset?: number, sort?: ListAdvisoriesIdsSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ListAdvisoriesIdsApiFp(this.configuration).listAdvisoriesIds(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListAdvisoriesIdsSortEnum = {
    Id: 'id',
    Name: 'name',
    AdvisoryType: 'advisory_type',
    Synopsis: 'synopsis',
    PublicDate: 'public_date',
    ApplicableSystems: 'applicable_systems'
} as const;
export type ListAdvisoriesIdsSortEnum = typeof ListAdvisoriesIdsSortEnum[keyof typeof ListAdvisoriesIdsSortEnum];


/**
 * ListAdvisorySystemsApi - axios parameter creator
 * @export
 */
export const ListAdvisorySystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisorySystemsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStatus] Filter
         * @param {string} [filterTemplate] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystems: async (advisoryId: string, limit?: number, offset?: number, sort?: ListAdvisorySystemsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterStatus?: string, filterTemplate?: string, filterOs?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            assertParamExists('listAdvisorySystems', 'advisoryId', advisoryId)
            const localVarPath = `/advisories/{advisory_id}/systems`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterStatus !== undefined) {
                localVarQueryParameter['filter[status]'] = filterStatus;
            }

            if (filterTemplate !== undefined) {
                localVarQueryParameter['filter[template]'] = filterTemplate;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }

            if (filterBuiltPkgcache !== undefined) {
                localVarQueryParameter['filter[built_pkgcache]'] = filterBuiltPkgcache;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListAdvisorySystemsApi - functional programming interface
 * @export
 */
export const ListAdvisorySystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListAdvisorySystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisorySystemsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStatus] Filter
         * @param {string} [filterTemplate] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: ListAdvisorySystemsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterStatus?: string, filterTemplate?: string, filterOs?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisorySystemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdvisorySystems(advisoryId, limit, offset, sort, search, filterId, filterDisplayName, filterStale, filterStatus, filterTemplate, filterOs, filterSatelliteManaged, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListAdvisorySystemsApi - factory interface
 * @export
 */
export const ListAdvisorySystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListAdvisorySystemsApiFp(configuration)
    return {
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisorySystemsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStatus] Filter
         * @param {string} [filterTemplate] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: ListAdvisorySystemsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterStatus?: string, filterTemplate?: string, filterOs?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersAdvisorySystemsResponse> {
            return localVarFp.listAdvisorySystems(advisoryId, limit, offset, sort, search, filterId, filterDisplayName, filterStale, filterStatus, filterTemplate, filterOs, filterSatelliteManaged, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListAdvisorySystemsApi - object-oriented interface
 * @export
 * @class ListAdvisorySystemsApi
 * @extends {BaseAPI}
 */
export class ListAdvisorySystemsApi extends BaseAPI {
    /**
     * Show me systems on which the given advisory is applicable
     * @summary Show me systems on which the given advisory is applicable
     * @param {string} advisoryId Advisory ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListAdvisorySystemsSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterStatus] Filter
     * @param {string} [filterTemplate] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {string} [filterSatelliteManaged] Filter
     * @param {string} [filterBuiltPkgcache] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListAdvisorySystemsApi
     */
    public listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: ListAdvisorySystemsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterStatus?: string, filterTemplate?: string, filterOs?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ListAdvisorySystemsApiFp(this.configuration).listAdvisorySystems(advisoryId, limit, offset, sort, search, filterId, filterDisplayName, filterStale, filterStatus, filterTemplate, filterOs, filterSatelliteManaged, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListAdvisorySystemsSortEnum = {
    Id: 'id',
    DisplayName: 'display_name',
    LastEvaluation: 'last_evaluation',
    LastUpload: 'last_upload',
    Stale: 'stale',
    Status: 'status',
    Template: 'template',
    Groups: 'groups',
    SatelliteManaged: 'satellite_managed',
    BuiltPkgcache: 'built_pkgcache'
} as const;
export type ListAdvisorySystemsSortEnum = typeof ListAdvisorySystemsSortEnum[keyof typeof ListAdvisorySystemsSortEnum];


/**
 * ListAdvisorySystemsIdsApi - axios parameter creator
 * @export
 */
export const ListAdvisorySystemsIdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisorySystemsIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystemsIds: async (advisoryId: string, limit?: number, offset?: number, sort?: ListAdvisorySystemsIdsSortEnum, search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterSatelliteManaged?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            assertParamExists('listAdvisorySystemsIds', 'advisoryId', advisoryId)
            const localVarPath = `/ids/advisories/{advisory_id}/systems`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterInsightsId !== undefined) {
                localVarQueryParameter['filter[insights_id]'] = filterInsightsId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterStaleTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_timestamp]'] = filterStaleTimestamp;
            }

            if (filterStaleWarningTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_warning_timestamp]'] = filterStaleWarningTimestamp;
            }

            if (filterCulledTimestamp !== undefined) {
                localVarQueryParameter['filter[culled_timestamp]'] = filterCulledTimestamp;
            }

            if (filterCreated !== undefined) {
                localVarQueryParameter['filter[created]'] = filterCreated;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (filterBuiltPkgcache !== undefined) {
                localVarQueryParameter['filter[built_pkgcache]'] = filterBuiltPkgcache;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListAdvisorySystemsIdsApi - functional programming interface
 * @export
 */
export const ListAdvisorySystemsIdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListAdvisorySystemsIdsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisorySystemsIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdvisorySystemsIds(advisoryId: string, limit?: number, offset?: number, sort?: ListAdvisorySystemsIdsSortEnum, search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterSatelliteManaged?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAdvisorySystemsIds(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterSatelliteManaged, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListAdvisorySystemsIdsApi - factory interface
 * @export
 */
export const ListAdvisorySystemsIdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListAdvisorySystemsIdsApiFp(configuration)
    return {
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListAdvisorySystemsIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystemsIds(advisoryId: string, limit?: number, offset?: number, sort?: ListAdvisorySystemsIdsSortEnum, search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterSatelliteManaged?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersIDsStatusResponse> {
            return localVarFp.listAdvisorySystemsIds(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterSatelliteManaged, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListAdvisorySystemsIdsApi - object-oriented interface
 * @export
 * @class ListAdvisorySystemsIdsApi
 * @extends {BaseAPI}
 */
export class ListAdvisorySystemsIdsApi extends BaseAPI {
    /**
     * Show me systems on which the given advisory is applicable
     * @summary Show me systems on which the given advisory is applicable
     * @param {string} advisoryId Advisory ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListAdvisorySystemsIdsSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterInsightsId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterSatelliteManaged] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterStaleTimestamp] Filter
     * @param {string} [filterStaleWarningTimestamp] Filter
     * @param {string} [filterCulledTimestamp] Filter
     * @param {string} [filterCreated] Filter
     * @param {string} [filterOsname] Filter
     * @param {string} [filterOsminor] Filter
     * @param {string} [filterOsmajor] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {string} [filterBuiltPkgcache] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListAdvisorySystemsIdsApi
     */
    public listAdvisorySystemsIds(advisoryId: string, limit?: number, offset?: number, sort?: ListAdvisorySystemsIdsSortEnum, search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterSatelliteManaged?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ListAdvisorySystemsIdsApiFp(this.configuration).listAdvisorySystemsIds(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterSatelliteManaged, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListAdvisorySystemsIdsSortEnum = {
    Id: 'id',
    DisplayName: 'display_name',
    LastEvaluation: 'last_evaluation',
    LastUpload: 'last_upload',
    RhsaCount: 'rhsa_count',
    RhbaCount: 'rhba_count',
    RheaCount: 'rhea_count',
    OtherCount: 'other_count',
    SatelliteManaged: 'satellite_managed',
    Stale: 'stale',
    BuiltPkgcache: 'built_pkgcache'
} as const;
export type ListAdvisorySystemsIdsSortEnum = typeof ListAdvisorySystemsIdsSortEnum[keyof typeof ListAdvisorySystemsIdsSortEnum];


/**
 * ListBaselineApi - axios parameter creator
 * @export
 */
export const ListBaselineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all baselines for all my systems
         * @summary Show me all baselines for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListBaselineSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterName] Filter
         * @param {string} [filterSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaseline: async (limit?: number, offset?: number, sort?: ListBaselineSortEnum, search?: string, filterId?: string, filterName?: string, filterSystems?: string, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/baselines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterSystems !== undefined) {
                localVarQueryParameter['filter[systems]'] = filterSystems;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListBaselineApi - functional programming interface
 * @export
 */
export const ListBaselineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListBaselineApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all baselines for all my systems
         * @summary Show me all baselines for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListBaselineSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterName] Filter
         * @param {string} [filterSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBaseline(limit?: number, offset?: number, sort?: ListBaselineSortEnum, search?: string, filterId?: string, filterName?: string, filterSystems?: string, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersBaselinesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBaseline(limit, offset, sort, search, filterId, filterName, filterSystems, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListBaselineApi - factory interface
 * @export
 */
export const ListBaselineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListBaselineApiFp(configuration)
    return {
        /**
         * Show me all baselines for all my systems
         * @summary Show me all baselines for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListBaselineSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterName] Filter
         * @param {string} [filterSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaseline(limit?: number, offset?: number, sort?: ListBaselineSortEnum, search?: string, filterId?: string, filterName?: string, filterSystems?: string, tags?: Array<string>, options?: any): AxiosPromise<ControllersBaselinesResponse> {
            return localVarFp.listBaseline(limit, offset, sort, search, filterId, filterName, filterSystems, tags, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListBaselineApi - object-oriented interface
 * @export
 * @class ListBaselineApi
 * @extends {BaseAPI}
 */
export class ListBaselineApi extends BaseAPI {
    /**
     * Show me all baselines for all my systems
     * @summary Show me all baselines for all my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListBaselineSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterName] Filter
     * @param {string} [filterSystems] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListBaselineApi
     */
    public listBaseline(limit?: number, offset?: number, sort?: ListBaselineSortEnum, search?: string, filterId?: string, filterName?: string, filterSystems?: string, tags?: Array<string>, options?: AxiosRequestConfig) {
        return ListBaselineApiFp(this.configuration).listBaseline(limit, offset, sort, search, filterId, filterName, filterSystems, tags, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListBaselineSortEnum = {
    Id: 'id',
    Name: 'name',
    Systems: 'systems',
    Published: 'published',
    LastEdited: 'last_edited',
    Creator: 'creator'
} as const;
export type ListBaselineSortEnum = typeof ListBaselineSortEnum[keyof typeof ListBaselineSortEnum];


/**
 * ListBaselineSystemsApi - axios parameter creator
 * @export
 */
export const ListBaselineSystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListBaselineSystemsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaselineSystems: async (baselineId: number, limit?: number, offset?: number, sort?: ListBaselineSystemsSortEnum, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('listBaselineSystems', 'baselineId', baselineId)
            const localVarPath = `/baselines/{baseline_id}/systems`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListBaselineSystemsApi - functional programming interface
 * @export
 */
export const ListBaselineSystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListBaselineSystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListBaselineSystemsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBaselineSystems(baselineId: number, limit?: number, offset?: number, sort?: ListBaselineSystemsSortEnum, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersBaselineSystemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBaselineSystems(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListBaselineSystemsApi - factory interface
 * @export
 */
export const ListBaselineSystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListBaselineSystemsApiFp(configuration)
    return {
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListBaselineSystemsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaselineSystems(baselineId: number, limit?: number, offset?: number, sort?: ListBaselineSystemsSortEnum, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersBaselineSystemsResponse> {
            return localVarFp.listBaselineSystems(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListBaselineSystemsApi - object-oriented interface
 * @export
 * @class ListBaselineSystemsApi
 * @extends {BaseAPI}
 */
export class ListBaselineSystemsApi extends BaseAPI {
    /**
     * Show me all systems applicable to a baseline
     * @summary Show me all systems belonging to a baseline
     * @param {number} baselineId Baseline ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListBaselineSystemsSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterOs] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListBaselineSystemsApi
     */
    public listBaselineSystems(baselineId: number, limit?: number, offset?: number, sort?: ListBaselineSystemsSortEnum, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ListBaselineSystemsApiFp(this.configuration).listBaselineSystems(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListBaselineSystemsSortEnum = {
    Id: 'id',
    DisplayName: 'display_name',
    Os: 'os',
    InstallableRhsaCount: 'installable_rhsa_count',
    InstallableRhbaCount: 'installable_rhba_count',
    InstallableRheaCount: 'installable_rhea_count',
    InstallableOtherCount: 'installable_other_count',
    ApplicableRhsaCount: 'applicable_rhsa_count',
    ApplicableRhbaCount: 'applicable_rhba_count',
    ApplicableRheaCount: 'applicable_rhea_count',
    ApplicableOtherCount: 'applicable_other_count',
    LastUpload: 'last_upload',
    Groups: 'groups'
} as const;
export type ListBaselineSystemsSortEnum = typeof ListBaselineSystemsSortEnum[keyof typeof ListBaselineSystemsSortEnum];


/**
 * ListBaselineSystemsIdsApi - axios parameter creator
 * @export
 */
export const ListBaselineSystemsIdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListBaselineSystemsIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaselineSystemsIds: async (baselineId: number, limit?: number, offset?: number, sort?: ListBaselineSystemsIdsSortEnum, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('listBaselineSystemsIds', 'baselineId', baselineId)
            const localVarPath = `/ids/baselines/{baseline_id}/systems`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListBaselineSystemsIdsApi - functional programming interface
 * @export
 */
export const ListBaselineSystemsIdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListBaselineSystemsIdsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListBaselineSystemsIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBaselineSystemsIds(baselineId: number, limit?: number, offset?: number, sort?: ListBaselineSystemsIdsSortEnum, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsPlainResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBaselineSystemsIds(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListBaselineSystemsIdsApi - factory interface
 * @export
 */
export const ListBaselineSystemsIdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListBaselineSystemsIdsApiFp(configuration)
    return {
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListBaselineSystemsIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaselineSystemsIds(baselineId: number, limit?: number, offset?: number, sort?: ListBaselineSystemsIdsSortEnum, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, options?: any): AxiosPromise<ControllersIDsPlainResponse> {
            return localVarFp.listBaselineSystemsIds(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListBaselineSystemsIdsApi - object-oriented interface
 * @export
 * @class ListBaselineSystemsIdsApi
 * @extends {BaseAPI}
 */
export class ListBaselineSystemsIdsApi extends BaseAPI {
    /**
     * Show me all systems applicable to a baseline
     * @summary Show me all systems belonging to a baseline
     * @param {number} baselineId Baseline ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListBaselineSystemsIdsSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterOs] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListBaselineSystemsIdsApi
     */
    public listBaselineSystemsIds(baselineId: number, limit?: number, offset?: number, sort?: ListBaselineSystemsIdsSortEnum, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, options?: AxiosRequestConfig) {
        return ListBaselineSystemsIdsApiFp(this.configuration).listBaselineSystemsIds(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListBaselineSystemsIdsSortEnum = {
    Id: 'id',
    DisplayName: 'display_name',
    Os: 'os',
    InstallableRhsaCount: 'installable_rhsa_count',
    InstallableRhbaCount: 'installable_rhba_count',
    InstallableRheaCount: 'installable_rhea_count',
    InstallableOtherCount: 'installable_other_count',
    ApplicableRhsaCount: 'applicable_rhsa_count',
    ApplicableRhbaCount: 'applicable_rhba_count',
    ApplicableRheaCount: 'applicable_rhea_count',
    ApplicableOtherCount: 'applicable_other_count',
    LastUpload: 'last_upload'
} as const;
export type ListBaselineSystemsIdsSortEnum = typeof ListBaselineSystemsIdsSortEnum[keyof typeof ListBaselineSystemsIdsSortEnum];


/**
 * ListPackagesApi - axios parameter creator
 * @export
 */
export const ListPackagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListPackagesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackages: async (limit?: number, offset?: number, sort?: ListPackagesSortEnum, search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/packages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterSystemsInstalled !== undefined) {
                localVarQueryParameter['filter[systems_installed]'] = filterSystemsInstalled;
            }

            if (filterSystemsInstallable !== undefined) {
                localVarQueryParameter['filter[systems_installable]'] = filterSystemsInstallable;
            }

            if (filterSystemsApplicable !== undefined) {
                localVarQueryParameter['filter[systems_applicable]'] = filterSystemsApplicable;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListPackagesApi - functional programming interface
 * @export
 */
export const ListPackagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListPackagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListPackagesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackages(limit?: number, offset?: number, sort?: ListPackagesSortEnum, search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackages(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListPackagesApi - factory interface
 * @export
 */
export const ListPackagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListPackagesApiFp(configuration)
    return {
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListPackagesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackages(limit?: number, offset?: number, sort?: ListPackagesSortEnum, search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersPackagesResponse> {
            return localVarFp.listPackages(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListPackagesApi - object-oriented interface
 * @export
 * @class ListPackagesApi
 * @extends {BaseAPI}
 */
export class ListPackagesApi extends BaseAPI {
    /**
     * Show me all installed packages across my systems
     * @summary Show me all installed packages across my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListPackagesSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterSystemsInstalled] Filter
     * @param {string} [filterSystemsInstallable] Filter
     * @param {string} [filterSystemsApplicable] Filter
     * @param {string} [filterSummary] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListPackagesApi
     */
    public listPackages(limit?: number, offset?: number, sort?: ListPackagesSortEnum, search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ListPackagesApiFp(this.configuration).listPackages(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListPackagesSortEnum = {
    Id: 'id',
    Name: 'name',
    SystemsInstalled: 'systems_installed',
    SystemsInstallable: 'systems_installable',
    SystemsApplicable: 'systems_applicable'
} as const;
export type ListPackagesSortEnum = typeof ListPackagesSortEnum[keyof typeof ListPackagesSortEnum];


/**
 * ListSystemAdvisoriesApi - axios parameter creator
 * @export
 */
export const ListSystemAdvisoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemAdvisoriesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisories: async (inventoryId: string, limit?: number, offset?: number, sort?: ListSystemAdvisoriesSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            assertParamExists('listSystemAdvisories', 'inventoryId', inventoryId)
            const localVarPath = `/systems/{inventory_id}/advisories`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSystemAdvisoriesApi - functional programming interface
 * @export
 */
export const ListSystemAdvisoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSystemAdvisoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemAdvisoriesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: ListSystemAdvisoriesSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemAdvisoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSystemAdvisoriesApi - factory interface
 * @export
 */
export const ListSystemAdvisoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSystemAdvisoriesApiFp(configuration)
    return {
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemAdvisoriesSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: ListSystemAdvisoriesSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): AxiosPromise<ControllersSystemAdvisoriesResponse> {
            return localVarFp.listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSystemAdvisoriesApi - object-oriented interface
 * @export
 * @class ListSystemAdvisoriesApi
 * @extends {BaseAPI}
 */
export class ListSystemAdvisoriesApi extends BaseAPI {
    /**
     * Show me advisories for a system by given inventory id
     * @summary Show me advisories for a system by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListSystemAdvisoriesSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSystemAdvisoriesApi
     */
    public listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: ListSystemAdvisoriesSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: AxiosRequestConfig) {
        return ListSystemAdvisoriesApiFp(this.configuration).listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListSystemAdvisoriesSortEnum = {
    Id: 'id',
    Name: 'name',
    Type: 'type',
    Synopsis: 'synopsis',
    PublicDate: 'public_date'
} as const;
export type ListSystemAdvisoriesSortEnum = typeof ListSystemAdvisoriesSortEnum[keyof typeof ListSystemAdvisoriesSortEnum];


/**
 * ListSystemAdvisoriesIdsApi - axios parameter creator
 * @export
 */
export const ListSystemAdvisoriesIdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemAdvisoriesIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisoriesIds: async (inventoryId: string, limit?: number, offset?: number, sort?: ListSystemAdvisoriesIdsSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            assertParamExists('listSystemAdvisoriesIds', 'inventoryId', inventoryId)
            const localVarPath = `/ids/systems/{inventory_id}/advisories`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSystemAdvisoriesIdsApi - functional programming interface
 * @export
 */
export const ListSystemAdvisoriesIdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSystemAdvisoriesIdsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemAdvisoriesIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemAdvisoriesIds(inventoryId: string, limit?: number, offset?: number, sort?: ListSystemAdvisoriesIdsSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSystemAdvisoriesIds(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSystemAdvisoriesIdsApi - factory interface
 * @export
 */
export const ListSystemAdvisoriesIdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSystemAdvisoriesIdsApiFp(configuration)
    return {
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemAdvisoriesIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisoriesIds(inventoryId: string, limit?: number, offset?: number, sort?: ListSystemAdvisoriesIdsSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): AxiosPromise<ControllersIDsStatusResponse> {
            return localVarFp.listSystemAdvisoriesIds(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSystemAdvisoriesIdsApi - object-oriented interface
 * @export
 * @class ListSystemAdvisoriesIdsApi
 * @extends {BaseAPI}
 */
export class ListSystemAdvisoriesIdsApi extends BaseAPI {
    /**
     * Show me advisories for a system by given inventory id
     * @summary Show me advisories for a system by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListSystemAdvisoriesIdsSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSystemAdvisoriesIdsApi
     */
    public listSystemAdvisoriesIds(inventoryId: string, limit?: number, offset?: number, sort?: ListSystemAdvisoriesIdsSortEnum, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: AxiosRequestConfig) {
        return ListSystemAdvisoriesIdsApiFp(this.configuration).listSystemAdvisoriesIds(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListSystemAdvisoriesIdsSortEnum = {
    Id: 'id',
    Name: 'name',
    Type: 'type',
    Synopsis: 'synopsis',
    PublicDate: 'public_date'
} as const;
export type ListSystemAdvisoriesIdsSortEnum = typeof ListSystemAdvisoriesIdsSortEnum[keyof typeof ListSystemAdvisoriesIdsSortEnum];


/**
 * ListSystemTagsApi - axios parameter creator
 * @export
 */
export const ListSystemTagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me systems tags applicable to this application
         * @summary Show me systems tags applicable to this application
         * @param {ListSystemTagsSortEnum} [sort] Sort field
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemTags: async (sort?: ListSystemTagsSortEnum, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSystemTagsApi - functional programming interface
 * @export
 */
export const ListSystemTagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSystemTagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me systems tags applicable to this application
         * @summary Show me systems tags applicable to this application
         * @param {ListSystemTagsSortEnum} [sort] Sort field
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemTags(sort?: ListSystemTagsSortEnum, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemTagsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSystemTags(sort, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSystemTagsApi - factory interface
 * @export
 */
export const ListSystemTagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSystemTagsApiFp(configuration)
    return {
        /**
         * Show me systems tags applicable to this application
         * @summary Show me systems tags applicable to this application
         * @param {ListSystemTagsSortEnum} [sort] Sort field
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemTags(sort?: ListSystemTagsSortEnum, limit?: number, offset?: number, options?: any): AxiosPromise<ControllersSystemTagsResponse> {
            return localVarFp.listSystemTags(sort, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSystemTagsApi - object-oriented interface
 * @export
 * @class ListSystemTagsApi
 * @extends {BaseAPI}
 */
export class ListSystemTagsApi extends BaseAPI {
    /**
     * Show me systems tags applicable to this application
     * @summary Show me systems tags applicable to this application
     * @param {ListSystemTagsSortEnum} [sort] Sort field
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSystemTagsApi
     */
    public listSystemTags(sort?: ListSystemTagsSortEnum, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return ListSystemTagsApiFp(this.configuration).listSystemTags(sort, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListSystemTagsSortEnum = {
    Tag: 'tag',
    Count: 'count'
} as const;
export type ListSystemTagsSortEnum = typeof ListSystemTagsSortEnum[keyof typeof ListSystemTagsSortEnum];


/**
 * ListSystemsApi - axios parameter creator
 * @export
 */
export const ListSystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystems: async (limit?: number, offset?: number, sort?: ListSystemsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/systems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterInstallableRhsaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhsa_count]'] = filterInstallableRhsaCount;
            }

            if (filterInstallableRhbaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhba_count]'] = filterInstallableRhbaCount;
            }

            if (filterInstallableRheaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhea_count]'] = filterInstallableRheaCount;
            }

            if (filterInstallableOtherCount !== undefined) {
                localVarQueryParameter['filter[installable_other_count]'] = filterInstallableOtherCount;
            }

            if (filterApplicableRhsaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhsa_count]'] = filterApplicableRhsaCount;
            }

            if (filterApplicableRhbaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhba_count]'] = filterApplicableRhbaCount;
            }

            if (filterApplicableRheaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhea_count]'] = filterApplicableRheaCount;
            }

            if (filterApplicableOtherCount !== undefined) {
                localVarQueryParameter['filter[applicable_other_count]'] = filterApplicableOtherCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterPackagesInstalled !== undefined) {
                localVarQueryParameter['filter[packages_installed]'] = filterPackagesInstalled;
            }

            if (filterPackagesInstallable !== undefined) {
                localVarQueryParameter['filter[packages_installable]'] = filterPackagesInstallable;
            }

            if (filterPackagesApplicable !== undefined) {
                localVarQueryParameter['filter[packages_applicable]'] = filterPackagesApplicable;
            }

            if (filterStaleTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_timestamp]'] = filterStaleTimestamp;
            }

            if (filterStaleWarningTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_warning_timestamp]'] = filterStaleWarningTimestamp;
            }

            if (filterCulledTimestamp !== undefined) {
                localVarQueryParameter['filter[culled_timestamp]'] = filterCulledTimestamp;
            }

            if (filterCreated !== undefined) {
                localVarQueryParameter['filter[created]'] = filterCreated;
            }

            if (filterBaselineName !== undefined) {
                localVarQueryParameter['filter[baseline_name]'] = filterBaselineName;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }

            if (filterBuiltPkgcache !== undefined) {
                localVarQueryParameter['filter[built_pkgcache]'] = filterBuiltPkgcache;
            }

            if (filterArch !== undefined) {
                localVarQueryParameter['filter[arch]'] = filterArch;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSystemsApi - functional programming interface
 * @export
 */
export const ListSystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystems(limit?: number, offset?: number, sort?: ListSystemsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSystems(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterSatelliteManaged, filterBuiltPkgcache, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSystemsApi - factory interface
 * @export
 */
export const ListSystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSystemsApiFp(configuration)
    return {
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystems(limit?: number, offset?: number, sort?: ListSystemsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersSystemsResponse> {
            return localVarFp.listSystems(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterSatelliteManaged, filterBuiltPkgcache, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSystemsApi - object-oriented interface
 * @export
 * @class ListSystemsApi
 * @extends {BaseAPI}
 */
export class ListSystemsApi extends BaseAPI {
    /**
     * Show me all my systems
     * @summary Show me all my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListSystemsSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterInstallableRhsaCount] Filter
     * @param {string} [filterInstallableRhbaCount] Filter
     * @param {string} [filterInstallableRheaCount] Filter
     * @param {string} [filterInstallableOtherCount] Filter
     * @param {string} [filterApplicableRhsaCount] Filter
     * @param {string} [filterApplicableRhbaCount] Filter
     * @param {string} [filterApplicableRheaCount] Filter
     * @param {string} [filterApplicableOtherCount] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterPackagesInstalled] Filter
     * @param {string} [filterPackagesInstallable] Filter
     * @param {string} [filterPackagesApplicable] Filter
     * @param {string} [filterStaleTimestamp] Filter
     * @param {string} [filterStaleWarningTimestamp] Filter
     * @param {string} [filterCulledTimestamp] Filter
     * @param {string} [filterCreated] Filter
     * @param {string} [filterBaselineName] Filter
     * @param {string} [filterSatelliteManaged] Filter
     * @param {string} [filterBuiltPkgcache] Filter
     * @param {string} [filterArch] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {string} [filterOsname] Filter OS name
     * @param {string} [filterOsmajor] Filter OS major version
     * @param {string} [filterOsminor] Filter OS minor version
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSystemsApi
     */
    public listSystems(limit?: number, offset?: number, sort?: ListSystemsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ListSystemsApiFp(this.configuration).listSystems(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterSatelliteManaged, filterBuiltPkgcache, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListSystemsSortEnum = {
    Id: 'id',
    DisplayName: 'display_name',
    LastUpload: 'last_upload',
    RhsaCount: 'rhsa_count',
    RhbaCount: 'rhba_count',
    RheaCount: 'rhea_count',
    OtherCount: 'other_count',
    Stale: 'stale',
    PackagesInstalled: 'packages_installed',
    BaselineName: 'baseline_name',
    Groups: 'groups',
    SatelliteManaged: 'satellite_managed',
    BuiltPkgcache: 'built_pkgcache'
} as const;
export type ListSystemsSortEnum = typeof ListSystemsSortEnum[keyof typeof ListSystemsSortEnum];


/**
 * ListSystemsIdsApi - axios parameter creator
 * @export
 */
export const ListSystemsIdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemsIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemsIds: async (limit?: number, offset?: number, sort?: ListSystemsIdsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ids/systems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterInstallableRhsaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhsa_count]'] = filterInstallableRhsaCount;
            }

            if (filterInstallableRhbaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhba_count]'] = filterInstallableRhbaCount;
            }

            if (filterInstallableRheaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhea_count]'] = filterInstallableRheaCount;
            }

            if (filterInstallableOtherCount !== undefined) {
                localVarQueryParameter['filter[installable_other_count]'] = filterInstallableOtherCount;
            }

            if (filterApplicableRhsaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhsa_count]'] = filterApplicableRhsaCount;
            }

            if (filterApplicableRhbaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhba_count]'] = filterApplicableRhbaCount;
            }

            if (filterApplicableRheaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhea_count]'] = filterApplicableRheaCount;
            }

            if (filterApplicableOtherCount !== undefined) {
                localVarQueryParameter['filter[applicable_other_count]'] = filterApplicableOtherCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterPackagesInstalled !== undefined) {
                localVarQueryParameter['filter[packages_installed]'] = filterPackagesInstalled;
            }

            if (filterPackagesInstallable !== undefined) {
                localVarQueryParameter['filter[packages_installable]'] = filterPackagesInstallable;
            }

            if (filterPackagesApplicable !== undefined) {
                localVarQueryParameter['filter[packages_applicable]'] = filterPackagesApplicable;
            }

            if (filterStaleTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_timestamp]'] = filterStaleTimestamp;
            }

            if (filterStaleWarningTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_warning_timestamp]'] = filterStaleWarningTimestamp;
            }

            if (filterCulledTimestamp !== undefined) {
                localVarQueryParameter['filter[culled_timestamp]'] = filterCulledTimestamp;
            }

            if (filterCreated !== undefined) {
                localVarQueryParameter['filter[created]'] = filterCreated;
            }

            if (filterBaselineName !== undefined) {
                localVarQueryParameter['filter[baseline_name]'] = filterBaselineName;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }

            if (filterBuiltPkgcache !== undefined) {
                localVarQueryParameter['filter[built_pkgcache]'] = filterBuiltPkgcache;
            }

            if (filterArch !== undefined) {
                localVarQueryParameter['filter[arch]'] = filterArch;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListSystemsIdsApi - functional programming interface
 * @export
 */
export const ListSystemsIdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListSystemsIdsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemsIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemsIds(limit?: number, offset?: number, sort?: ListSystemsIdsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsSatelliteManagedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSystemsIds(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterOs, filterOsname, filterOsmajor, filterOsminor, filterSatelliteManaged, filterBuiltPkgcache, filterArch, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListSystemsIdsApi - factory interface
 * @export
 */
export const ListSystemsIdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListSystemsIdsApiFp(configuration)
    return {
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {ListSystemsIdsSortEnum} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemsIds(limit?: number, offset?: number, sort?: ListSystemsIdsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersIDsSatelliteManagedResponse> {
            return localVarFp.listSystemsIds(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterOs, filterOsname, filterOsmajor, filterOsminor, filterSatelliteManaged, filterBuiltPkgcache, filterArch, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListSystemsIdsApi - object-oriented interface
 * @export
 * @class ListSystemsIdsApi
 * @extends {BaseAPI}
 */
export class ListSystemsIdsApi extends BaseAPI {
    /**
     * Show me all my systems
     * @summary Show me all my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {ListSystemsIdsSortEnum} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterInstallableRhsaCount] Filter
     * @param {string} [filterInstallableRhbaCount] Filter
     * @param {string} [filterInstallableRheaCount] Filter
     * @param {string} [filterInstallableOtherCount] Filter
     * @param {string} [filterApplicableRhsaCount] Filter
     * @param {string} [filterApplicableRhbaCount] Filter
     * @param {string} [filterApplicableRheaCount] Filter
     * @param {string} [filterApplicableOtherCount] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterPackagesInstalled] Filter
     * @param {string} [filterPackagesInstallable] Filter
     * @param {string} [filterPackagesApplicable] Filter
     * @param {string} [filterStaleTimestamp] Filter
     * @param {string} [filterStaleWarningTimestamp] Filter
     * @param {string} [filterCulledTimestamp] Filter
     * @param {string} [filterCreated] Filter
     * @param {string} [filterBaselineName] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {string} [filterOsname] Filter OS name
     * @param {string} [filterOsmajor] Filter OS major version
     * @param {string} [filterOsminor] Filter OS minor version
     * @param {string} [filterSatelliteManaged] Filter
     * @param {string} [filterBuiltPkgcache] Filter
     * @param {string} [filterArch] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListSystemsIdsApi
     */
    public listSystemsIds(limit?: number, offset?: number, sort?: ListSystemsIdsSortEnum, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ListSystemsIdsApiFp(this.configuration).listSystemsIds(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterOs, filterOsname, filterOsmajor, filterOsminor, filterSatelliteManaged, filterBuiltPkgcache, filterArch, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListSystemsIdsSortEnum = {
    Id: 'id',
    DisplayName: 'display_name',
    LastUpload: 'last_upload',
    RhsaCount: 'rhsa_count',
    RhbaCount: 'rhba_count',
    RheaCount: 'rhea_count',
    OtherCount: 'other_count',
    Stale: 'stale',
    PackagesInstalled: 'packages_installed',
    BaselineName: 'baseline_name',
    SatelliteManaged: 'satellite_managed',
    BuiltPkgcache: 'built_pkgcache'
} as const;
export type ListSystemsIdsSortEnum = typeof ListSystemsIdsSortEnum[keyof typeof ListSystemsIdsSortEnum];


/**
 * PackageSystemsApi - axios parameter creator
 * @export
 */
export const PackageSystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageSystems: async (packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, filterUpdatable?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('packageSystems', 'packageName', packageName)
            const localVarPath = `/packages/{package_name}/systems`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }

            if (filterUpdatable !== undefined) {
                localVarQueryParameter['filter[updatable]'] = filterUpdatable;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackageSystemsApi - functional programming interface
 * @export
 */
export const PackageSystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PackageSystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageSystems(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, filterUpdatable?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackageSystemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.packageSystems(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, filterUpdatable, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PackageSystemsApi - factory interface
 * @export
 */
export const PackageSystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PackageSystemsApiFp(configuration)
    return {
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageSystems(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, filterUpdatable?: boolean, options?: any): AxiosPromise<ControllersPackageSystemsResponse> {
            return localVarFp.packageSystems(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, filterUpdatable, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PackageSystemsApi - object-oriented interface
 * @export
 * @class PackageSystemsApi
 * @extends {BaseAPI}
 */
export class PackageSystemsApi extends BaseAPI {
    /**
     * Show me all my systems which have a package installed
     * @summary Show me all my systems which have a package installed
     * @param {string} packageName Package name
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
     * @param {boolean} [filterUpdatable] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageSystemsApi
     */
    public packageSystems(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, filterUpdatable?: boolean, options?: AxiosRequestConfig) {
        return PackageSystemsApiFp(this.configuration).packageSystems(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, filterUpdatable, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PackageSystemsIdsApi - axios parameter creator
 * @export
 */
export const PackageSystemsIdsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageSystemsIds: async (packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('packageSystemsIds', 'packageName', packageName)
            const localVarPath = `/ids/packages/{package_name}/systems`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackageSystemsIdsApi - functional programming interface
 * @export
 */
export const PackageSystemsIdsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PackageSystemsIdsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageSystemsIds(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.packageSystemsIds(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PackageSystemsIdsApi - factory interface
 * @export
 */
export const PackageSystemsIdsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PackageSystemsIdsApiFp(configuration)
    return {
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageSystemsIds(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, options?: any): AxiosPromise<ControllersIDsStatusResponse> {
            return localVarFp.packageSystemsIds(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PackageSystemsIdsApi - object-oriented interface
 * @export
 * @class PackageSystemsIdsApi
 * @extends {BaseAPI}
 */
export class PackageSystemsIdsApi extends BaseAPI {
    /**
     * Show me all my systems which have a package installed
     * @summary Show me all my systems which have a package installed
     * @param {string} packageName Package name
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageSystemsIdsApi
     */
    public packageSystemsIds(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, options?: AxiosRequestConfig) {
        return PackageSystemsIdsApiFp(this.configuration).packageSystemsIds(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PackageVersionsApi - axios parameter creator
 * @export
 */
export const PackageVersionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me all package versions installed on some system
         * @summary Show me all package versions installed on some system
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageVersions: async (packageName: string, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            assertParamExists('packageVersions', 'packageName', packageName)
            const localVarPath = `/packages/{package_name}/versions`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackageVersionsApi - functional programming interface
 * @export
 */
export const PackageVersionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PackageVersionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me all package versions installed on some system
         * @summary Show me all package versions installed on some system
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageVersions(packageName: string, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackageVersionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.packageVersions(packageName, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PackageVersionsApi - factory interface
 * @export
 */
export const PackageVersionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PackageVersionsApiFp(configuration)
    return {
        /**
         * Show me all package versions installed on some system
         * @summary Show me all package versions installed on some system
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageVersions(packageName: string, limit?: number, offset?: number, options?: any): AxiosPromise<ControllersPackageVersionsResponse> {
            return localVarFp.packageVersions(packageName, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PackageVersionsApi - object-oriented interface
 * @export
 * @class PackageVersionsApi
 * @extends {BaseAPI}
 */
export class PackageVersionsApi extends BaseAPI {
    /**
     * Show me all package versions installed on some system
     * @summary Show me all package versions installed on some system
     * @param {string} packageName Package name
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackageVersionsApi
     */
    public packageVersions(packageName: string, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return PackageVersionsApiFp(this.configuration).packageVersions(packageName, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * RemoveBaselineSystemsApi - axios parameter creator
 * @export
 */
export const RemoveBaselineSystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Remove systems from baseline
         * @summary Remove systems from baseline
         * @param {ControllersBaselineSystemsRemoveRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBaselineSystems: async (body: ControllersBaselineSystemsRemoveRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('removeBaselineSystems', 'body', body)
            const localVarPath = `/baselines/systems/remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RemoveBaselineSystemsApi - functional programming interface
 * @export
 */
export const RemoveBaselineSystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RemoveBaselineSystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Remove systems from baseline
         * @summary Remove systems from baseline
         * @param {ControllersBaselineSystemsRemoveRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBaselineSystems(body: ControllersBaselineSystemsRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBaselineSystems(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RemoveBaselineSystemsApi - factory interface
 * @export
 */
export const RemoveBaselineSystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RemoveBaselineSystemsApiFp(configuration)
    return {
        /**
         * Remove systems from baseline
         * @summary Remove systems from baseline
         * @param {ControllersBaselineSystemsRemoveRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBaselineSystems(body: ControllersBaselineSystemsRemoveRequest, options?: any): AxiosPromise<void> {
            return localVarFp.removeBaselineSystems(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RemoveBaselineSystemsApi - object-oriented interface
 * @export
 * @class RemoveBaselineSystemsApi
 * @extends {BaseAPI}
 */
export class RemoveBaselineSystemsApi extends BaseAPI {
    /**
     * Remove systems from baseline
     * @summary Remove systems from baseline
     * @param {ControllersBaselineSystemsRemoveRequest} body Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RemoveBaselineSystemsApi
     */
    public removeBaselineSystems(body: ControllersBaselineSystemsRemoveRequest, options?: AxiosRequestConfig) {
        return RemoveBaselineSystemsApiFp(this.configuration).removeBaselineSystems(body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemPackagesApi - axios parameter creator
 * @export
 */
export const SystemPackagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {string} [filterUpdateStatus] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPackages: async (inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, filterUpdateStatus?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            assertParamExists('systemPackages', 'inventoryId', inventoryId)
            const localVarPath = `/systems/{inventory_id}/packages`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterEvra !== undefined) {
                localVarQueryParameter['filter[evra]'] = filterEvra;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }

            if (filterUpdatable !== undefined) {
                localVarQueryParameter['filter[updatable]'] = filterUpdatable;
            }

            if (filterUpdateStatus !== undefined) {
                localVarQueryParameter['filter[update_status]'] = filterUpdateStatus;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemPackagesApi - functional programming interface
 * @export
 */
export const SystemPackagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemPackagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {string} [filterUpdateStatus] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemPackages(inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, filterUpdateStatus?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemPackageResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemPackages(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, filterUpdateStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemPackagesApi - factory interface
 * @export
 */
export const SystemPackagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemPackagesApiFp(configuration)
    return {
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {string} [filterUpdateStatus] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPackages(inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, filterUpdateStatus?: string, options?: any): AxiosPromise<ControllersSystemPackageResponse> {
            return localVarFp.systemPackages(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, filterUpdateStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemPackagesApi - object-oriented interface
 * @export
 * @class SystemPackagesApi
 * @extends {BaseAPI}
 */
export class SystemPackagesApi extends BaseAPI {
    /**
     * Show me details about a system packages by given inventory id
     * @summary Show me details about a system packages by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterEvra] Filter
     * @param {string} [filterSummary] Filter
     * @param {boolean} [filterUpdatable] Filter
     * @param {string} [filterUpdateStatus] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemPackagesApi
     */
    public systemPackages(inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, filterUpdateStatus?: string, options?: AxiosRequestConfig) {
        return SystemPackagesApiFp(this.configuration).systemPackages(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, filterUpdateStatus, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemVmaasJsonApi - axios parameter creator
 * @export
 */
export const SystemVmaasJsonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me system\'s json request for VMaaS
         * @summary Show me system\'s json request for VMaaS
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVmaasJson: async (inventoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            assertParamExists('systemVmaasJson', 'inventoryId', inventoryId)
            const localVarPath = `/systems/{inventory_id}/vmaas_json`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemVmaasJsonApi - functional programming interface
 * @export
 */
export const SystemVmaasJsonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemVmaasJsonApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me system\'s json request for VMaaS
         * @summary Show me system\'s json request for VMaaS
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemVmaasJson(inventoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemVmaasJSONResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemVmaasJson(inventoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemVmaasJsonApi - factory interface
 * @export
 */
export const SystemVmaasJsonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemVmaasJsonApiFp(configuration)
    return {
        /**
         * Show me system\'s json request for VMaaS
         * @summary Show me system\'s json request for VMaaS
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVmaasJson(inventoryId: string, options?: any): AxiosPromise<ControllersSystemVmaasJSONResponse> {
            return localVarFp.systemVmaasJson(inventoryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemVmaasJsonApi - object-oriented interface
 * @export
 * @class SystemVmaasJsonApi
 * @extends {BaseAPI}
 */
export class SystemVmaasJsonApi extends BaseAPI {
    /**
     * Show me system\'s json request for VMaaS
     * @summary Show me system\'s json request for VMaaS
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemVmaasJsonApi
     */
    public systemVmaasJson(inventoryId: string, options?: AxiosRequestConfig) {
        return SystemVmaasJsonApiFp(this.configuration).systemVmaasJson(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SystemYumUpdatesApi - axios parameter creator
 * @export
 */
export const SystemYumUpdatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Show me system\'s yum_updates (client side evaluation data)
         * @summary Show me system\'s yum_updates (client side evaluation data)
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemYumUpdates: async (inventoryId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            assertParamExists('systemYumUpdates', 'inventoryId', inventoryId)
            const localVarPath = `/systems/{inventory_id}/yum_updates`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemYumUpdatesApi - functional programming interface
 * @export
 */
export const SystemYumUpdatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemYumUpdatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Show me system\'s yum_updates (client side evaluation data)
         * @summary Show me system\'s yum_updates (client side evaluation data)
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemYumUpdates(inventoryId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemYumUpdatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemYumUpdates(inventoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemYumUpdatesApi - factory interface
 * @export
 */
export const SystemYumUpdatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemYumUpdatesApiFp(configuration)
    return {
        /**
         * Show me system\'s yum_updates (client side evaluation data)
         * @summary Show me system\'s yum_updates (client side evaluation data)
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemYumUpdates(inventoryId: string, options?: any): AxiosPromise<ControllersSystemYumUpdatesResponse> {
            return localVarFp.systemYumUpdates(inventoryId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemYumUpdatesApi - object-oriented interface
 * @export
 * @class SystemYumUpdatesApi
 * @extends {BaseAPI}
 */
export class SystemYumUpdatesApi extends BaseAPI {
    /**
     * Show me system\'s yum_updates (client side evaluation data)
     * @summary Show me system\'s yum_updates (client side evaluation data)
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemYumUpdatesApi
     */
    public systemYumUpdates(inventoryId: string, options?: AxiosRequestConfig) {
        return SystemYumUpdatesApiFp(this.configuration).systemYumUpdates(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UpdateBaselineApi - axios parameter creator
 * @export
 */
export const UpdateBaselineApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Update a baseline for my set of systems. System cannot be satellite managed.
         * @summary Update a baseline for my set of systems
         * @param {number} baselineId Baseline ID
         * @param {ControllersUpdateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBaseline: async (baselineId: number, body: ControllersUpdateBaselineRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('updateBaseline', 'baselineId', baselineId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateBaseline', 'body', body)
            const localVarPath = `/baselines/{baseline_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdateBaselineApi - functional programming interface
 * @export
 */
export const UpdateBaselineApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpdateBaselineApiAxiosParamCreator(configuration)
    return {
        /**
         * Update a baseline for my set of systems. System cannot be satellite managed.
         * @summary Update a baseline for my set of systems
         * @param {number} baselineId Baseline ID
         * @param {ControllersUpdateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBaseline(baselineId: number, body: ControllersUpdateBaselineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersUpdateBaselineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBaseline(baselineId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpdateBaselineApi - factory interface
 * @export
 */
export const UpdateBaselineApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpdateBaselineApiFp(configuration)
    return {
        /**
         * Update a baseline for my set of systems. System cannot be satellite managed.
         * @summary Update a baseline for my set of systems
         * @param {number} baselineId Baseline ID
         * @param {ControllersUpdateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBaseline(baselineId: number, body: ControllersUpdateBaselineRequest, options?: any): AxiosPromise<ControllersUpdateBaselineResponse> {
            return localVarFp.updateBaseline(baselineId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UpdateBaselineApi - object-oriented interface
 * @export
 * @class UpdateBaselineApi
 * @extends {BaseAPI}
 */
export class UpdateBaselineApi extends BaseAPI {
    /**
     * Update a baseline for my set of systems. System cannot be satellite managed.
     * @summary Update a baseline for my set of systems
     * @param {number} baselineId Baseline ID
     * @param {ControllersUpdateBaselineRequest} body Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateBaselineApi
     */
    public updateBaseline(baselineId: number, body: ControllersUpdateBaselineRequest, options?: AxiosRequestConfig) {
        return UpdateBaselineApiFp(this.configuration).updateBaseline(baselineId, body, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ViewAdvisoriesSystemsApi - axios parameter creator
 * @export
 */
export const ViewAdvisoriesSystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * View advisory-system pairs for selected systems and installable advisories
         * @summary View advisory-system pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAdvisoriesSystems: async (body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('viewAdvisoriesSystems', 'body', body)
            const localVarPath = `/views/advisories/systems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViewAdvisoriesSystemsApi - functional programming interface
 * @export
 */
export const ViewAdvisoriesSystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ViewAdvisoriesSystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * View advisory-system pairs for selected systems and installable advisories
         * @summary View advisory-system pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAdvisoriesSystems(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoriesSystemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAdvisoriesSystems(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ViewAdvisoriesSystemsApi - factory interface
 * @export
 */
export const ViewAdvisoriesSystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ViewAdvisoriesSystemsApiFp(configuration)
    return {
        /**
         * View advisory-system pairs for selected systems and installable advisories
         * @summary View advisory-system pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAdvisoriesSystems(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersAdvisoriesSystemsResponse> {
            return localVarFp.viewAdvisoriesSystems(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ViewAdvisoriesSystemsApi - object-oriented interface
 * @export
 * @class ViewAdvisoriesSystemsApi
 * @extends {BaseAPI}
 */
export class ViewAdvisoriesSystemsApi extends BaseAPI {
    /**
     * View advisory-system pairs for selected systems and installable advisories
     * @summary View advisory-system pairs for selected systems and installable advisories
     * @param {ControllersSystemsAdvisoriesRequest} body Request body
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewAdvisoriesSystemsApi
     */
    public viewAdvisoriesSystems(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ViewAdvisoriesSystemsApiFp(this.configuration).viewAdvisoriesSystems(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ViewSystemsAdvisoriesApi - axios parameter creator
 * @export
 */
export const ViewSystemsAdvisoriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * View system-advisory pairs for selected systems and installable advisories
         * @summary View system-advisory pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSystemsAdvisories: async (body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('viewSystemsAdvisories', 'body', body)
            const localVarPath = `/views/systems/advisories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            await setApiKeyToObject(localVarHeaderParameter, "x-rh-identity", configuration)

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ViewSystemsAdvisoriesApi - functional programming interface
 * @export
 */
export const ViewSystemsAdvisoriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ViewSystemsAdvisoriesApiAxiosParamCreator(configuration)
    return {
        /**
         * View system-advisory pairs for selected systems and installable advisories
         * @summary View system-advisory pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSystemsAdvisories(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemsAdvisoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewSystemsAdvisories(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ViewSystemsAdvisoriesApi - factory interface
 * @export
 */
export const ViewSystemsAdvisoriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ViewSystemsAdvisoriesApiFp(configuration)
    return {
        /**
         * View system-advisory pairs for selected systems and installable advisories
         * @summary View system-advisory pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSystemsAdvisories(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersSystemsAdvisoriesResponse> {
            return localVarFp.viewSystemsAdvisories(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ViewSystemsAdvisoriesApi - object-oriented interface
 * @export
 * @class ViewSystemsAdvisoriesApi
 * @extends {BaseAPI}
 */
export class ViewSystemsAdvisoriesApi extends BaseAPI {
    /**
     * View system-advisory pairs for selected systems and installable advisories
     * @summary View system-advisory pairs for selected systems and installable advisories
     * @param {ControllersSystemsAdvisoriesRequest} body Request body
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ViewSystemsAdvisoriesApi
     */
    public viewSystemsAdvisories(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: AxiosRequestConfig) {
        return ViewSystemsAdvisoriesApiFp(this.configuration).viewSystemsAdvisories(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }
}



