// tslint:disable
/**
 * Patchman-engine API
 * API of the Patch application on [console.redhat.com](https://console.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v1.18.59
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ControllersAdvisoriesResponse
 */
export interface ControllersAdvisoriesResponse {
    /**
     *
     * @type {Array<ControllersAdvisoryItem>}
     * @memberof ControllersAdvisoriesResponse
     */
    data?: Array<ControllersAdvisoryItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersAdvisoriesResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersAdvisoriesResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersAdvisoriesSystemsResponse
 */
export interface ControllersAdvisoriesSystemsResponse {
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ControllersAdvisoriesSystemsResponse
     */
    data?: { [key: string]: Array<string>; };
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailAttributes
 */
export interface ControllersAdvisoryDetailAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    advisory_type_name?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    cves?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    fixes?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    modified_date?: string;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    packages?: { [key: string]: string; };
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    public_date?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    reboot_required?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    references?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    release_versions?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    solution?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    synopsis?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    topic?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailItem
 */
export interface ControllersAdvisoryDetailItem {
    /**
     *
     * @type {ControllersAdvisoryDetailAttributes}
     * @memberof ControllersAdvisoryDetailItem
     */
    attributes?: ControllersAdvisoryDetailAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailResponse
 */
export interface ControllersAdvisoryDetailResponse {
    /**
     *
     * @type {ControllersAdvisoryDetailItem}
     * @memberof ControllersAdvisoryDetailResponse
     */
    data?: ControllersAdvisoryDetailItem;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryInlineItem
 */
export interface ControllersAdvisoryInlineItem {
    /**
     * Deprecated, not useful database ID (0 - unknown, 1 -, enhancement, 2 - bugfix, 3 - security, 4 - unspecified)
     * @type {number}
     * @memberof ControllersAdvisoryInlineItem
     */
    advisory_type?: number;
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersAdvisoryInlineItem
     */
    advisory_type_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryInlineItem
     */
    applicable_systems?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryInlineItem
     */
    cve_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryInlineItem
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryInlineItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryInlineItem
     */
    public_date?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisoryInlineItem
     */
    reboot_required?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryInlineItem
     */
    release_versions?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryInlineItem
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryInlineItem
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryItem
 */
export interface ControllersAdvisoryItem {
    /**
     *
     * @type {ControllersAdvisoryItemAttributes}
     * @memberof ControllersAdvisoryItem
     */
    attributes?: ControllersAdvisoryItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryItemAttributes
 */
export interface ControllersAdvisoryItemAttributes {
    /**
     * Deprecated, not useful database ID (0 - unknown, 1 -, enhancement, 2 - bugfix, 3 - security, 4 - unspecified)
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    advisory_type?: number;
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    advisory_type_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    applicable_systems?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    cve_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    public_date?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisoryItemAttributes
     */
    reboot_required?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryItemAttributes
     */
    release_versions?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisorySystemsResponse
 */
export interface ControllersAdvisorySystemsResponse {
    /**
     *
     * @type {Array<ControllersSystemItem>}
     * @memberof ControllersAdvisorySystemsResponse
     */
    data?: Array<ControllersSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersAdvisorySystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersAdvisorySystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersBaselineConfig
 */
export interface ControllersBaselineConfig {
    /**
     * Filter applicable advisories (updates) by the latest publish time.
     * @type {string}
     * @memberof ControllersBaselineConfig
     */
    to_time?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineDetailAttributes
 */
export interface ControllersBaselineDetailAttributes {
    /**
     *
     * @type {ControllersBaselineConfig}
     * @memberof ControllersBaselineDetailAttributes
     */
    config?: ControllersBaselineConfig;
    /**
     * Baseline name
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineDetailItem
 */
export interface ControllersBaselineDetailItem {
    /**
     *
     * @type {ControllersBaselineDetailAttributes}
     * @memberof ControllersBaselineDetailItem
     */
    attributes?: ControllersBaselineDetailAttributes;
    /**
     * Baseline ID
     * @type {number}
     * @memberof ControllersBaselineDetailItem
     */
    id?: number;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersBaselineDetailItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineDetailResponse
 */
export interface ControllersBaselineDetailResponse {
    /**
     *
     * @type {ControllersBaselineDetailItem}
     * @memberof ControllersBaselineDetailResponse
     */
    data?: ControllersBaselineDetailItem;
}
/**
 *
 * @export
 * @interface ControllersBaselineItem
 */
export interface ControllersBaselineItem {
    /**
     *
     * @type {ControllersBaselineItemAttributes}
     * @memberof ControllersBaselineItem
     */
    attributes?: ControllersBaselineItemAttributes;
    /**
     * Unique baseline id
     * @type {number}
     * @memberof ControllersBaselineItem
     */
    id?: number;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersBaselineItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineItemAttributes
 */
export interface ControllersBaselineItemAttributes {
    /**
     * Baseline name
     * @type {string}
     * @memberof ControllersBaselineItemAttributes
     */
    name?: string;
    /**
     * Count of the systems associated with the baseline
     * @type {number}
     * @memberof ControllersBaselineItemAttributes
     */
    systems?: number;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemAttributes
 */
export interface ControllersBaselineSystemAttributes {
    /**
     * Baseline system display name
     * @type {string}
     * @memberof ControllersBaselineSystemAttributes
     */
    display_name?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemItem
 */
export interface ControllersBaselineSystemItem {
    /**
     *
     * @type {ControllersBaselineSystemAttributes}
     * @memberof ControllersBaselineSystemItem
     */
    attributes?: ControllersBaselineSystemAttributes;
    /**
     * Baseline system inventory ID (uuid format)
     * @type {string}
     * @memberof ControllersBaselineSystemItem
     */
    inventory_id?: string;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersBaselineSystemItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemsResponse
 */
export interface ControllersBaselineSystemsResponse {
    /**
     *
     * @type {Array<ControllersBaselineSystemItem>}
     * @memberof ControllersBaselineSystemsResponse
     */
    data?: Array<ControllersBaselineSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersBaselineSystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersBaselineSystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersBaselinesResponse
 */
export interface ControllersBaselinesResponse {
    /**
     * Baseline items
     * @type {Array<ControllersBaselineItem>}
     * @memberof ControllersBaselinesResponse
     */
    data?: Array<ControllersBaselineItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersBaselinesResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersBaselinesResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersCreateBaselineRequest
 */
export interface ControllersCreateBaselineRequest {
    /**
     *
     * @type {ControllersBaselineConfig}
     * @memberof ControllersCreateBaselineRequest
     */
    config?: ControllersBaselineConfig;
    /**
     * Inventory IDs list of systems to associate with this baseline (optional).
     * @type {Array<string>}
     * @memberof ControllersCreateBaselineRequest
     */
    inventory_ids?: Array<string>;
    /**
     * Baseline name (optional).
     * @type {string}
     * @memberof ControllersCreateBaselineRequest
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ControllersCreateBaselineResponse
 */
export interface ControllersCreateBaselineResponse {
    /**
     * Updated baseline unique ID, it can not be changed
     * @type {number}
     * @memberof ControllersCreateBaselineResponse
     */
    baseline_id?: number;
}
/**
 *
 * @export
 * @interface ControllersDeleteBaselineResponse
 */
export interface ControllersDeleteBaselineResponse {
    /**
     * Updated baseline unique ID, it can not be changed
     * @type {number}
     * @memberof ControllersDeleteBaselineResponse
     */
    baseline_id?: number;
}
/**
 *
 * @export
 * @interface ControllersFilterData
 */
export interface ControllersFilterData {
    /**
     *
     * @type {string}
     * @memberof ControllersFilterData
     */
    op?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersFilterData
     */
    values?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersLinks
 */
export interface ControllersLinks {
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    first?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    last?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    next?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    previous?: string;
}
/**
 *
 * @export
 * @interface ControllersListMeta
 */
export interface ControllersListMeta {
    /**
     * Used filters
     * @type {{ [key: string]: ControllersFilterData; }}
     * @memberof ControllersListMeta
     */
    filter?: { [key: string]: ControllersFilterData; };
    /**
     * Used response limit (page size) - pagination
     * @type {number}
     * @memberof ControllersListMeta
     */
    limit?: number;
    /**
     * Used response offset - pagination
     * @type {number}
     * @memberof ControllersListMeta
     */
    offset?: number;
    /**
     * Used search terms
     * @type {string}
     * @memberof ControllersListMeta
     */
    search?: string;
    /**
     * Used sorting fields
     * @type {Array<string>}
     * @memberof ControllersListMeta
     */
    sort?: Array<string>;
    /**
     * Some subtotals used by some endpoints
     * @type {{ [key: string]: number; }}
     * @memberof ControllersListMeta
     */
    subtotals?: { [key: string]: number; };
    /**
     * Total items count to return
     * @type {number}
     * @memberof ControllersListMeta
     */
    total_items?: number;
}
/**
 *
 * @export
 * @interface ControllersPackageDetailAttributes
 */
export interface ControllersPackageDetailAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    advisory_id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    summary?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    version?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageDetailItem
 */
export interface ControllersPackageDetailItem {
    /**
     *
     * @type {ControllersPackageDetailAttributes}
     * @memberof ControllersPackageDetailItem
     */
    attributes?: ControllersPackageDetailAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageDetailResponse
 */
export interface ControllersPackageDetailResponse {
    /**
     *
     * @type {ControllersPackageDetailItem}
     * @memberof ControllersPackageDetailResponse
     */
    data?: ControllersPackageDetailItem;
}
/**
 *
 * @export
 * @interface ControllersPackageItem
 */
export interface ControllersPackageItem {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageItem
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageItem
     */
    summary?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersPackageItem
     */
    systems_installed?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersPackageItem
     */
    systems_updatable?: number;
}
/**
 *
 * @export
 * @interface ControllersPackageSystemItem
 */
export interface ControllersPackageSystemItem {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    available_evra?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    baseline_name?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersPackageSystemItem
     */
    baseline_uptodate?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    display_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    installed_evra?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersPackageSystemItem
     */
    tags?: Array<ControllersSystemTag>;
    /**
     *
     * @type {boolean}
     * @memberof ControllersPackageSystemItem
     */
    updatable?: boolean;
}
/**
 *
 * @export
 * @interface ControllersPackageSystemsResponse
 */
export interface ControllersPackageSystemsResponse {
    /**
     *
     * @type {Array<ControllersPackageSystemItem>}
     * @memberof ControllersPackageSystemsResponse
     */
    data?: Array<ControllersPackageSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersPackageSystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersPackageSystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersPackageVersionItem
 */
export interface ControllersPackageVersionItem {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageVersionItem
     */
    evra?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageVersionsResponse
 */
export interface ControllersPackageVersionsResponse {
    /**
     *
     * @type {Array<ControllersPackageVersionItem>}
     * @memberof ControllersPackageVersionsResponse
     */
    data?: Array<ControllersPackageVersionItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersPackageVersionsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersPackageVersionsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersPackagesResponse
 */
export interface ControllersPackagesResponse {
    /**
     *
     * @type {Array<ControllersPackageItem>}
     * @memberof ControllersPackagesResponse
     */
    data?: Array<ControllersPackageItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersPackagesResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersPackagesResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoriesDBLookup
 */
export interface ControllersSystemAdvisoriesDBLookup {
    /**
     * Deprecated, not useful database ID (0 - unknown, 1 -, enhancement, 2 - bugfix, 3 - security, 4 - unspecified)
     * @type {number}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    advisory_type?: number;
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    advisory_type_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    cve_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    public_date?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    reboot_required?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    release_versions?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoriesResponse
 */
export interface ControllersSystemAdvisoriesResponse {
    /**
     * advisories items
     * @type {Array<ControllersSystemAdvisoryItem>}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    data?: Array<ControllersSystemAdvisoryItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoryItem
 */
export interface ControllersSystemAdvisoryItem {
    /**
     *
     * @type {ControllersSystemAdvisoryItemAttributes}
     * @memberof ControllersSystemAdvisoryItem
     */
    attributes?: ControllersSystemAdvisoryItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoryItemAttributes
 */
export interface ControllersSystemAdvisoryItemAttributes {
    /**
     * Deprecated, not useful database ID (0 - unknown, 1 -, enhancement, 2 - bugfix, 3 - security, 4 - unspecified)
     * @type {number}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    advisory_type?: number;
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    advisory_type_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    cve_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    public_date?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    reboot_required?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    release_versions?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemDetailResponse
 */
export interface ControllersSystemDetailResponse {
    /**
     *
     * @type {ControllersSystemItem}
     * @memberof ControllersSystemDetailResponse
     */
    data?: ControllersSystemItem;
}
/**
 *
 * @export
 * @interface ControllersSystemInlineItem
 */
export interface ControllersSystemInlineItem {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    baseline_name?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemInlineItem
     */
    baseline_uptodate?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    created?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    culled_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    display_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    insights_id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    last_evaluation?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    os_major?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    os_minor?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    os_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemInlineItem
     */
    other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemInlineItem
     */
    packages_installed?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemInlineItem
     */
    packages_updatable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemInlineItem
     */
    rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemInlineItem
     */
    rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemInlineItem
     */
    rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    rhsm?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemInlineItem
     */
    stale?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    stale_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    stale_warning_timestamp?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersSystemInlineItem
     */
    tags?: Array<ControllersSystemTag>;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemInlineItem
     */
    third_party?: boolean;
}
/**
 *
 * @export
 * @interface ControllersSystemItem
 */
export interface ControllersSystemItem {
    /**
     *
     * @type {ControllersSystemItemAttributes}
     * @memberof ControllersSystemItem
     */
    attributes?: ControllersSystemItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemItemAttributes
 */
export interface ControllersSystemItemAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    baseline_name?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributes
     */
    baseline_uptodate?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    created?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    culled_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    display_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    insights_id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    last_evaluation?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    os_major?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    os_minor?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    os_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    packages_installed?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    packages_updatable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    rhsm?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributes
     */
    stale?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    stale_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    stale_warning_timestamp?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersSystemItemAttributes
     */
    tags?: Array<ControllersSystemTag>;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributes
     */
    third_party?: boolean;
}
/**
 *
 * @export
 * @interface ControllersSystemPackageData
 */
export interface ControllersSystemPackageData {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    evra?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    summary?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemPackageData
     */
    updatable?: boolean;
    /**
     *
     * @type {Array<ModelsPackageUpdate>}
     * @memberof ControllersSystemPackageData
     */
    updates?: Array<ModelsPackageUpdate>;
}
/**
 *
 * @export
 * @interface ControllersSystemPackageInline
 */
export interface ControllersSystemPackageInline {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    evra?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    latest_evra?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    summary?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemPackageInline
     */
    updatable?: boolean;
}
/**
 *
 * @export
 * @interface ControllersSystemPackageResponse
 */
export interface ControllersSystemPackageResponse {
    /**
     *
     * @type {Array<ControllersSystemPackageData>}
     * @memberof ControllersSystemPackageResponse
     */
    data?: Array<ControllersSystemPackageData>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemPackageResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemPackageResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemTag
 */
export interface ControllersSystemTag {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemTag
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemTag
     */
    namespace?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemTag
     */
    value?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemsAdvisoriesRequest
 */
export interface ControllersSystemsAdvisoriesRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemsAdvisoriesRequest
     */
    advisories?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemsAdvisoriesRequest
     */
    systems?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersSystemsAdvisoriesResponse
 */
export interface ControllersSystemsAdvisoriesResponse {
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ControllersSystemsAdvisoriesResponse
     */
    data?: { [key: string]: Array<string>; };
}
/**
 *
 * @export
 * @interface ControllersSystemsResponse
 */
export interface ControllersSystemsResponse {
    /**
     *
     * @type {Array<ControllersSystemItem>}
     * @memberof ControllersSystemsResponse
     */
    data?: Array<ControllersSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersUpdateBaselineRequest
 */
export interface ControllersUpdateBaselineRequest {
    /**
     *
     * @type {ControllersBaselineConfig}
     * @memberof ControllersUpdateBaselineRequest
     */
    config?: ControllersBaselineConfig;
    /**
     * Map of inventories to add to (true) or remove (false) from given baseline (optional)
     * @type {{ [key: string]: boolean; }}
     * @memberof ControllersUpdateBaselineRequest
     */
    inventory_ids?: { [key: string]: boolean; };
    /**
     * Updated baseline name (optional)
     * @type {string}
     * @memberof ControllersUpdateBaselineRequest
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ControllersUpdateBaselineResponse
 */
export interface ControllersUpdateBaselineResponse {
    /**
     *
     * @type {ControllersBaselineDetailItem}
     * @memberof ControllersUpdateBaselineResponse
     */
    data?: ControllersBaselineDetailItem;
}
/**
 *
 * @export
 * @interface ModelsPackageUpdate
 */
export interface ModelsPackageUpdate {
    /**
     *
     * @type {string}
     * @memberof ModelsPackageUpdate
     */
    advisory?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsPackageUpdate
     */
    evra?: string;
}
/**
 *
 * @export
 * @interface UtilsErrorResponse
 */
export interface UtilsErrorResponse {
    /**
     *
     * @type {string}
     * @memberof UtilsErrorResponse
     */
    error?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletesystem: async (inventoryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling deletesystem.');
            }
            const localVarPath = `/api/patch/v1/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAdvisory: async (advisoryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            if (advisoryId === null || advisoryId === undefined) {
                throw new RequiredError('advisoryId','Required parameter advisoryId was null or undefined when calling detailAdvisory.');
            }
            const localVarPath = `/api/patch/v1/advisories/{advisory_id}`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailSystem: async (inventoryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling detailSystem.');
            }
            const localVarPath = `/api/patch/v1/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export applicable advisories for all my systems
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisories: async (search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/patch/v1/export/advisories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }

            if (filterApplicableSystems !== undefined) {
                localVarQueryParameter['filter[applicable_systems]'] = filterApplicableSystems;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export systems for my account
         * @summary Export systems for my account
         * @param {string} advisoryId Advisory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesUpdatable] Filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisorySystems: async (advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            if (advisoryId === null || advisoryId === undefined) {
                throw new RequiredError('advisoryId','Required parameter advisoryId was null or undefined when calling exportAdvisorySystems.');
            }
            const localVarPath = `/api/patch/v1/export/advisories/{advisory_id}/systems`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterPackagesInstalled !== undefined) {
                localVarQueryParameter['filter[packages_installed]'] = filterPackagesInstalled;
            }

            if (filterPackagesUpdatable !== undefined) {
                localVarQueryParameter['filter[packages_updatable]'] = filterPackagesUpdatable;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSidsIn) {
                localVarQueryParameter['filter[system_profile][sap_sids][in]'] = filterSystemProfileSapSidsIn;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackageSystems: async (packageName: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            if (packageName === null || packageName === undefined) {
                throw new RequiredError('packageName','Required parameter packageName was null or undefined when calling exportPackageSystems.');
            }
            const localVarPath = `/api/patch/v1/export/packages/{package_name}/systems`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSidsIn) {
                localVarQueryParameter['filter[system_profile][sap_sids][in]'] = filterSystemProfileSapSidsIn;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {'id' | 'name' | 'systems_installed' | 'systems_updatable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsUpdatable] Filter
         * @param {string} [filterSummary] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackages: async (sort?: 'id' | 'name' | 'systems_installed' | 'systems_updatable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsUpdatable?: string, filterSummary?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/patch/v1/export/packages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterSystemsInstalled !== undefined) {
                localVarQueryParameter['filter[systems_installed]'] = filterSystemsInstalled;
            }

            if (filterSystemsUpdatable !== undefined) {
                localVarQueryParameter['filter[systems_updatable]'] = filterSystemsUpdatable;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export applicable advisories for all my systems
         * @summary Export applicable advisories for all my systems
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemAdvisories: async (inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling exportSystemAdvisories.');
            }
            const localVarPath = `/api/patch/v1/export/systems/{inventory_id}/advisories`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemPackages: async (inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling exportSystemPackages.');
            }
            const localVarPath = `/api/patch/v1/export/systems/{inventory_id}/packages`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterEvra !== undefined) {
                localVarQueryParameter['filter[evra]'] = filterEvra;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }

            if (filterUpdatable !== undefined) {
                localVarQueryParameter['filter[updatable]'] = filterUpdatable;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export systems for my account
         * @summary Export systems for my account
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesUpdatable] Filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystems: async (search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/patch/v1/export/systems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterPackagesInstalled !== undefined) {
                localVarQueryParameter['filter[packages_installed]'] = filterPackagesInstalled;
            }

            if (filterPackagesUpdatable !== undefined) {
                localVarQueryParameter['filter[packages_updatable]'] = filterPackagesUpdatable;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSidsIn) {
                localVarQueryParameter['filter[system_profile][sap_sids][in]'] = filterSystemProfileSapSidsIn;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me metadata of selected package
         * @summary Show me metadata of selected package
         * @param {string} packageName package_name - latest, nevra - exact version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        latestPackage: async (packageName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            if (packageName === null || packageName === undefined) {
                throw new RequiredError('packageName','Required parameter packageName was null or undefined when calling latestPackage.');
            }
            const localVarPath = `/api/patch/v1/packages/{package_name}`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisories: async (limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/patch/v1/advisories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }

            if (filterApplicableSystems !== undefined) {
                localVarQueryParameter['filter[applicable_systems]'] = filterApplicableSystems;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSidsIn) {
                localVarQueryParameter['filter[system_profile][sap_sids][in]'] = filterSystemProfileSapSidsIn;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystems: async (advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale', search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            if (advisoryId === null || advisoryId === undefined) {
                throw new RequiredError('advisoryId','Required parameter advisoryId was null or undefined when calling listAdvisorySystems.');
            }
            const localVarPath = `/api/patch/v1/advisories/{advisory_id}/systems`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterInsightsId !== undefined) {
                localVarQueryParameter['filter[insights_id]'] = filterInsightsId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterStaleTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_timestamp]'] = filterStaleTimestamp;
            }

            if (filterStaleWarningTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_warning_timestamp]'] = filterStaleWarningTimestamp;
            }

            if (filterCulledTimestamp !== undefined) {
                localVarQueryParameter['filter[culled_timestamp]'] = filterCulledTimestamp;
            }

            if (filterCreated !== undefined) {
                localVarQueryParameter['filter[created]'] = filterCreated;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSidsIn) {
                localVarQueryParameter['filter[system_profile][sap_sids][in]'] = filterSystemProfileSapSidsIn;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'systems_installed' | 'systems_updatable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsUpdatable] Filter
         * @param {string} [filterSummary] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackages: async (limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems_installed' | 'systems_updatable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsUpdatable?: string, filterSummary?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/patch/v1/packages/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterSystemsInstalled !== undefined) {
                localVarQueryParameter['filter[systems_installed]'] = filterSystemsInstalled;
            }

            if (filterSystemsUpdatable !== undefined) {
                localVarQueryParameter['filter[systems_updatable]'] = filterSystemsUpdatable;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSidsIn) {
                localVarQueryParameter['filter[system_profile][sap_sids][in]'] = filterSystemProfileSapSidsIn;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisories: async (inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling listSystemAdvisories.');
            }
            const localVarPath = `/api/patch/v1/systems/{inventory_id}/advisories`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'packages_updatable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesUpdatable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystems: async (limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'packages_updatable', search?: string, filterInsightsId?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/patch/v1/systems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterInsightsId !== undefined) {
                localVarQueryParameter['filter[insights_id]'] = filterInsightsId;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterPackagesInstalled !== undefined) {
                localVarQueryParameter['filter[packages_installed]'] = filterPackagesInstalled;
            }

            if (filterPackagesUpdatable !== undefined) {
                localVarQueryParameter['filter[packages_updatable]'] = filterPackagesUpdatable;
            }

            if (filterStaleTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_timestamp]'] = filterStaleTimestamp;
            }

            if (filterStaleWarningTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_warning_timestamp]'] = filterStaleWarningTimestamp;
            }

            if (filterCulledTimestamp !== undefined) {
                localVarQueryParameter['filter[culled_timestamp]'] = filterCulledTimestamp;
            }

            if (filterCreated !== undefined) {
                localVarQueryParameter['filter[created]'] = filterCreated;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSidsIn) {
                localVarQueryParameter['filter[system_profile][sap_sids][in]'] = filterSystemProfileSapSidsIn;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageSystems: async (packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            if (packageName === null || packageName === undefined) {
                throw new RequiredError('packageName','Required parameter packageName was null or undefined when calling packageSystems.');
            }
            const localVarPath = `/api/patch/v1/packages/{package_name}/systems`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSidsIn) {
                localVarQueryParameter['filter[system_profile][sap_sids][in]'] = filterSystemProfileSapSidsIn;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all package versions installed on some system
         * @summary Show me all package versions installed on some system
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageVersions: async (packageName: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            if (packageName === null || packageName === undefined) {
                throw new RequiredError('packageName','Required parameter packageName was null or undefined when calling packageVersions.');
            }
            const localVarPath = `/api/patch/v1/packages/{package_name}/versions`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPackages: async (inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling systemPackages.');
            }
            const localVarPath = `/api/patch/v1/systems/{inventory_id}/packages`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterEvra !== undefined) {
                localVarQueryParameter['filter[evra]'] = filterEvra;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }

            if (filterUpdatable !== undefined) {
                localVarQueryParameter['filter[updatable]'] = filterUpdatable;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View advisory-system pairs for selected systems and advisories
         * @summary View advisory-system pairs for selected systems and advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAdvisoriesSystems: async (body: ControllersSystemsAdvisoriesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling viewAdvisoriesSystems.');
            }
            const localVarPath = `/api/patch/v1/views/advisories/systems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View system-advisory pairs for selected systems and advisories
         * @summary View system-advisory pairs for selected systems and advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSystemsAdvisories: async (body: ControllersSystemsAdvisoriesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling viewSystemsAdvisories.');
            }
            const localVarPath = `/api/patch/v1/views/systems/advisories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletesystem(inventoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deletesystem(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailAdvisory(advisoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoryDetailResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).detailAdvisory(advisoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailSystem(inventoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemDetailResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).detailSystem(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export applicable advisories for all my systems
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersAdvisoryInlineItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export systems for my account
         * @summary Export systems for my account
         * @param {string} advisoryId Advisory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesUpdatable] Filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAdvisorySystems(advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemInlineItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportAdvisorySystems(advisoryId, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportPackageSystems(packageName: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersPackageSystemItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportPackageSystems(packageName, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, tags, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {'id' | 'name' | 'systems_installed' | 'systems_updatable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsUpdatable] Filter
         * @param {string} [filterSummary] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportPackages(sort?: 'id' | 'name' | 'systems_installed' | 'systems_updatable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsUpdatable?: string, filterSummary?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersPackageItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportPackages(sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export applicable advisories for all my systems
         * @summary Export applicable advisories for all my systems
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSystemAdvisories(inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemAdvisoriesDBLookup>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportSystemAdvisories(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSystemPackages(inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemPackageInline>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportSystemPackages(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export systems for my account
         * @summary Export systems for my account
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesUpdatable] Filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSystems(search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemInlineItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportSystems(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me metadata of selected package
         * @summary Show me metadata of selected package
         * @param {string} packageName package_name - latest, nevra - exact version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async latestPackage(packageName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackageDetailResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).latestPackage(packageName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdvisories(limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoriesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale', search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisorySystemsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listAdvisorySystems(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'systems_installed' | 'systems_updatable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsUpdatable] Filter
         * @param {string} [filterSummary] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackages(limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems_installed' | 'systems_updatable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsUpdatable?: string, filterSummary?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackagesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listPackages(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemAdvisoriesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'packages_updatable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesUpdatable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystems(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'packages_updatable', search?: string, filterInsightsId?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSystems(limit, offset, sort, search, filterInsightsId, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageSystems(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackageSystemsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).packageSystems(packageName, limit, offset, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all package versions installed on some system
         * @summary Show me all package versions installed on some system
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageVersions(packageName: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackageVersionsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).packageVersions(packageName, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemPackages(inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemPackageResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).systemPackages(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * View advisory-system pairs for selected systems and advisories
         * @summary View advisory-system pairs for selected systems and advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAdvisoriesSystems(body: ControllersSystemsAdvisoriesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoriesSystemsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).viewAdvisoriesSystems(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * View system-advisory pairs for selected systems and advisories
         * @summary View system-advisory pairs for selected systems and advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSystemsAdvisories(body: ControllersSystemsAdvisoriesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemsAdvisoriesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).viewSystemsAdvisories(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletesystem(inventoryId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deletesystem(inventoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAdvisory(advisoryId: string, options?: any): AxiosPromise<ControllersAdvisoryDetailResponse> {
            return DefaultApiFp(configuration).detailAdvisory(advisoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailSystem(inventoryId: string, options?: any): AxiosPromise<ControllersSystemDetailResponse> {
            return DefaultApiFp(configuration).detailSystem(inventoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Export applicable advisories for all my systems
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any): AxiosPromise<Array<ControllersAdvisoryInlineItem>> {
            return DefaultApiFp(configuration).exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, options).then((request) => request(axios, basePath));
        },
        /**
         * Export systems for my account
         * @summary Export systems for my account
         * @param {string} advisoryId Advisory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesUpdatable] Filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisorySystems(advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, options?: any): AxiosPromise<Array<ControllersSystemInlineItem>> {
            return DefaultApiFp(configuration).exportAdvisorySystems(advisoryId, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackageSystems(packageName: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options?: any): AxiosPromise<Array<ControllersPackageSystemItem>> {
            return DefaultApiFp(configuration).exportPackageSystems(packageName, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {'id' | 'name' | 'systems_installed' | 'systems_updatable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsUpdatable] Filter
         * @param {string} [filterSummary] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackages(sort?: 'id' | 'name' | 'systems_installed' | 'systems_updatable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsUpdatable?: string, filterSummary?: string, options?: any): AxiosPromise<Array<ControllersPackageItem>> {
            return DefaultApiFp(configuration).exportPackages(sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, options).then((request) => request(axios, basePath));
        },
        /**
         * Export applicable advisories for all my systems
         * @summary Export applicable advisories for all my systems
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemAdvisories(inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): AxiosPromise<Array<ControllersSystemAdvisoriesDBLookup>> {
            return DefaultApiFp(configuration).exportSystemAdvisories(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemPackages(inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: any): AxiosPromise<Array<ControllersSystemPackageInline>> {
            return DefaultApiFp(configuration).exportSystemPackages(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options).then((request) => request(axios, basePath));
        },
        /**
         * Export systems for my account
         * @summary Export systems for my account
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesUpdatable] Filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystems(search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, options?: any): AxiosPromise<Array<ControllersSystemInlineItem>> {
            return DefaultApiFp(configuration).exportSystems(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me metadata of selected package
         * @summary Show me metadata of selected package
         * @param {string} packageName package_name - latest, nevra - exact version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        latestPackage(packageName: string, options?: any): AxiosPromise<ControllersPackageDetailResponse> {
            return DefaultApiFp(configuration).latestPackage(packageName, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisories(limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersAdvisoriesResponse> {
            return DefaultApiFp(configuration).listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale', search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersAdvisorySystemsResponse> {
            return DefaultApiFp(configuration).listAdvisorySystems(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'systems_installed' | 'systems_updatable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsUpdatable] Filter
         * @param {string} [filterSummary] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackages(limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems_installed' | 'systems_updatable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsUpdatable?: string, filterSummary?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersPackagesResponse> {
            return DefaultApiFp(configuration).listPackages(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): AxiosPromise<ControllersSystemAdvisoriesResponse> {
            return DefaultApiFp(configuration).listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'packages_updatable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesUpdatable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystems(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'packages_updatable', search?: string, filterInsightsId?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersSystemsResponse> {
            return DefaultApiFp(configuration).listSystems(limit, offset, sort, search, filterInsightsId, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageSystems(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersPackageSystemsResponse> {
            return DefaultApiFp(configuration).packageSystems(packageName, limit, offset, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all package versions installed on some system
         * @summary Show me all package versions installed on some system
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageVersions(packageName: string, limit?: number, offset?: number, options?: any): AxiosPromise<ControllersPackageVersionsResponse> {
            return DefaultApiFp(configuration).packageVersions(packageName, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPackages(inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: any): AxiosPromise<ControllersSystemPackageResponse> {
            return DefaultApiFp(configuration).systemPackages(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options).then((request) => request(axios, basePath));
        },
        /**
         * View advisory-system pairs for selected systems and advisories
         * @summary View advisory-system pairs for selected systems and advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAdvisoriesSystems(body: ControllersSystemsAdvisoriesRequest, options?: any): AxiosPromise<ControllersAdvisoriesSystemsResponse> {
            return DefaultApiFp(configuration).viewAdvisoriesSystems(body, options).then((request) => request(axios, basePath));
        },
        /**
         * View system-advisory pairs for selected systems and advisories
         * @summary View system-advisory pairs for selected systems and advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSystemsAdvisories(body: ControllersSystemsAdvisoriesRequest, options?: any): AxiosPromise<ControllersSystemsAdvisoriesResponse> {
            return DefaultApiFp(configuration).viewSystemsAdvisories(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Delete system by inventory id
     * @summary Delete system by inventory id
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletesystem(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).deletesystem(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me details an advisory by given advisory name
     * @summary Show me details an advisory by given advisory name
     * @param {string} advisoryId Advisory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detailAdvisory(advisoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).detailAdvisory(advisoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me details about a system by given inventory id
     * @summary Show me details about a system by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detailSystem(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).detailSystem(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export applicable advisories for all my systems
     * @summary Export applicable advisories for all my systems
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {string} [filterApplicableSystems] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any) {
        return DefaultApiFp(this.configuration).exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export systems for my account
     * @summary Export systems for my account
     * @param {string} advisoryId Advisory ID
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterPackagesInstalled] Filter
     * @param {string} [filterPackagesUpdatable] Filter
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {string} [filterOsname] Filter
     * @param {string} [filterOsminor] Filter
     * @param {string} [filterOsmajor] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportAdvisorySystems(advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).exportAdvisorySystems(advisoryId, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all my systems which have a package installed
     * @summary Show me all my systems which have a package installed
     * @param {string} packageName Package name
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportPackageSystems(packageName: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).exportPackageSystems(packageName, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all installed packages across my systems
     * @summary Show me all installed packages across my systems
     * @param {'id' | 'name' | 'systems_installed' | 'systems_updatable'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterSystemsInstalled] Filter
     * @param {string} [filterSystemsUpdatable] Filter
     * @param {string} [filterSummary] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportPackages(sort?: 'id' | 'name' | 'systems_installed' | 'systems_updatable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsUpdatable?: string, filterSummary?: string, options?: any) {
        return DefaultApiFp(this.configuration).exportPackages(sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export applicable advisories for all my systems
     * @summary Export applicable advisories for all my systems
     * @param {string} inventoryId Inventory ID
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportSystemAdvisories(inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any) {
        return DefaultApiFp(this.configuration).exportSystemAdvisories(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me details about a system packages by given inventory id
     * @summary Show me details about a system packages by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterEvra] Filter
     * @param {string} [filterSummary] Filter
     * @param {boolean} [filterUpdatable] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportSystemPackages(inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).exportSystemPackages(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export systems for my account
     * @summary Export systems for my account
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterPackagesInstalled] Filter
     * @param {string} [filterPackagesUpdatable] Filter
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {string} [filterOsname] Filter
     * @param {string} [filterOsminor] Filter
     * @param {string} [filterOsmajor] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportSystems(search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).exportSystems(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me metadata of selected package
     * @summary Show me metadata of selected package
     * @param {string} packageName package_name - latest, nevra - exact version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public latestPackage(packageName: string, options?: any) {
        return DefaultApiFp(this.configuration).latestPackage(packageName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all applicable advisories for all my systems
     * @summary Show me all applicable advisories for all my systems
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {string} [filterApplicableSystems] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdvisories(limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me systems on which the given advisory is applicable
     * @summary Show me systems on which the given advisory is applicable
     * @param {string} advisoryId Advisory ID
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterInsightsId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterStaleTimestamp] Filter
     * @param {string} [filterStaleWarningTimestamp] Filter
     * @param {string} [filterCulledTimestamp] Filter
     * @param {string} [filterCreated] Filter
     * @param {string} [filterOsname] Filter
     * @param {string} [filterOsminor] Filter
     * @param {string} [filterOsmajor] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {Array<string>} [tags] Tag filter
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale', search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listAdvisorySystems(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all installed packages across my systems
     * @summary Show me all installed packages across my systems
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'name' | 'systems_installed' | 'systems_updatable'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterSystemsInstalled] Filter
     * @param {string} [filterSystemsUpdatable] Filter
     * @param {string} [filterSummary] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPackages(limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems_installed' | 'systems_updatable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsUpdatable?: string, filterSummary?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listPackages(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsUpdatable, filterSummary, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me advisories for a system by given inventory id
     * @summary Show me advisories for a system by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any) {
        return DefaultApiFp(this.configuration).listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all my systems
     * @summary Show me all my systems
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'packages_updatable'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterInsightsId] Filter
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterPackagesInstalled] Filter
     * @param {string} [filterPackagesUpdatable] Filter
     * @param {string} [filterStaleTimestamp] Filter
     * @param {string} [filterStaleWarningTimestamp] Filter
     * @param {string} [filterCulledTimestamp] Filter
     * @param {string} [filterCreated] Filter
     * @param {string} [filterOsname] Filter
     * @param {string} [filterOsminor] Filter
     * @param {string} [filterOsmajor] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {Array<string>} [tags] Tag filter
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSystems(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'packages_updatable', search?: string, filterInsightsId?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesUpdatable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listSystems(limit, offset, sort, search, filterInsightsId, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterStale, filterPackagesInstalled, filterPackagesUpdatable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all my systems which have a package installed
     * @summary Show me all my systems which have a package installed
     * @param {string} packageName Package name
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {Array<string>} [tags] Tag filter
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSidsIn] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public packageSystems(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSidsIn?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).packageSystems(packageName, limit, offset, tags, filterSystemProfileSapSystem, filterSystemProfileSapSidsIn, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all package versions installed on some system
     * @summary Show me all package versions installed on some system
     * @param {string} packageName Package name
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public packageVersions(packageName: string, limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).packageVersions(packageName, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me details about a system packages by given inventory id
     * @summary Show me details about a system packages by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterEvra] Filter
     * @param {string} [filterSummary] Filter
     * @param {boolean} [filterUpdatable] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public systemPackages(inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).systemPackages(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * View advisory-system pairs for selected systems and advisories
     * @summary View advisory-system pairs for selected systems and advisories
     * @param {ControllersSystemsAdvisoriesRequest} body Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewAdvisoriesSystems(body: ControllersSystemsAdvisoriesRequest, options?: any) {
        return DefaultApiFp(this.configuration).viewAdvisoriesSystems(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * View system-advisory pairs for selected systems and advisories
     * @summary View system-advisory pairs for selected systems and advisories
     * @param {ControllersSystemsAdvisoriesRequest} body Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewSystemsAdvisories(body: ControllersSystemsAdvisoriesRequest, options?: any) {
        return DefaultApiFp(this.configuration).viewSystemsAdvisories(body, options).then((request) => request(this.axios, this.basePath));
    }

}


