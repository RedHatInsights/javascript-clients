// tslint:disable
/**
 * Patchman-engine API
 * Description here
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ControllersAdvisoriesResponse
 */
export interface ControllersAdvisoriesResponse {
    /**
     *
     * @type {Array<ControllersAdvisoryItem>}
     * @memberof ControllersAdvisoriesResponse
     */
    data?: Array<ControllersAdvisoryItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersAdvisoriesResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersAdvisoriesResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailAttributes
 */
export interface ControllersAdvisoryDetailAttributes {
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    cves?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    fixes?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    modified_date?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    public_date?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    references?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    solution?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    synopsis?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    topic?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailItem
 */
export interface ControllersAdvisoryDetailItem {
    /**
     *
     * @type {ControllersAdvisoryDetailAttributes}
     * @memberof ControllersAdvisoryDetailItem
     */
    attributes?: ControllersAdvisoryDetailAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailResponse
 */
export interface ControllersAdvisoryDetailResponse {
    /**
     *
     * @type {ControllersAdvisoryDetailItem}
     * @memberof ControllersAdvisoryDetailResponse
     */
    data?: ControllersAdvisoryDetailItem;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryInlineItem
 */
export interface ControllersAdvisoryInlineItem {
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryInlineItem
     */
    advisory_type?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryInlineItem
     */
    applicable_systems?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryInlineItem
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryInlineItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryInlineItem
     */
    public_date?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryInlineItem
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryInlineItem
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryItem
 */
export interface ControllersAdvisoryItem {
    /**
     *
     * @type {ControllersAdvisoryItemAttributes}
     * @memberof ControllersAdvisoryItem
     */
    attributes?: ControllersAdvisoryItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryItemAttributes
 */
export interface ControllersAdvisoryItemAttributes {
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    advisory_type?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    applicable_systems?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    public_date?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisorySystemsResponse
 */
export interface ControllersAdvisorySystemsResponse {
    /**
     *
     * @type {Array<ControllersSystemItem>}
     * @memberof ControllersAdvisorySystemsResponse
     */
    data?: Array<ControllersSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersAdvisorySystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersAdvisorySystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersFilterData
 */
export interface ControllersFilterData {
    /**
     *
     * @type {string}
     * @memberof ControllersFilterData
     */
    op?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersFilterData
     */
    values?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersLinks
 */
export interface ControllersLinks {
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    first?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    last?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    next?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    previous?: string;
}
/**
 *
 * @export
 * @interface ControllersListMeta
 */
export interface ControllersListMeta {
    /**
     *
     * @type {{ [key: string]: ControllersFilterData; }}
     * @memberof ControllersListMeta
     */
    filter?: { [key: string]: ControllersFilterData; };
    /**
     *
     * @type {number}
     * @memberof ControllersListMeta
     */
    limit?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersListMeta
     */
    offset?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersListMeta
     */
    sort?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersListMeta
     */
    total_items?: number;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoriesResponse
 */
export interface ControllersSystemAdvisoriesResponse {
    /**
     * advisories items
     * @type {Array<ControllersSystemAdvisoryItem>}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    data?: Array<ControllersSystemAdvisoryItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoryItem
 */
export interface ControllersSystemAdvisoryItem {
    /**
     *
     * @type {ControllersSystemAdvisoryItemAttributes}
     * @memberof ControllersSystemAdvisoryItem
     */
    attributes?: ControllersSystemAdvisoryItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoryItemAttributes
 */
export interface ControllersSystemAdvisoryItemAttributes {
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    advisory_type?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    public_date?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemDetailResponse
 */
export interface ControllersSystemDetailResponse {
    /**
     *
     * @type {ControllersSystemItem}
     * @memberof ControllersSystemDetailResponse
     */
    data?: ControllersSystemItem;
}
/**
 *
 * @export
 * @interface ControllersSystemInlineItem
 */
export interface ControllersSystemInlineItem {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    display_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    last_evaluation?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemInlineItem
     */
    last_upload?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemInlineItem
     */
    rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemInlineItem
     */
    rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemInlineItem
     */
    rhsa_count?: number;
    /**
     * Not used Enabled        bool       `json:\"enabled\" csv:\"enabled\" query:\"(NOT system_platform.opt_out)\"`
     * @type {boolean}
     * @memberof ControllersSystemInlineItem
     */
    stale?: boolean;
}
/**
 *
 * @export
 * @interface ControllersSystemItem
 */
export interface ControllersSystemItem {
    /**
     *
     * @type {ControllersSystemItemAttributes}
     * @memberof ControllersSystemItem
     */
    attributes?: ControllersSystemItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemItemAttributes
 */
export interface ControllersSystemItemAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    display_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    last_evaluation?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    last_upload?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    rhsa_count?: number;
    /**
     * Not used Enabled        bool       `json:\"enabled\" csv:\"enabled\" query:\"(NOT system_platform.opt_out)\"`
     * @type {boolean}
     * @memberof ControllersSystemItemAttributes
     */
    stale?: boolean;
}
/**
 *
 * @export
 * @interface ControllersSystemsResponse
 */
export interface ControllersSystemsResponse {
    /**
     *
     * @type {Array<ControllersSystemItem>}
     * @memberof ControllersSystemsResponse
     */
    data?: Array<ControllersSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemsResponse
     */
    meta?: ControllersListMeta;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletesystem(inventoryId: string, options: any = {}): RequestArgs {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling deletesystem.');
            }
            const localVarPath = `/api/patch/v1/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-rh-identity")
                    : configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAdvisory(advisoryId: string, options: any = {}): RequestArgs {
            // verify required parameter 'advisoryId' is not null or undefined
            if (advisoryId === null || advisoryId === undefined) {
                throw new RequiredError('advisoryId','Required parameter advisoryId was null or undefined when calling detailAdvisory.');
            }
            const localVarPath = `/api/patch/v1/advisories/{advisory_id}`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-rh-identity")
                    : configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailSystem(inventoryId: string, options: any = {}): RequestArgs {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling detailSystem.');
            }
            const localVarPath = `/api/patch/v1/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-rh-identity")
                    : configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export applicable advisories for all my systems
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, filterApplicableSystems?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/patch/v1/export/advisories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-rh-identity")
                    : configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }

            if (filterApplicableSystems !== undefined) {
                localVarQueryParameter['filter[applicable_systems]'] = filterApplicableSystems;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export systems for my account
         * @summary Export systems for my account
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterEnabled] Filter
         * @param {string} [filterStale] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystems(filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterEnabled?: string, filterStale?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/patch/v1/export/systems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-rh-identity")
                    : configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterEnabled !== undefined) {
                localVarQueryParameter['filter[enabled]'] = filterEnabled;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisories(limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, filterApplicableSystems?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/patch/v1/advisories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-rh-identity")
                    : configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }

            if (filterApplicableSystems !== undefined) {
                localVarQueryParameter['filter[applicable_systems]'] = filterApplicableSystems;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale'} [sort] Sort field
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterStale] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale', filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterStale?: string, options: any = {}): RequestArgs {
            // verify required parameter 'advisoryId' is not null or undefined
            if (advisoryId === null || advisoryId === undefined) {
                throw new RequiredError('advisoryId','Required parameter advisoryId was null or undefined when calling listAdvisorySystems.');
            }
            const localVarPath = `/api/patch/v1/advisories/{advisory_id}/systems`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-rh-identity")
                    : configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, options: any = {}): RequestArgs {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling listSystemAdvisories.');
            }
            const localVarPath = `/api/patch/v1/systems/{inventory_id}/advisories`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-rh-identity")
                    : configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale'} [sort] Sort field
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterStale] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystems(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale', filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterStale?: string, options: any = {}): RequestArgs {
            const localVarPath = `/api/patch/v1/systems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("x-rh-identity")
                    : configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletesystem(inventoryId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deletesystem(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAdvisory(advisoryId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoryDetailResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).detailAdvisory(advisoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailSystem(inventoryId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemDetailResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).detailSystem(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export applicable advisories for all my systems
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersAdvisoryInlineItem>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export systems for my account
         * @summary Export systems for my account
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterEnabled] Filter
         * @param {string} [filterStale] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystems(filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterEnabled?: string, filterStale?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemInlineItem>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).exportSystems(filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterEnabled, filterStale, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisories(limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoriesResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale'} [sort] Sort field
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterStale] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale', filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterStale?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisorySystemsResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listAdvisorySystems(advisoryId, limit, offset, sort, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterStale, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemAdvisoriesResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale'} [sort] Sort field
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterStale] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystems(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale', filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterStale?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemsResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSystems(limit, offset, sort, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterStale, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletesystem(inventoryId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deletesystem(inventoryId, options)(axios, basePath);
        },
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAdvisory(advisoryId: string, options?: any): AxiosPromise<ControllersAdvisoryDetailResponse> {
            return DefaultApiFp(configuration).detailAdvisory(advisoryId, options)(axios, basePath);
        },
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailSystem(inventoryId: string, options?: any): AxiosPromise<ControllersSystemDetailResponse> {
            return DefaultApiFp(configuration).detailSystem(inventoryId, options)(axios, basePath);
        },
        /**
         * Export applicable advisories for all my systems
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any): AxiosPromise<Array<ControllersAdvisoryInlineItem>> {
            return DefaultApiFp(configuration).exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, options)(axios, basePath);
        },
        /**
         * Export systems for my account
         * @summary Export systems for my account
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterEnabled] Filter
         * @param {string} [filterStale] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystems(filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterEnabled?: string, filterStale?: string, options?: any): AxiosPromise<Array<ControllersSystemInlineItem>> {
            return DefaultApiFp(configuration).exportSystems(filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterEnabled, filterStale, options)(axios, basePath);
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisories(limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any): AxiosPromise<ControllersAdvisoriesResponse> {
            return DefaultApiFp(configuration).listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, options)(axios, basePath);
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale'} [sort] Sort field
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterStale] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale', filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterStale?: string, options?: any): AxiosPromise<ControllersAdvisorySystemsResponse> {
            return DefaultApiFp(configuration).listAdvisorySystems(advisoryId, limit, offset, sort, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterStale, options)(axios, basePath);
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, options?: any): AxiosPromise<ControllersSystemAdvisoriesResponse> {
            return DefaultApiFp(configuration).listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, options)(axios, basePath);
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging, set -1 to return all
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale'} [sort] Sort field
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterStale] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystems(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale', filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterStale?: string, options?: any): AxiosPromise<ControllersSystemsResponse> {
            return DefaultApiFp(configuration).listSystems(limit, offset, sort, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterStale, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Delete system by inventory id
     * @summary Delete system by inventory id
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletesystem(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).deletesystem(inventoryId, options)(this.axios, this.basePath);
    }

    /**
     * Show me details an advisory by given advisory name
     * @summary Show me details an advisory by given advisory name
     * @param {string} advisoryId Advisory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detailAdvisory(advisoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).detailAdvisory(advisoryId, options)(this.axios, this.basePath);
    }

    /**
     * Show me details about a system by given inventory id
     * @summary Show me details about a system by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detailSystem(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).detailSystem(inventoryId, options)(this.axios, this.basePath);
    }

    /**
     * Export applicable advisories for all my systems
     * @summary Export applicable advisories for all my systems
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterSeverity] Filter
     * @param {string} [filterApplicableSystems] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any) {
        return DefaultApiFp(this.configuration).exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, options)(this.axios, this.basePath);
    }

    /**
     * Export systems for my account
     * @summary Export systems for my account
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterEnabled] Filter
     * @param {string} [filterStale] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportSystems(filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterEnabled?: string, filterStale?: string, options?: any) {
        return DefaultApiFp(this.configuration).exportSystems(filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterEnabled, filterStale, options)(this.axios, this.basePath);
    }

    /**
     * Show me all applicable advisories for all my systems
     * @summary Show me all applicable advisories for all my systems
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterSeverity] Filter
     * @param {string} [filterApplicableSystems] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdvisories(limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any) {
        return DefaultApiFp(this.configuration).listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, filterApplicableSystems, options)(this.axios, this.basePath);
    }

    /**
     * Show me systems on which the given advisory is applicable
     * @summary Show me systems on which the given advisory is applicable
     * @param {string} advisoryId Advisory ID
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale'} [sort] Sort field
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterStale] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale', filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterStale?: string, options?: any) {
        return DefaultApiFp(this.configuration).listAdvisorySystems(advisoryId, limit, offset, sort, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterStale, options)(this.axios, this.basePath);
    }

    /**
     * Show me advisories for a system by given inventory id
     * @summary Show me advisories for a system by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterSeverity] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterSeverity?: string, options?: any) {
        return DefaultApiFp(this.configuration).listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterSeverity, options)(this.axios, this.basePath);
    }

    /**
     * Show me all my systems
     * @summary Show me all my systems
     * @param {number} [limit] Limit for paging, set -1 to return all
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale'} [sort] Sort field
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterStale] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSystems(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'stale', filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterStale?: string, options?: any) {
        return DefaultApiFp(this.configuration).listSystems(limit, offset, sort, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterStale, options)(this.axios, this.basePath);
    }

}


