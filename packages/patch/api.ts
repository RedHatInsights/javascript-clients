// tslint:disable
/**
 * Patchman-engine API
 * API of the Patch application on [console.redhat.com](https://console.redhat.com)  Syntax of the `filter[name]` query parameters is described in  [Filters documentation](https://github.com/RedHatInsights/patchman-engine/wiki/API-custom-filters)
 *
 * The version of the OpenAPI document: v3.6.94
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ControllersAdvisoriesDBLookup
 */
export interface ControllersAdvisoriesDBLookup {
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersAdvisoriesDBLookup
     */
    advisory_type_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoriesDBLookup
     */
    applicable_systems?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoriesDBLookup
     */
    cve_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoriesDBLookup
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoriesDBLookup
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoriesDBLookup
     */
    installable_systems?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoriesDBLookup
     */
    public_date?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisoriesDBLookup
     */
    reboot_required?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoriesDBLookup
     */
    release_versions?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoriesDBLookup
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoriesDBLookup
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoriesResponse
 */
export interface ControllersAdvisoriesResponse {
    /**
     *
     * @type {Array<ControllersAdvisoryItem>}
     * @memberof ControllersAdvisoriesResponse
     */
    data?: Array<ControllersAdvisoryItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersAdvisoriesResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersAdvisoriesResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersAdvisoriesSystemsResponse
 */
export interface ControllersAdvisoriesSystemsResponse {
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ControllersAdvisoriesSystemsResponse
     */
    data?: { [key: string]: Array<string>; };
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersAdvisoriesSystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersAdvisoriesSystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailAttributes
 */
export interface ControllersAdvisoryDetailAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    advisory_type_name?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    cves?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    fixes?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    modified_date?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    packages?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    public_date?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    reboot_required?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    references?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    release_versions?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    solution?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    synopsis?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailAttributes
     */
    topic?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailItem
 */
export interface ControllersAdvisoryDetailItem {
    /**
     *
     * @type {ControllersAdvisoryDetailAttributes}
     * @memberof ControllersAdvisoryDetailItem
     */
    attributes?: ControllersAdvisoryDetailAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryDetailItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryDetailResponse
 */
export interface ControllersAdvisoryDetailResponse {
    /**
     *
     * @type {ControllersAdvisoryDetailItem}
     * @memberof ControllersAdvisoryDetailResponse
     */
    data?: ControllersAdvisoryDetailItem;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryItem
 */
export interface ControllersAdvisoryItem {
    /**
     *
     * @type {ControllersAdvisoryItemAttributes}
     * @memberof ControllersAdvisoryItem
     */
    attributes?: ControllersAdvisoryItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisoryItemAttributes
 */
export interface ControllersAdvisoryItemAttributes {
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    advisory_type_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    applicable_systems?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    cve_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    description?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    installable_systems?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    public_date?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisoryItemAttributes
     */
    reboot_required?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersAdvisoryItemAttributes
     */
    release_versions?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisoryItemAttributes
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisoryItemAttributes
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisorySystemDBLookup
 */
export interface ControllersAdvisorySystemDBLookup {
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    baseline_id?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    baseline_name?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    built_pkgcache?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    created?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    culled_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    display_name?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    groups?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    rhsm?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    satellite_managed?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    stale?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    stale_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    stale_warning_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    status?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    tags?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    template_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemDBLookup
     */
    template_uuid?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisorySystemItem
 */
export interface ControllersAdvisorySystemItem {
    /**
     *
     * @type {ControllersAdvisorySystemItemAttributes}
     * @memberof ControllersAdvisorySystemItem
     */
    attributes?: ControllersAdvisorySystemItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisorySystemItemAttributes
 */
export interface ControllersAdvisorySystemItemAttributes {
    /**
     *
     * @type {number}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    baseline_id?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    baseline_name?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    built_pkgcache?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    created?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    culled_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    display_name?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    groups?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    rhsm?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    satellite_managed?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    stale?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    stale_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    stale_warning_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    status?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    tags?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    template_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersAdvisorySystemItemAttributes
     */
    template_uuid?: string;
}
/**
 *
 * @export
 * @interface ControllersAdvisorySystemsResponse
 */
export interface ControllersAdvisorySystemsResponse {
    /**
     *
     * @type {Array<ControllersAdvisorySystemItem>}
     * @memberof ControllersAdvisorySystemsResponse
     */
    data?: Array<ControllersAdvisorySystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersAdvisorySystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersAdvisorySystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersBaselineConfig
 */
export interface ControllersBaselineConfig {
    /**
     * Filter applicable advisories (updates) by the latest publish time.
     * @type {string}
     * @memberof ControllersBaselineConfig
     */
    to_time?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineDetailAttributes
 */
export interface ControllersBaselineDetailAttributes {
    /**
     * Baseline config
     * @type {ControllersBaselineConfig}
     * @memberof ControllersBaselineDetailAttributes
     */
    config?: ControllersBaselineConfig;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    creator?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    last_edited?: string;
    /**
     * Baseline name
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineDetailAttributes
     */
    published?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineDetailItem
 */
export interface ControllersBaselineDetailItem {
    /**
     * Additional baseline attributes
     * @type {ControllersBaselineDetailAttributes}
     * @memberof ControllersBaselineDetailItem
     */
    attributes?: ControllersBaselineDetailAttributes;
    /**
     * Baseline ID
     * @type {number}
     * @memberof ControllersBaselineDetailItem
     */
    id?: number;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersBaselineDetailItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineDetailResponse
 */
export interface ControllersBaselineDetailResponse {
    /**
     *
     * @type {ControllersBaselineDetailItem}
     * @memberof ControllersBaselineDetailResponse
     */
    data?: ControllersBaselineDetailItem;
}
/**
 *
 * @export
 * @interface ControllersBaselineItem
 */
export interface ControllersBaselineItem {
    /**
     * Additional baseline attributes
     * @type {ControllersBaselineItemAttributes}
     * @memberof ControllersBaselineItem
     */
    attributes?: ControllersBaselineItemAttributes;
    /**
     * Unique baseline id
     * @type {number}
     * @memberof ControllersBaselineItem
     */
    id?: number;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersBaselineItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineItemAttributes
 */
export interface ControllersBaselineItemAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineItemAttributes
     */
    creator?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineItemAttributes
     */
    last_edited?: string;
    /**
     * Baseline name
     * @type {string}
     * @memberof ControllersBaselineItemAttributes
     */
    name?: string;
    /**
     * Created and updated dates
     * @type {string}
     * @memberof ControllersBaselineItemAttributes
     */
    published?: string;
    /**
     * Count of the systems associated with the baseline
     * @type {number}
     * @memberof ControllersBaselineItemAttributes
     */
    systems?: number;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemAttributes
 */
export interface ControllersBaselineSystemAttributes {
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    applicable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    applicable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    applicable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    applicable_rhsa_count?: number;
    /**
     * Baseline system display name
     * @type {string}
     * @memberof ControllersBaselineSystemAttributes
     */
    display_name?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersBaselineSystemAttributes
     */
    groups?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    installable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    installable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    installable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemAttributes
     */
    installable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemAttributes
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemAttributes
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemAttributes
     */
    rhsm?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersBaselineSystemAttributes
     */
    tags?: Array<ControllersSystemTag>;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemItem
 */
export interface ControllersBaselineSystemItem {
    /**
     * Additional baseline system attributes
     * @type {ControllersBaselineSystemAttributes}
     * @memberof ControllersBaselineSystemItem
     */
    attributes?: ControllersBaselineSystemAttributes;
    /**
     * Baseline system inventory ID (uuid format)
     * @type {string}
     * @memberof ControllersBaselineSystemItem
     */
    inventory_id?: string;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersBaselineSystemItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemsDBLookup
 */
export interface ControllersBaselineSystemsDBLookup {
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    applicable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    applicable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    applicable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    applicable_rhsa_count?: number;
    /**
     * Baseline system display name
     * @type {string}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    display_name?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    groups?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    installable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    installable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    installable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    installable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    rhsm?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersBaselineSystemsDBLookup
     */
    tags?: Array<ControllersSystemTag>;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemsRemoveRequest
 */
export interface ControllersBaselineSystemsRemoveRequest {
    /**
     * List of inventory IDs to have baselines removed
     * @type {Array<string>}
     * @memberof ControllersBaselineSystemsRemoveRequest
     */
    inventory_ids?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersBaselineSystemsResponse
 */
export interface ControllersBaselineSystemsResponse {
    /**
     *
     * @type {Array<ControllersBaselineSystemItem>}
     * @memberof ControllersBaselineSystemsResponse
     */
    data?: Array<ControllersBaselineSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersBaselineSystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersBaselineSystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersBaselinesMeta
 */
export interface ControllersBaselinesMeta {
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersBaselinesMeta
     */
    creators?: Array<string>;
    /**
     * Used filters
     * @type {{ [key: string]: ControllersFilterData; }}
     * @memberof ControllersBaselinesMeta
     */
    filter?: { [key: string]: ControllersFilterData; };
    /**
     * Show whether customer has some registered systems
     * @type {boolean}
     * @memberof ControllersBaselinesMeta
     */
    has_systems?: boolean;
    /**
     * Used response limit (page size) - pagination
     * @type {number}
     * @memberof ControllersBaselinesMeta
     */
    limit?: number;
    /**
     * Used response offset - pagination
     * @type {number}
     * @memberof ControllersBaselinesMeta
     */
    offset?: number;
    /**
     * Used search terms
     * @type {string}
     * @memberof ControllersBaselinesMeta
     */
    search?: string;
    /**
     * Used sorting fields
     * @type {Array<string>}
     * @memberof ControllersBaselinesMeta
     */
    sort?: Array<string>;
    /**
     * Some subtotals used by some endpoints
     * @type {{ [key: string]: number; }}
     * @memberof ControllersBaselinesMeta
     */
    subtotals?: { [key: string]: number; };
    /**
     * Total items count to return
     * @type {number}
     * @memberof ControllersBaselinesMeta
     */
    total_items?: number;
}
/**
 *
 * @export
 * @interface ControllersBaselinesResponse
 */
export interface ControllersBaselinesResponse {
    /**
     * Baseline items
     * @type {Array<ControllersBaselineItem>}
     * @memberof ControllersBaselinesResponse
     */
    data?: Array<ControllersBaselineItem>;
    /**
     * Pagination links
     * @type {ControllersLinks}
     * @memberof ControllersBaselinesResponse
     */
    links?: ControllersLinks;
    /**
     * Generic response fields (pagination params, filters etc.)
     * @type {ControllersBaselinesMeta}
     * @memberof ControllersBaselinesResponse
     */
    meta?: ControllersBaselinesMeta;
}
/**
 *
 * @export
 * @interface ControllersCreateBaselineRequest
 */
export interface ControllersCreateBaselineRequest {
    /**
     * Baseline config to filter applicable advisories and package updates for the associated systems (optional).
     * @type {ControllersBaselineConfig}
     * @memberof ControllersCreateBaselineRequest
     */
    config?: ControllersBaselineConfig;
    /**
     * Description of the baseline (optional).
     * @type {string}
     * @memberof ControllersCreateBaselineRequest
     */
    description?: string;
    /**
     * Inventory IDs list of systems to associate with this baseline (optional).
     * @type {Array<string>}
     * @memberof ControllersCreateBaselineRequest
     */
    inventory_ids?: Array<string>;
    /**
     * Baseline name
     * @type {string}
     * @memberof ControllersCreateBaselineRequest
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ControllersCreateBaselineResponse
 */
export interface ControllersCreateBaselineResponse {
    /**
     * Updated baseline unique ID, it can not be changed
     * @type {number}
     * @memberof ControllersCreateBaselineResponse
     */
    baseline_id?: number;
}
/**
 *
 * @export
 * @interface ControllersDeleteBaselineResponse
 */
export interface ControllersDeleteBaselineResponse {
    /**
     * Updated baseline unique ID, it can not be changed
     * @type {number}
     * @memberof ControllersDeleteBaselineResponse
     */
    baseline_id?: number;
}
/**
 *
 * @export
 * @interface ControllersFilterData
 */
export interface ControllersFilterData {
    /**
     *
     * @type {string}
     * @memberof ControllersFilterData
     */
    op?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersFilterData
     */
    values?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersIDPlain
 */
export interface ControllersIDPlain {
    /**
     *
     * @type {string}
     * @memberof ControllersIDPlain
     */
    id?: string;
}
/**
 *
 * @export
 * @interface ControllersIDSatelliteManaged
 */
export interface ControllersIDSatelliteManaged {
    /**
     *
     * @type {string}
     * @memberof ControllersIDSatelliteManaged
     */
    id?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersIDSatelliteManaged
     */
    satellite_managed?: boolean;
}
/**
 *
 * @export
 * @interface ControllersIDStatus
 */
export interface ControllersIDStatus {
    /**
     *
     * @type {string}
     * @memberof ControllersIDStatus
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersIDStatus
     */
    status?: string;
}
/**
 *
 * @export
 * @interface ControllersIDsPlainResponse
 */
export interface ControllersIDsPlainResponse {
    /**
     *
     * @type {Array<ControllersIDPlain>}
     * @memberof ControllersIDsPlainResponse
     */
    data?: Array<ControllersIDPlain>;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersIDsPlainResponse
     */
    ids?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersIDsSatelliteManagedResponse
 */
export interface ControllersIDsSatelliteManagedResponse {
    /**
     *
     * @type {Array<ControllersIDSatelliteManaged>}
     * @memberof ControllersIDsSatelliteManagedResponse
     */
    data?: Array<ControllersIDSatelliteManaged>;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersIDsSatelliteManagedResponse
     */
    ids?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersIDsStatusResponse
 */
export interface ControllersIDsStatusResponse {
    /**
     *
     * @type {Array<ControllersIDStatus>}
     * @memberof ControllersIDsStatusResponse
     */
    data?: Array<ControllersIDStatus>;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersIDsStatusResponse
     */
    ids?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersLinks
 */
export interface ControllersLinks {
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    first?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    last?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    next?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersLinks
     */
    previous?: string;
}
/**
 *
 * @export
 * @interface ControllersListMeta
 */
export interface ControllersListMeta {
    /**
     * Used filters
     * @type {{ [key: string]: ControllersFilterData; }}
     * @memberof ControllersListMeta
     */
    filter?: { [key: string]: ControllersFilterData; };
    /**
     * Show whether customer has some registered systems
     * @type {boolean}
     * @memberof ControllersListMeta
     */
    has_systems?: boolean;
    /**
     * Used response limit (page size) - pagination
     * @type {number}
     * @memberof ControllersListMeta
     */
    limit?: number;
    /**
     * Used response offset - pagination
     * @type {number}
     * @memberof ControllersListMeta
     */
    offset?: number;
    /**
     * Used search terms
     * @type {string}
     * @memberof ControllersListMeta
     */
    search?: string;
    /**
     * Used sorting fields
     * @type {Array<string>}
     * @memberof ControllersListMeta
     */
    sort?: Array<string>;
    /**
     * Some subtotals used by some endpoints
     * @type {{ [key: string]: number; }}
     * @memberof ControllersListMeta
     */
    subtotals?: { [key: string]: number; };
    /**
     * Total items count to return
     * @type {number}
     * @memberof ControllersListMeta
     */
    total_items?: number;
}
/**
 *
 * @export
 * @interface ControllersPackageDetailAttributes
 */
export interface ControllersPackageDetailAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    advisory_id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    summary?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailAttributes
     */
    version?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageDetailItem
 */
export interface ControllersPackageDetailItem {
    /**
     *
     * @type {ControllersPackageDetailAttributes}
     * @memberof ControllersPackageDetailItem
     */
    attributes?: ControllersPackageDetailAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageDetailItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageDetailResponse
 */
export interface ControllersPackageDetailResponse {
    /**
     *
     * @type {ControllersPackageDetailItem}
     * @memberof ControllersPackageDetailResponse
     */
    data?: ControllersPackageDetailItem;
}
/**
 *
 * @export
 * @interface ControllersPackageItem
 */
export interface ControllersPackageItem {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageItem
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageItem
     */
    summary?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersPackageItem
     */
    systems_applicable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersPackageItem
     */
    systems_installable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersPackageItem
     */
    systems_installed?: number;
}
/**
 *
 * @export
 * @interface ControllersPackageSystemItem
 */
export interface ControllersPackageSystemItem {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    available_evra?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersPackageSystemItem
     */
    baseline_id?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    baseline_name?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersPackageSystemItem
     */
    baseline_uptodate?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    display_name?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersPackageSystemItem
     */
    groups?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    installed_evra?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    rhsm?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersPackageSystemItem
     */
    satellite_managed?: boolean;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersPackageSystemItem
     */
    tags?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    template_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    template_uuid?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersPackageSystemItem
     */
    updatable?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersPackageSystemItem
     */
    update_status?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageSystemsResponse
 */
export interface ControllersPackageSystemsResponse {
    /**
     *
     * @type {Array<ControllersPackageSystemItem>}
     * @memberof ControllersPackageSystemsResponse
     */
    data?: Array<ControllersPackageSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersPackageSystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersPackageSystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersPackageVersionItem
 */
export interface ControllersPackageVersionItem {
    /**
     *
     * @type {string}
     * @memberof ControllersPackageVersionItem
     */
    evra?: string;
}
/**
 *
 * @export
 * @interface ControllersPackageVersionsResponse
 */
export interface ControllersPackageVersionsResponse {
    /**
     *
     * @type {Array<ControllersPackageVersionItem>}
     * @memberof ControllersPackageVersionsResponse
     */
    data?: Array<ControllersPackageVersionItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersPackageVersionsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersPackageVersionsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersPackagesResponse
 */
export interface ControllersPackagesResponse {
    /**
     *
     * @type {Array<ControllersPackageItem>}
     * @memberof ControllersPackagesResponse
     */
    data?: Array<ControllersPackageItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersPackagesResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersPackagesResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoriesDBLookup
 */
export interface ControllersSystemAdvisoriesDBLookup {
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    advisory_type_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    cve_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    public_date?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    reboot_required?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    release_versions?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoriesDBLookup
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoriesResponse
 */
export interface ControllersSystemAdvisoriesResponse {
    /**
     * advisories items
     * @type {Array<ControllersSystemAdvisoryItem>}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    data?: Array<ControllersSystemAdvisoryItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemAdvisoriesResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoryItem
 */
export interface ControllersSystemAdvisoryItem {
    /**
     *
     * @type {ControllersSystemAdvisoryItemAttributes}
     * @memberof ControllersSystemAdvisoryItem
     */
    attributes?: ControllersSystemAdvisoryItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemAdvisoryItemAttributes
 */
export interface ControllersSystemAdvisoryItemAttributes {
    /**
     * Advisory type name, proper ordering ensured (unknown, unspecified, other, enhancement, bugfix, security)
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    advisory_type_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    cve_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    public_date?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    reboot_required?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    release_versions?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    severity?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    status?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemAdvisoryItemAttributes
     */
    synopsis?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemDBLookup
 */
export interface ControllersSystemDBLookup {
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    applicable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    applicable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    applicable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    applicable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    arch?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    baseline_id?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    baseline_name?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemDBLookup
     */
    built_pkgcache?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    created?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    culled_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    display_name?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersSystemDBLookup
     */
    groups?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    installable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    installable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    installable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    installable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    last_evaluation?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    os?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    packages_applicable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    packages_installable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    packages_installed?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemDBLookup
     */
    rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    rhsm?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemDBLookup
     */
    satellite_managed?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemDBLookup
     */
    stale?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    stale_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    stale_warning_timestamp?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersSystemDBLookup
     */
    tags?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    template_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemDBLookup
     */
    template_uuid?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemDetailResponse
 */
export interface ControllersSystemDetailResponse {
    /**
     *
     * @type {ControllersSystemItemExtended}
     * @memberof ControllersSystemDetailResponse
     */
    data?: ControllersSystemItemExtended;
}
/**
 *
 * @export
 * @interface ControllersSystemGroup
 */
export interface ControllersSystemGroup {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemGroup
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemGroup
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemItem
 */
export interface ControllersSystemItem {
    /**
     *
     * @type {ControllersSystemItemAttributes}
     * @memberof ControllersSystemItem
     */
    attributes?: ControllersSystemItemAttributes;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItem
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemItemAttributes
 */
export interface ControllersSystemItemAttributes {
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    applicable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    applicable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    applicable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    applicable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    arch?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    baseline_id?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    baseline_name?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributes
     */
    built_pkgcache?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    created?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    culled_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    display_name?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersSystemItemAttributes
     */
    groups?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    installable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    installable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    installable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    installable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    last_evaluation?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    os?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    packages_applicable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    packages_installable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    packages_installed?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributes
     */
    rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    rhsm?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributes
     */
    satellite_managed?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributes
     */
    stale?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    stale_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    stale_warning_timestamp?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersSystemItemAttributes
     */
    tags?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    template_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributes
     */
    template_uuid?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemItemAttributesExtended
 */
export interface ControllersSystemItemAttributesExtended {
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    applicable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    applicable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    applicable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    applicable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    arch?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    baseline_id?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    baseline_name?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributesExtended
     */
    baseline_uptodate?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributesExtended
     */
    built_pkgcache?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    created?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    culled_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    display_name?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersSystemItemAttributesExtended
     */
    groups?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    insights_id?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    installable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    installable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    installable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    installable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    last_evaluation?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    os_major?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    os_minor?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    os_name?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    packages_applicable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    packages_installable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    packages_installed?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    packages_updatable?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemItemAttributesExtended
     */
    rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    rhsm?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributesExtended
     */
    satellite_managed?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributesExtended
     */
    stale?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    stale_timestamp?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    stale_warning_timestamp?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersSystemItemAttributesExtended
     */
    tags?: Array<ControllersSystemTag>;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    template_name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemAttributesExtended
     */
    template_uuid?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemItemAttributesExtended
     */
    third_party?: boolean;
}
/**
 *
 * @export
 * @interface ControllersSystemItemExtended
 */
export interface ControllersSystemItemExtended {
    /**
     *
     * @type {ControllersSystemItemAttributesExtended}
     * @memberof ControllersSystemItemExtended
     */
    attributes?: ControllersSystemItemAttributesExtended;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemExtended
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemItemExtended
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemPackageData
 */
export interface ControllersSystemPackageData {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    evra?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    summary?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemPackageData
     */
    updatable?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageData
     */
    update_status?: string;
    /**
     *
     * @type {Array<ModelsPackageUpdate>}
     * @memberof ControllersSystemPackageData
     */
    updates?: Array<ModelsPackageUpdate>;
}
/**
 *
 * @export
 * @interface ControllersSystemPackageInline
 */
export interface ControllersSystemPackageInline {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    description?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    evra?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    latest_applicable?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    latest_installable?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    summary?: string;
    /**
     *
     * @type {boolean}
     * @memberof ControllersSystemPackageInline
     */
    updatable?: boolean;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemPackageInline
     */
    update_status?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemPackageResponse
 */
export interface ControllersSystemPackageResponse {
    /**
     *
     * @type {Array<ControllersSystemPackageData>}
     * @memberof ControllersSystemPackageResponse
     */
    data?: Array<ControllersSystemPackageData>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemPackageResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemPackageResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemTag
 */
export interface ControllersSystemTag {
    /**
     *
     * @type {string}
     * @memberof ControllersSystemTag
     */
    key?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemTag
     */
    namespace?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersSystemTag
     */
    value?: string;
}
/**
 *
 * @export
 * @interface ControllersSystemTagItem
 */
export interface ControllersSystemTagItem {
    /**
     *
     * @type {number}
     * @memberof ControllersSystemTagItem
     */
    count?: number;
    /**
     *
     * @type {ControllersSystemTag}
     * @memberof ControllersSystemTagItem
     */
    tag?: ControllersSystemTag;
}
/**
 *
 * @export
 * @interface ControllersSystemTagsResponse
 */
export interface ControllersSystemTagsResponse {
    /**
     *
     * @type {Array<ControllersSystemTagItem>}
     * @memberof ControllersSystemTagsResponse
     */
    data?: Array<ControllersSystemTagItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemTagsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemTagsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemVmaasJSONResponse
 */
export interface ControllersSystemVmaasJSONResponse {
    /**
     *
     * @type {VmaasUpdatesV3Request}
     * @memberof ControllersSystemVmaasJSONResponse
     */
    data?: VmaasUpdatesV3Request;
}
/**
 *
 * @export
 * @interface ControllersSystemYumUpdatesResponse
 */
export interface ControllersSystemYumUpdatesResponse {
    /**
     *
     * @type {VmaasUpdatesV3Response}
     * @memberof ControllersSystemYumUpdatesResponse
     */
    data?: VmaasUpdatesV3Response;
}
/**
 *
 * @export
 * @interface ControllersSystemsAdvisoriesRequest
 */
export interface ControllersSystemsAdvisoriesRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemsAdvisoriesRequest
     */
    advisories?: Array<string>;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemsAdvisoriesRequest
     */
    limit?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersSystemsAdvisoriesRequest
     */
    offset?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersSystemsAdvisoriesRequest
     */
    systems?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersSystemsAdvisoriesResponse
 */
export interface ControllersSystemsAdvisoriesResponse {
    /**
     *
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ControllersSystemsAdvisoriesResponse
     */
    data?: { [key: string]: Array<string>; };
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemsAdvisoriesResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemsAdvisoriesResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersSystemsResponse
 */
export interface ControllersSystemsResponse {
    /**
     *
     * @type {Array<ControllersSystemItem>}
     * @memberof ControllersSystemsResponse
     */
    data?: Array<ControllersSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersSystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersSystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersTemplateItem
 */
export interface ControllersTemplateItem {
    /**
     * Additional template attributes
     * @type {ControllersTemplateItemAttributes}
     * @memberof ControllersTemplateItem
     */
    attributes?: ControllersTemplateItemAttributes;
    /**
     * Unique template id
     * @type {string}
     * @memberof ControllersTemplateItem
     */
    id?: string;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersTemplateItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersTemplateItemAttributes
 */
export interface ControllersTemplateItemAttributes {
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateItemAttributes
     */
    creator?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateItemAttributes
     */
    last_edited?: string;
    /**
     * Template name
     * @type {string}
     * @memberof ControllersTemplateItemAttributes
     */
    name?: string;
    /**
     * Created and updated dates
     * @type {string}
     * @memberof ControllersTemplateItemAttributes
     */
    published?: string;
    /**
     * Count of the systems associated with the template
     * @type {number}
     * @memberof ControllersTemplateItemAttributes
     */
    systems?: number;
}
/**
 *
 * @export
 * @interface ControllersTemplateSystemAttributes
 */
export interface ControllersTemplateSystemAttributes {
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    applicable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    applicable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    applicable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    applicable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemAttributes
     */
    display_name?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersTemplateSystemAttributes
     */
    groups?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    installable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    installable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    installable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemAttributes
     */
    installable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemAttributes
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemAttributes
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemAttributes
     */
    rhsm?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersTemplateSystemAttributes
     */
    tags?: Array<ControllersSystemTag>;
}
/**
 *
 * @export
 * @interface ControllersTemplateSystemItem
 */
export interface ControllersTemplateSystemItem {
    /**
     *
     * @type {ControllersTemplateSystemAttributes}
     * @memberof ControllersTemplateSystemItem
     */
    attributes?: ControllersTemplateSystemAttributes;
    /**
     * Template system inventory ID (uuid format)
     * @type {string}
     * @memberof ControllersTemplateSystemItem
     */
    inventory_id?: string;
    /**
     * Document type name
     * @type {string}
     * @memberof ControllersTemplateSystemItem
     */
    type?: string;
}
/**
 *
 * @export
 * @interface ControllersTemplateSystemsDBLookup
 */
export interface ControllersTemplateSystemsDBLookup {
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    applicable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    applicable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    applicable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    applicable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    display_name?: string;
    /**
     *
     * @type {Array<ControllersSystemGroup>}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    groups?: Array<ControllersSystemGroup>;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    id?: string;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    installable_other_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    installable_rhba_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    installable_rhea_count?: number;
    /**
     *
     * @type {number}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    installable_rhsa_count?: number;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    last_upload?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    os?: string;
    /**
     *
     * @type {string}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    rhsm?: string;
    /**
     *
     * @type {Array<ControllersSystemTag>}
     * @memberof ControllersTemplateSystemsDBLookup
     */
    tags?: Array<ControllersSystemTag>;
}
/**
 *
 * @export
 * @interface ControllersTemplateSystemsResponse
 */
export interface ControllersTemplateSystemsResponse {
    /**
     *
     * @type {Array<ControllersTemplateSystemItem>}
     * @memberof ControllersTemplateSystemsResponse
     */
    data?: Array<ControllersTemplateSystemItem>;
    /**
     *
     * @type {ControllersLinks}
     * @memberof ControllersTemplateSystemsResponse
     */
    links?: ControllersLinks;
    /**
     *
     * @type {ControllersListMeta}
     * @memberof ControllersTemplateSystemsResponse
     */
    meta?: ControllersListMeta;
}
/**
 *
 * @export
 * @interface ControllersTemplateSystemsUpdateRequest
 */
export interface ControllersTemplateSystemsUpdateRequest {
    /**
     * List of inventory IDs to have templates removed
     * @type {Array<string>}
     * @memberof ControllersTemplateSystemsUpdateRequest
     */
    systems?: Array<string>;
}
/**
 *
 * @export
 * @interface ControllersTemplatesMeta
 */
export interface ControllersTemplatesMeta {
    /**
     *
     * @type {Array<string>}
     * @memberof ControllersTemplatesMeta
     */
    creators?: Array<string>;
    /**
     * Used filters
     * @type {{ [key: string]: ControllersFilterData; }}
     * @memberof ControllersTemplatesMeta
     */
    filter?: { [key: string]: ControllersFilterData; };
    /**
     * Show whether customer has some registered systems
     * @type {boolean}
     * @memberof ControllersTemplatesMeta
     */
    has_systems?: boolean;
    /**
     * Used response limit (page size) - pagination
     * @type {number}
     * @memberof ControllersTemplatesMeta
     */
    limit?: number;
    /**
     * Used response offset - pagination
     * @type {number}
     * @memberof ControllersTemplatesMeta
     */
    offset?: number;
    /**
     * Used search terms
     * @type {string}
     * @memberof ControllersTemplatesMeta
     */
    search?: string;
    /**
     * Used sorting fields
     * @type {Array<string>}
     * @memberof ControllersTemplatesMeta
     */
    sort?: Array<string>;
    /**
     * Some subtotals used by some endpoints
     * @type {{ [key: string]: number; }}
     * @memberof ControllersTemplatesMeta
     */
    subtotals?: { [key: string]: number; };
    /**
     * Total items count to return
     * @type {number}
     * @memberof ControllersTemplatesMeta
     */
    total_items?: number;
}
/**
 *
 * @export
 * @interface ControllersTemplatesResponse
 */
export interface ControllersTemplatesResponse {
    /**
     * Template items
     * @type {Array<ControllersTemplateItem>}
     * @memberof ControllersTemplatesResponse
     */
    data?: Array<ControllersTemplateItem>;
    /**
     * Pagination links
     * @type {ControllersLinks}
     * @memberof ControllersTemplatesResponse
     */
    links?: ControllersLinks;
    /**
     * Generic response fields (pagination params, filters etc.)
     * @type {ControllersTemplatesMeta}
     * @memberof ControllersTemplatesResponse
     */
    meta?: ControllersTemplatesMeta;
}
/**
 *
 * @export
 * @interface ControllersUpdateBaselineRequest
 */
export interface ControllersUpdateBaselineRequest {
    /**
     * Updated baseline config (optional)
     * @type {ControllersBaselineConfig}
     * @memberof ControllersUpdateBaselineRequest
     */
    config?: ControllersBaselineConfig;
    /**
     * Description of the baseline (optional).
     * @type {string}
     * @memberof ControllersUpdateBaselineRequest
     */
    description?: string;
    /**
     * Map of inventories to add to (true) or remove (false) from given baseline (optional)
     * @type {{ [key: string]: boolean; }}
     * @memberof ControllersUpdateBaselineRequest
     */
    inventory_ids?: { [key: string]: boolean; };
    /**
     * Updated baseline name (optional)
     * @type {string}
     * @memberof ControllersUpdateBaselineRequest
     */
    name?: string;
}
/**
 *
 * @export
 * @interface ControllersUpdateBaselineResponse
 */
export interface ControllersUpdateBaselineResponse {
    /**
     * Updated baseline unique ID, it can not be changed
     * @type {number}
     * @memberof ControllersUpdateBaselineResponse
     */
    baseline_id?: number;
}
/**
 *
 * @export
 * @interface ModelsPackageUpdate
 */
export interface ModelsPackageUpdate {
    /**
     *
     * @type {string}
     * @memberof ModelsPackageUpdate
     */
    evra?: string;
    /**
     *
     * @type {string}
     * @memberof ModelsPackageUpdate
     */
    status?: string;
}
/**
 *
 * @export
 * @interface UtilsErrorResponse
 */
export interface UtilsErrorResponse {
    /**
     *
     * @type {string}
     * @memberof UtilsErrorResponse
     */
    error?: string;
}
/**
 *
 * @export
 * @interface VmaasUpdatesV3Request
 */
export interface VmaasUpdatesV3Request {
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3Request
     */
    basearch?: string;
    /**
     * VMaaS will check package_list and return error if we provide package_list without epochs
     * @type {boolean}
     * @memberof VmaasUpdatesV3Request
     */
    epoch_required?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof VmaasUpdatesV3Request
     */
    latest_only?: boolean;
    /**
     *
     * @type {Array<VmaasUpdatesV3RequestModulesList>}
     * @memberof VmaasUpdatesV3Request
     */
    modules_list?: Array<VmaasUpdatesV3RequestModulesList>;
    /**
     * Search for updates of unknown package EVRAs.
     * @type {boolean}
     * @memberof VmaasUpdatesV3Request
     */
    optimistic_updates?: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof VmaasUpdatesV3Request
     */
    package_list?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3Request
     */
    releasever?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof VmaasUpdatesV3Request
     */
    repository_list?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof VmaasUpdatesV3Request
     */
    repository_paths?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof VmaasUpdatesV3Request
     */
    security_only?: boolean;
    /**
     * Include content from \\\"third party\\\" repositories into the response, disabled by default.
     * @type {boolean}
     * @memberof VmaasUpdatesV3Request
     */
    third_party?: boolean;
}
/**
 *
 * @export
 * @interface VmaasUpdatesV3RequestModulesList
 */
export interface VmaasUpdatesV3RequestModulesList {
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3RequestModulesList
     */
    module_name?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3RequestModulesList
     */
    module_stream?: string;
}
/**
 *
 * @export
 * @interface VmaasUpdatesV3Response
 */
export interface VmaasUpdatesV3Response {
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3Response
     */
    basearch?: string;
    /**
     *
     * @type {boolean}
     * @memberof VmaasUpdatesV3Response
     */
    build_pkgcache?: boolean;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3Response
     */
    last_change?: string;
    /**
     *
     * @type {Array<VmaasUpdatesV3RequestModulesList>}
     * @memberof VmaasUpdatesV3Response
     */
    modules_list?: Array<VmaasUpdatesV3RequestModulesList>;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3Response
     */
    releasever?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof VmaasUpdatesV3Response
     */
    repository_list?: Array<string>;
    /**
     *
     * @type {{ [key: string]: VmaasUpdatesV3ResponseUpdateList; }}
     * @memberof VmaasUpdatesV3Response
     */
    update_list?: { [key: string]: VmaasUpdatesV3ResponseUpdateList; };
}
/**
 *
 * @export
 * @interface VmaasUpdatesV3ResponseAvailableUpdates
 */
export interface VmaasUpdatesV3ResponseAvailableUpdates {
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    basearch?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    erratum?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    evra?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    _package?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    package_name?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    releasever?: string;
    /**
     *
     * @type {string}
     * @memberof VmaasUpdatesV3ResponseAvailableUpdates
     */
    repository?: string;
}
/**
 *
 * @export
 * @interface VmaasUpdatesV3ResponseUpdateList
 */
export interface VmaasUpdatesV3ResponseUpdateList {
    /**
     *
     * @type {Array<VmaasUpdatesV3ResponseAvailableUpdates>}
     * @memberof VmaasUpdatesV3ResponseUpdateList
     */
    available_updates?: Array<VmaasUpdatesV3ResponseAvailableUpdates>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a baseline
         * @summary Delete a baseline
         * @param {number} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baselineDelete: async (baselineId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            if (baselineId === null || baselineId === undefined) {
                throw new RequiredError('baselineId','Required parameter baselineId was null or undefined when calling baselineDelete.');
            }
            const localVarPath = `/baselines/{baseline_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a baseline for my set of systems. System cannot be satellite managed.
         * @summary Create a baseline for my set of systems
         * @param {ControllersCreateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBaseline: async (body: ControllersCreateBaselineRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createBaseline.');
            }
            const localVarPath = `/baselines`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletesystem: async (inventoryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling deletesystem.');
            }
            const localVarPath = `/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAdvisory: async (advisoryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            if (advisoryId === null || advisoryId === undefined) {
                throw new RequiredError('advisoryId','Required parameter advisoryId was null or undefined when calling detailAdvisory.');
            }
            const localVarPath = `/advisories/{advisory_id}`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show baseline detail by given baseline ID
         * @summary Show baseline detail by given baseline ID
         * @param {string} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailBaseline: async (baselineId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            if (baselineId === null || baselineId === undefined) {
                throw new RequiredError('baselineId','Required parameter baselineId was null or undefined when calling detailBaseline.');
            }
            const localVarPath = `/baselines/{baseline_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailSystem: async (inventoryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling detailSystem.');
            }
            const localVarPath = `/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisories: async (search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/export/advisories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }

            if (filterApplicableSystems !== undefined) {
                localVarQueryParameter['filter[applicable_systems]'] = filterApplicableSystems;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} advisoryId Advisory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisorySystems: async (advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOs?: string, tags?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            if (advisoryId === null || advisoryId === undefined) {
                throw new RequiredError('advisoryId','Required parameter advisoryId was null or undefined when calling exportAdvisorySystems.');
            }
            const localVarPath = `/export/advisories/{advisory_id}/systems`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export systems applicable to a baseline. Export endpoints are not paginated.
         * @summary Export systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBaselineSystems: async (baselineId: number, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            if (baselineId === null || baselineId === undefined) {
                throw new RequiredError('baselineId','Required parameter baselineId was null or undefined when calling exportBaselineSystems.');
            }
            const localVarPath = `/export/baselines/{baseline_id}/systems`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all my systems which have a package installed. Export endpoints are not paginated.
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackageSystems: async (packageName: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            if (packageName === null || packageName === undefined) {
                throw new RequiredError('packageName','Required parameter packageName was null or undefined when calling exportPackageSystems.');
            }
            const localVarPath = `/export/packages/{package_name}/systems`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all installed packages across my systems. Export endpoints are not paginated.
         * @summary Show me all installed packages across my systems
         * @param {'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackages: async (sort?: 'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/export/packages`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterSystemsInstalled !== undefined) {
                localVarQueryParameter['filter[systems_installed]'] = filterSystemsInstalled;
            }

            if (filterSystemsInstallable !== undefined) {
                localVarQueryParameter['filter[systems_installable]'] = filterSystemsInstallable;
            }

            if (filterSystemsApplicable !== undefined) {
                localVarQueryParameter['filter[systems_applicable]'] = filterSystemsApplicable;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemAdvisories: async (inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling exportSystemAdvisories.');
            }
            const localVarPath = `/export/systems/{inventory_id}/advisories`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me details about a system packages by given inventory id. Export endpoints are not paginated.
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemPackages: async (inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling exportSystemPackages.');
            }
            const localVarPath = `/export/systems/{inventory_id}/packages`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterEvra !== undefined) {
                localVarQueryParameter['filter[evra]'] = filterEvra;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }

            if (filterUpdatable !== undefined) {
                localVarQueryParameter['filter[updatable]'] = filterUpdatable;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystems: async (search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterBaselineName?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/export/systems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterInstallableRhsaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhsa_count]'] = filterInstallableRhsaCount;
            }

            if (filterInstallableRhbaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhba_count]'] = filterInstallableRhbaCount;
            }

            if (filterInstallableRheaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhea_count]'] = filterInstallableRheaCount;
            }

            if (filterInstallableOtherCount !== undefined) {
                localVarQueryParameter['filter[installable_other_count]'] = filterInstallableOtherCount;
            }

            if (filterApplicableRhsaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhsa_count]'] = filterApplicableRhsaCount;
            }

            if (filterApplicableRhbaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhba_count]'] = filterApplicableRhbaCount;
            }

            if (filterApplicableRheaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhea_count]'] = filterApplicableRheaCount;
            }

            if (filterApplicableOtherCount !== undefined) {
                localVarQueryParameter['filter[applicable_other_count]'] = filterApplicableOtherCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterPackagesInstalled !== undefined) {
                localVarQueryParameter['filter[packages_installed]'] = filterPackagesInstalled;
            }

            if (filterPackagesInstallable !== undefined) {
                localVarQueryParameter['filter[packages_installable]'] = filterPackagesInstallable;
            }

            if (filterPackagesApplicable !== undefined) {
                localVarQueryParameter['filter[packages_applicable]'] = filterPackagesApplicable;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (filterBaselineName !== undefined) {
                localVarQueryParameter['filter[baseline_name]'] = filterBaselineName;
            }

            if (filterArch !== undefined) {
                localVarQueryParameter['filter[arch]'] = filterArch;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me metadata of selected package
         * @summary Show me metadata of selected package
         * @param {string} packageName package_name - latest, nevra - exact version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        latestPackage: async (packageName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            if (packageName === null || packageName === undefined) {
                throw new RequiredError('packageName','Required parameter packageName was null or undefined when calling latestPackage.');
            }
            const localVarPath = `/packages/{package_name}`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'advisory_type_name' | 'synopsis' | 'public_date' | 'severity' | 'installable_systems' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisories: async (limit?: number, offset?: number, sort?: 'id' | 'advisory_type_name' | 'synopsis' | 'public_date' | 'severity' | 'installable_systems' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/advisories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }

            if (filterInstallableSystems !== undefined) {
                localVarQueryParameter['filter[installable_systems]'] = filterInstallableSystems;
            }

            if (filterApplicableSystems !== undefined) {
                localVarQueryParameter['filter[applicable_systems]'] = filterApplicableSystems;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisoriesIds: async (limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ids/advisories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }

            if (filterInstallableSystems !== undefined) {
                localVarQueryParameter['filter[installable_systems]'] = filterInstallableSystems;
            }

            if (filterApplicableSystems !== undefined) {
                localVarQueryParameter['filter[applicable_systems]'] = filterApplicableSystems;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'stale' | 'status' | 'template' | 'groups' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStatus] Filter
         * @param {string} [filterTemplate] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystems: async (advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'stale' | 'status' | 'template' | 'groups' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterStatus?: string, filterTemplate?: string, filterOs?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            if (advisoryId === null || advisoryId === undefined) {
                throw new RequiredError('advisoryId','Required parameter advisoryId was null or undefined when calling listAdvisorySystems.');
            }
            const localVarPath = `/advisories/{advisory_id}/systems`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterStatus !== undefined) {
                localVarQueryParameter['filter[status]'] = filterStatus;
            }

            if (filterTemplate !== undefined) {
                localVarQueryParameter['filter[template]'] = filterTemplate;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }

            if (filterBuiltPkgcache !== undefined) {
                localVarQueryParameter['filter[built_pkgcache]'] = filterBuiltPkgcache;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'satellite_managed' | 'stale' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystemsIds: async (advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'satellite_managed' | 'stale' | 'built_pkgcache', search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterSatelliteManaged?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'advisoryId' is not null or undefined
            if (advisoryId === null || advisoryId === undefined) {
                throw new RequiredError('advisoryId','Required parameter advisoryId was null or undefined when calling listAdvisorySystemsIds.');
            }
            const localVarPath = `/ids/advisories/{advisory_id}/systems`
                .replace(`{${"advisory_id"}}`, encodeURIComponent(String(advisoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterInsightsId !== undefined) {
                localVarQueryParameter['filter[insights_id]'] = filterInsightsId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterStaleTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_timestamp]'] = filterStaleTimestamp;
            }

            if (filterStaleWarningTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_warning_timestamp]'] = filterStaleWarningTimestamp;
            }

            if (filterCulledTimestamp !== undefined) {
                localVarQueryParameter['filter[culled_timestamp]'] = filterCulledTimestamp;
            }

            if (filterCreated !== undefined) {
                localVarQueryParameter['filter[created]'] = filterCreated;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (filterBuiltPkgcache !== undefined) {
                localVarQueryParameter['filter[built_pkgcache]'] = filterBuiltPkgcache;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all baselines for all my systems
         * @summary Show me all baselines for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'systems' | 'published' | 'last_edited' | 'creator'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterName] Filter
         * @param {string} [filterSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaseline: async (limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems' | 'published' | 'last_edited' | 'creator', search?: string, filterId?: string, filterName?: string, filterSystems?: string, tags?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/baselines`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterSystems !== undefined) {
                localVarQueryParameter['filter[systems]'] = filterSystems;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload' | 'groups'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaselineSystems: async (baselineId: number, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload' | 'groups', search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            if (baselineId === null || baselineId === undefined) {
                throw new RequiredError('baselineId','Required parameter baselineId was null or undefined when calling listBaselineSystems.');
            }
            const localVarPath = `/baselines/{baseline_id}/systems`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaselineSystemsIds: async (baselineId: number, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload', search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            if (baselineId === null || baselineId === undefined) {
                throw new RequiredError('baselineId','Required parameter baselineId was null or undefined when calling listBaselineSystemsIds.');
            }
            const localVarPath = `/ids/baselines/{baseline_id}/systems`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackages: async (limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/packages/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterSystemsInstalled !== undefined) {
                localVarQueryParameter['filter[systems_installed]'] = filterSystemsInstalled;
            }

            if (filterSystemsInstallable !== undefined) {
                localVarQueryParameter['filter[systems_installable]'] = filterSystemsInstallable;
            }

            if (filterSystemsApplicable !== undefined) {
                localVarQueryParameter['filter[systems_applicable]'] = filterSystemsApplicable;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisories: async (inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling listSystemAdvisories.');
            }
            const localVarPath = `/systems/{inventory_id}/advisories`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisoriesIds: async (inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling listSystemAdvisoriesIds.');
            }
            const localVarPath = `/ids/systems/{inventory_id}/advisories`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterPublicDate !== undefined) {
                localVarQueryParameter['filter[public_date]'] = filterPublicDate;
            }

            if (filterSynopsis !== undefined) {
                localVarQueryParameter['filter[synopsis]'] = filterSynopsis;
            }

            if (filterAdvisoryType !== undefined) {
                localVarQueryParameter['filter[advisory_type]'] = filterAdvisoryType;
            }

            if (filterAdvisoryTypeName !== undefined) {
                localVarQueryParameter['filter[advisory_type_name]'] = filterAdvisoryTypeName;
            }

            if (filterSeverity !== undefined) {
                localVarQueryParameter['filter[severity]'] = filterSeverity;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me systems tags applicable to this application
         * @summary Show me systems tags applicable to this application
         * @param {'tag' | 'count'} [sort] Sort field
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemTags: async (sort?: 'tag' | 'count', limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'groups' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystems: async (limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'groups' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/systems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterInstallableRhsaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhsa_count]'] = filterInstallableRhsaCount;
            }

            if (filterInstallableRhbaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhba_count]'] = filterInstallableRhbaCount;
            }

            if (filterInstallableRheaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhea_count]'] = filterInstallableRheaCount;
            }

            if (filterInstallableOtherCount !== undefined) {
                localVarQueryParameter['filter[installable_other_count]'] = filterInstallableOtherCount;
            }

            if (filterApplicableRhsaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhsa_count]'] = filterApplicableRhsaCount;
            }

            if (filterApplicableRhbaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhba_count]'] = filterApplicableRhbaCount;
            }

            if (filterApplicableRheaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhea_count]'] = filterApplicableRheaCount;
            }

            if (filterApplicableOtherCount !== undefined) {
                localVarQueryParameter['filter[applicable_other_count]'] = filterApplicableOtherCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterPackagesInstalled !== undefined) {
                localVarQueryParameter['filter[packages_installed]'] = filterPackagesInstalled;
            }

            if (filterPackagesInstallable !== undefined) {
                localVarQueryParameter['filter[packages_installable]'] = filterPackagesInstallable;
            }

            if (filterPackagesApplicable !== undefined) {
                localVarQueryParameter['filter[packages_applicable]'] = filterPackagesApplicable;
            }

            if (filterStaleTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_timestamp]'] = filterStaleTimestamp;
            }

            if (filterStaleWarningTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_warning_timestamp]'] = filterStaleWarningTimestamp;
            }

            if (filterCulledTimestamp !== undefined) {
                localVarQueryParameter['filter[culled_timestamp]'] = filterCulledTimestamp;
            }

            if (filterCreated !== undefined) {
                localVarQueryParameter['filter[created]'] = filterCreated;
            }

            if (filterBaselineName !== undefined) {
                localVarQueryParameter['filter[baseline_name]'] = filterBaselineName;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }

            if (filterBuiltPkgcache !== undefined) {
                localVarQueryParameter['filter[built_pkgcache]'] = filterBuiltPkgcache;
            }

            if (filterArch !== undefined) {
                localVarQueryParameter['filter[arch]'] = filterArch;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemsIds: async (limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ids/systems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter[id]'] = filterId;
            }

            if (filterDisplayName !== undefined) {
                localVarQueryParameter['filter[display_name]'] = filterDisplayName;
            }

            if (filterLastEvaluation !== undefined) {
                localVarQueryParameter['filter[last_evaluation]'] = filterLastEvaluation;
            }

            if (filterLastUpload !== undefined) {
                localVarQueryParameter['filter[last_upload]'] = filterLastUpload;
            }

            if (filterRhsaCount !== undefined) {
                localVarQueryParameter['filter[rhsa_count]'] = filterRhsaCount;
            }

            if (filterRhbaCount !== undefined) {
                localVarQueryParameter['filter[rhba_count]'] = filterRhbaCount;
            }

            if (filterRheaCount !== undefined) {
                localVarQueryParameter['filter[rhea_count]'] = filterRheaCount;
            }

            if (filterOtherCount !== undefined) {
                localVarQueryParameter['filter[other_count]'] = filterOtherCount;
            }

            if (filterInstallableRhsaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhsa_count]'] = filterInstallableRhsaCount;
            }

            if (filterInstallableRhbaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhba_count]'] = filterInstallableRhbaCount;
            }

            if (filterInstallableRheaCount !== undefined) {
                localVarQueryParameter['filter[installable_rhea_count]'] = filterInstallableRheaCount;
            }

            if (filterInstallableOtherCount !== undefined) {
                localVarQueryParameter['filter[installable_other_count]'] = filterInstallableOtherCount;
            }

            if (filterApplicableRhsaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhsa_count]'] = filterApplicableRhsaCount;
            }

            if (filterApplicableRhbaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhba_count]'] = filterApplicableRhbaCount;
            }

            if (filterApplicableRheaCount !== undefined) {
                localVarQueryParameter['filter[applicable_rhea_count]'] = filterApplicableRheaCount;
            }

            if (filterApplicableOtherCount !== undefined) {
                localVarQueryParameter['filter[applicable_other_count]'] = filterApplicableOtherCount;
            }

            if (filterStale !== undefined) {
                localVarQueryParameter['filter[stale]'] = filterStale;
            }

            if (filterPackagesInstalled !== undefined) {
                localVarQueryParameter['filter[packages_installed]'] = filterPackagesInstalled;
            }

            if (filterPackagesInstallable !== undefined) {
                localVarQueryParameter['filter[packages_installable]'] = filterPackagesInstallable;
            }

            if (filterPackagesApplicable !== undefined) {
                localVarQueryParameter['filter[packages_applicable]'] = filterPackagesApplicable;
            }

            if (filterStaleTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_timestamp]'] = filterStaleTimestamp;
            }

            if (filterStaleWarningTimestamp !== undefined) {
                localVarQueryParameter['filter[stale_warning_timestamp]'] = filterStaleWarningTimestamp;
            }

            if (filterCulledTimestamp !== undefined) {
                localVarQueryParameter['filter[culled_timestamp]'] = filterCulledTimestamp;
            }

            if (filterCreated !== undefined) {
                localVarQueryParameter['filter[created]'] = filterCreated;
            }

            if (filterBaselineName !== undefined) {
                localVarQueryParameter['filter[baseline_name]'] = filterBaselineName;
            }

            if (filterOs !== undefined) {
                localVarQueryParameter['filter[os]'] = filterOs;
            }

            if (filterOsname !== undefined) {
                localVarQueryParameter['filter[osname]'] = filterOsname;
            }

            if (filterOsmajor !== undefined) {
                localVarQueryParameter['filter[osmajor]'] = filterOsmajor;
            }

            if (filterOsminor !== undefined) {
                localVarQueryParameter['filter[osminor]'] = filterOsminor;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }

            if (filterBuiltPkgcache !== undefined) {
                localVarQueryParameter['filter[built_pkgcache]'] = filterBuiltPkgcache;
            }

            if (filterArch !== undefined) {
                localVarQueryParameter['filter[arch]'] = filterArch;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageSystems: async (packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, filterUpdatable?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            if (packageName === null || packageName === undefined) {
                throw new RequiredError('packageName','Required parameter packageName was null or undefined when calling packageSystems.');
            }
            const localVarPath = `/packages/{package_name}/systems`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }

            if (filterUpdatable !== undefined) {
                localVarQueryParameter['filter[updatable]'] = filterUpdatable;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageSystemsIds: async (packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            if (packageName === null || packageName === undefined) {
                throw new RequiredError('packageName','Required parameter packageName was null or undefined when calling packageSystemsIds.');
            }
            const localVarPath = `/ids/packages/{package_name}/systems`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }

            if (filterSatelliteManaged !== undefined) {
                localVarQueryParameter['filter[satellite_managed]'] = filterSatelliteManaged;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me all package versions installed on some system
         * @summary Show me all package versions installed on some system
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageVersions: async (packageName: string, limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageName' is not null or undefined
            if (packageName === null || packageName === undefined) {
                throw new RequiredError('packageName','Required parameter packageName was null or undefined when calling packageVersions.');
            }
            const localVarPath = `/packages/{package_name}/versions`
                .replace(`{${"package_name"}}`, encodeURIComponent(String(packageName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove systems from baseline
         * @summary Remove systems from baseline
         * @param {ControllersBaselineSystemsRemoveRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBaselineSystems: async (body: ControllersBaselineSystemsRemoveRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling removeBaselineSystems.');
            }
            const localVarPath = `/baselines/systems/remove`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {string} [filterUpdateStatus] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPackages: async (inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, filterUpdateStatus?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling systemPackages.');
            }
            const localVarPath = `/systems/{inventory_id}/packages`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (filterName !== undefined) {
                localVarQueryParameter['filter[name]'] = filterName;
            }

            if (filterDescription !== undefined) {
                localVarQueryParameter['filter[description]'] = filterDescription;
            }

            if (filterEvra !== undefined) {
                localVarQueryParameter['filter[evra]'] = filterEvra;
            }

            if (filterSummary !== undefined) {
                localVarQueryParameter['filter[summary]'] = filterSummary;
            }

            if (filterUpdatable !== undefined) {
                localVarQueryParameter['filter[updatable]'] = filterUpdatable;
            }

            if (filterUpdateStatus !== undefined) {
                localVarQueryParameter['filter[update_status]'] = filterUpdateStatus;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me system\'s json request for VMaaS
         * @summary Show me system\'s json request for VMaaS
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVmaasJson: async (inventoryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling systemVmaasJson.');
            }
            const localVarPath = `/systems/{inventory_id}/vmaas_json`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show me system\'s yum_updates (client side evaluation data)
         * @summary Show me system\'s yum_updates (client side evaluation data)
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemYumUpdates: async (inventoryId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling systemYumUpdates.');
            }
            const localVarPath = `/systems/{inventory_id}/yum_updates`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a baseline for my set of systems. System cannot be satellite managed.
         * @summary Update a baseline for my set of systems
         * @param {number} baselineId Baseline ID
         * @param {ControllersUpdateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBaseline: async (baselineId: number, body: ControllersUpdateBaselineRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            if (baselineId === null || baselineId === undefined) {
                throw new RequiredError('baselineId','Required parameter baselineId was null or undefined when calling updateBaseline.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateBaseline.');
            }
            const localVarPath = `/baselines/{baseline_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View advisory-system pairs for selected systems and installable advisories
         * @summary View advisory-system pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAdvisoriesSystems: async (body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling viewAdvisoriesSystems.');
            }
            const localVarPath = `/views/advisories/systems`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View system-advisory pairs for selected systems and installable advisories
         * @summary View system-advisory pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSystemsAdvisories: async (body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling viewSystemsAdvisories.');
            }
            const localVarPath = `/views/systems/advisories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication RhIdentity required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("x-rh-identity")
                    : await configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tags) {
                localVarQueryParameter['tags'] = tags;
            }

            if (filterGroupName) {
                localVarQueryParameter['filter[group_name]'] = filterGroupName;
            }

            if (filterSystemProfileSapSystem !== undefined) {
                localVarQueryParameter['filter[system_profile][sap_system]'] = filterSystemProfileSapSystem;
            }

            if (filterSystemProfileSapSids) {
                localVarQueryParameter['filter[system_profile][sap_sids]'] = filterSystemProfileSapSids;
            }

            if (filterSystemProfileAnsible !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible]'] = filterSystemProfileAnsible;
            }

            if (filterSystemProfileAnsibleControllerVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][ansible][controller_version]'] = filterSystemProfileAnsibleControllerVersion;
            }

            if (filterSystemProfileMssql !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql]'] = filterSystemProfileMssql;
            }

            if (filterSystemProfileMssqlVersion !== undefined) {
                localVarQueryParameter['filter[system_profile][mssql][version]'] = filterSystemProfileMssqlVersion;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Delete a baseline
         * @summary Delete a baseline
         * @param {number} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async baselineDelete(baselineId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersDeleteBaselineResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).baselineDelete(baselineId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a baseline for my set of systems. System cannot be satellite managed.
         * @summary Create a baseline for my set of systems
         * @param {ControllersCreateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBaseline(body: ControllersCreateBaselineRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersCreateBaselineResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createBaseline(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletesystem(inventoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deletesystem(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailAdvisory(advisoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoryDetailResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).detailAdvisory(advisoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show baseline detail by given baseline ID
         * @summary Show baseline detail by given baseline ID
         * @param {string} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailBaseline(baselineId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersBaselineDetailResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).detailBaseline(baselineId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailSystem(inventoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemDetailResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).detailSystem(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersAdvisoriesDBLookup>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} advisoryId Advisory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAdvisorySystems(advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOs?: string, tags?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersAdvisorySystemDBLookup>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportAdvisorySystems(advisoryId, search, filterId, filterDisplayName, filterStale, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOs, tags, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export systems applicable to a baseline. Export endpoints are not paginated.
         * @summary Export systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportBaselineSystems(baselineId: number, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersBaselineSystemsDBLookup>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportBaselineSystems(baselineId, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all my systems which have a package installed. Export endpoints are not paginated.
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportPackageSystems(packageName: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersPackageSystemItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportPackageSystems(packageName, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, tags, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all installed packages across my systems. Export endpoints are not paginated.
         * @summary Show me all installed packages across my systems
         * @param {'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportPackages(sort?: 'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersPackageItem>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportPackages(sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSystemAdvisories(inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemAdvisoriesDBLookup>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportSystemAdvisories(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me details about a system packages by given inventory id. Export endpoints are not paginated.
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSystemPackages(inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemPackageInline>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportSystemPackages(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportSystems(search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterBaselineName?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ControllersSystemDBLookup>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).exportSystems(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterBaselineName, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me metadata of selected package
         * @summary Show me metadata of selected package
         * @param {string} packageName package_name - latest, nevra - exact version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async latestPackage(packageName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackageDetailResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).latestPackage(packageName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'advisory_type_name' | 'synopsis' | 'public_date' | 'severity' | 'installable_systems' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdvisories(limit?: number, offset?: number, sort?: 'id' | 'advisory_type_name' | 'synopsis' | 'public_date' | 'severity' | 'installable_systems' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoriesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdvisoriesIds(limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsPlainResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listAdvisoriesIds(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'stale' | 'status' | 'template' | 'groups' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStatus] Filter
         * @param {string} [filterTemplate] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'stale' | 'status' | 'template' | 'groups' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterStatus?: string, filterTemplate?: string, filterOs?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisorySystemsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listAdvisorySystems(advisoryId, limit, offset, sort, search, filterId, filterDisplayName, filterStale, filterStatus, filterTemplate, filterOs, filterSatelliteManaged, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'satellite_managed' | 'stale' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAdvisorySystemsIds(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'satellite_managed' | 'stale' | 'built_pkgcache', search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterSatelliteManaged?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsStatusResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listAdvisorySystemsIds(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterSatelliteManaged, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all baselines for all my systems
         * @summary Show me all baselines for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'systems' | 'published' | 'last_edited' | 'creator'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterName] Filter
         * @param {string} [filterSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBaseline(limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems' | 'published' | 'last_edited' | 'creator', search?: string, filterId?: string, filterName?: string, filterSystems?: string, tags?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersBaselinesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listBaseline(limit, offset, sort, search, filterId, filterName, filterSystems, tags, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload' | 'groups'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBaselineSystems(baselineId: number, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload' | 'groups', search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersBaselineSystemsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listBaselineSystems(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBaselineSystemsIds(baselineId: number, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload', search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsPlainResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listBaselineSystemsIds(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackages(limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackagesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listPackages(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemAdvisoriesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemAdvisoriesIds(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsStatusResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSystemAdvisoriesIds(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me systems tags applicable to this application
         * @summary Show me systems tags applicable to this application
         * @param {'tag' | 'count'} [sort] Sort field
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemTags(sort?: 'tag' | 'count', limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemTagsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSystemTags(sort, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'groups' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystems(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'groups' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSystems(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterSatelliteManaged, filterBuiltPkgcache, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSystemsIds(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsSatelliteManagedResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSystemsIds(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterOs, filterOsname, filterOsmajor, filterOsminor, filterSatelliteManaged, filterBuiltPkgcache, filterArch, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageSystems(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, filterUpdatable?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackageSystemsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).packageSystems(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, filterUpdatable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageSystemsIds(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersIDsStatusResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).packageSystemsIds(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me all package versions installed on some system
         * @summary Show me all package versions installed on some system
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packageVersions(packageName: string, limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersPackageVersionsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).packageVersions(packageName, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove systems from baseline
         * @summary Remove systems from baseline
         * @param {ControllersBaselineSystemsRemoveRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBaselineSystems(body: ControllersBaselineSystemsRemoveRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).removeBaselineSystems(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {string} [filterUpdateStatus] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemPackages(inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, filterUpdateStatus?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemPackageResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).systemPackages(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, filterUpdateStatus, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me system\'s json request for VMaaS
         * @summary Show me system\'s json request for VMaaS
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemVmaasJson(inventoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemVmaasJSONResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).systemVmaasJson(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show me system\'s yum_updates (client side evaluation data)
         * @summary Show me system\'s yum_updates (client side evaluation data)
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemYumUpdates(inventoryId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemYumUpdatesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).systemYumUpdates(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a baseline for my set of systems. System cannot be satellite managed.
         * @summary Update a baseline for my set of systems
         * @param {number} baselineId Baseline ID
         * @param {ControllersUpdateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBaseline(baselineId: number, body: ControllersUpdateBaselineRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersUpdateBaselineResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateBaseline(baselineId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * View advisory-system pairs for selected systems and installable advisories
         * @summary View advisory-system pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAdvisoriesSystems(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersAdvisoriesSystemsResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).viewAdvisoriesSystems(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * View system-advisory pairs for selected systems and installable advisories
         * @summary View system-advisory pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSystemsAdvisories(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControllersSystemsAdvisoriesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).viewSystemsAdvisories(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Delete a baseline
         * @summary Delete a baseline
         * @param {number} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        baselineDelete(baselineId: number, options?: any): AxiosPromise<ControllersDeleteBaselineResponse> {
            return DefaultApiFp(configuration).baselineDelete(baselineId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a baseline for my set of systems. System cannot be satellite managed.
         * @summary Create a baseline for my set of systems
         * @param {ControllersCreateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBaseline(body: ControllersCreateBaselineRequest, options?: any): AxiosPromise<ControllersCreateBaselineResponse> {
            return DefaultApiFp(configuration).createBaseline(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete system by inventory id
         * @summary Delete system by inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletesystem(inventoryId: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deletesystem(inventoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me details an advisory by given advisory name
         * @summary Show me details an advisory by given advisory name
         * @param {string} advisoryId Advisory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailAdvisory(advisoryId: string, options?: any): AxiosPromise<ControllersAdvisoryDetailResponse> {
            return DefaultApiFp(configuration).detailAdvisory(advisoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Show baseline detail by given baseline ID
         * @summary Show baseline detail by given baseline ID
         * @param {string} baselineId Baseline ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailBaseline(baselineId: string, options?: any): AxiosPromise<ControllersBaselineDetailResponse> {
            return DefaultApiFp(configuration).detailBaseline(baselineId, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me details about a system by given inventory id
         * @summary Show me details about a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailSystem(inventoryId: string, options?: any): AxiosPromise<ControllersSystemDetailResponse> {
            return DefaultApiFp(configuration).detailSystem(inventoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any): AxiosPromise<Array<ControllersAdvisoriesDBLookup>> {
            return DefaultApiFp(configuration).exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, options).then((request) => request(axios, basePath));
        },
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} advisoryId Advisory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterOs] Filter OS version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAdvisorySystems(advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOs?: string, tags?: Array<string>, options?: any): AxiosPromise<Array<ControllersAdvisorySystemDBLookup>> {
            return DefaultApiFp(configuration).exportAdvisorySystems(advisoryId, search, filterId, filterDisplayName, filterStale, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOs, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Export systems applicable to a baseline. Export endpoints are not paginated.
         * @summary Export systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportBaselineSystems(baselineId: number, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<Array<ControllersBaselineSystemsDBLookup>> {
            return DefaultApiFp(configuration).exportBaselineSystems(baselineId, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all my systems which have a package installed. Export endpoints are not paginated.
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackageSystems(packageName: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options?: any): AxiosPromise<Array<ControllersPackageSystemItem>> {
            return DefaultApiFp(configuration).exportPackageSystems(packageName, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all installed packages across my systems. Export endpoints are not paginated.
         * @summary Show me all installed packages across my systems
         * @param {'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportPackages(sort?: 'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, options?: any): AxiosPromise<Array<ControllersPackageItem>> {
            return DefaultApiFp(configuration).exportPackages(sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, options).then((request) => request(axios, basePath));
        },
        /**
         * Export applicable advisories for all my systems. Export endpoints are not paginated.
         * @summary Export applicable advisories for all my systems
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemAdvisories(inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): AxiosPromise<Array<ControllersSystemAdvisoriesDBLookup>> {
            return DefaultApiFp(configuration).exportSystemAdvisories(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me details about a system packages by given inventory id. Export endpoints are not paginated.
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystemPackages(inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: any): AxiosPromise<Array<ControllersSystemPackageInline>> {
            return DefaultApiFp(configuration).exportSystemPackages(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options).then((request) => request(axios, basePath));
        },
        /**
         * Export systems for my account. Export endpoints are not paginated.
         * @summary Export systems for my account
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportSystems(search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterBaselineName?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, options?: any): AxiosPromise<Array<ControllersSystemDBLookup>> {
            return DefaultApiFp(configuration).exportSystems(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterBaselineName, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me metadata of selected package
         * @summary Show me metadata of selected package
         * @param {string} packageName package_name - latest, nevra - exact version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        latestPackage(packageName: string, options?: any): AxiosPromise<ControllersPackageDetailResponse> {
            return DefaultApiFp(configuration).latestPackage(packageName, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'advisory_type_name' | 'synopsis' | 'public_date' | 'severity' | 'installable_systems' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisories(limit?: number, offset?: number, sort?: 'id' | 'advisory_type_name' | 'synopsis' | 'public_date' | 'severity' | 'installable_systems' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersAdvisoriesResponse> {
            return DefaultApiFp(configuration).listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all applicable advisories for all my systems
         * @summary Show me all applicable advisories for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {string} [filterInstallableSystems] Filter
         * @param {string} [filterApplicableSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisoriesIds(limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersIDsPlainResponse> {
            return DefaultApiFp(configuration).listAdvisoriesIds(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'stale' | 'status' | 'template' | 'groups' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStatus] Filter
         * @param {string} [filterTemplate] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'stale' | 'status' | 'template' | 'groups' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterStatus?: string, filterTemplate?: string, filterOs?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersAdvisorySystemsResponse> {
            return DefaultApiFp(configuration).listAdvisorySystems(advisoryId, limit, offset, sort, search, filterId, filterDisplayName, filterStale, filterStatus, filterTemplate, filterOs, filterSatelliteManaged, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me systems on which the given advisory is applicable
         * @summary Show me systems on which the given advisory is applicable
         * @param {string} advisoryId Advisory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'satellite_managed' | 'stale' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterInsightsId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterOsname] Filter
         * @param {string} [filterOsminor] Filter
         * @param {string} [filterOsmajor] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAdvisorySystemsIds(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'satellite_managed' | 'stale' | 'built_pkgcache', search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterSatelliteManaged?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersIDsStatusResponse> {
            return DefaultApiFp(configuration).listAdvisorySystemsIds(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterSatelliteManaged, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all baselines for all my systems
         * @summary Show me all baselines for all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'systems' | 'published' | 'last_edited' | 'creator'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterName] Filter
         * @param {string} [filterSystems] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaseline(limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems' | 'published' | 'last_edited' | 'creator', search?: string, filterId?: string, filterName?: string, filterSystems?: string, tags?: Array<string>, options?: any): AxiosPromise<ControllersBaselinesResponse> {
            return DefaultApiFp(configuration).listBaseline(limit, offset, sort, search, filterId, filterName, filterSystems, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload' | 'groups'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaselineSystems(baselineId: number, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload' | 'groups', search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersBaselineSystemsResponse> {
            return DefaultApiFp(configuration).listBaselineSystems(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all systems applicable to a baseline
         * @summary Show me all systems belonging to a baseline
         * @param {number} baselineId Baseline ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterOs] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBaselineSystemsIds(baselineId: number, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload', search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, options?: any): AxiosPromise<ControllersIDsPlainResponse> {
            return DefaultApiFp(configuration).listBaselineSystemsIds(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all installed packages across my systems
         * @summary Show me all installed packages across my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterSystemsInstalled] Filter
         * @param {string} [filterSystemsInstallable] Filter
         * @param {string} [filterSystemsApplicable] Filter
         * @param {string} [filterSummary] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackages(limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersPackagesResponse> {
            return DefaultApiFp(configuration).listPackages(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): AxiosPromise<ControllersSystemAdvisoriesResponse> {
            return DefaultApiFp(configuration).listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me advisories for a system by given inventory id
         * @summary Show me advisories for a system by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterPublicDate] Filter
         * @param {string} [filterSynopsis] Filter
         * @param {string} [filterAdvisoryType] Filter
         * @param {string} [filterAdvisoryTypeName] Filter
         * @param {string} [filterSeverity] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemAdvisoriesIds(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any): AxiosPromise<ControllersIDsStatusResponse> {
            return DefaultApiFp(configuration).listSystemAdvisoriesIds(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me systems tags applicable to this application
         * @summary Show me systems tags applicable to this application
         * @param {'tag' | 'count'} [sort] Sort field
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemTags(sort?: 'tag' | 'count', limit?: number, offset?: number, options?: any): AxiosPromise<ControllersSystemTagsResponse> {
            return DefaultApiFp(configuration).listSystemTags(sort, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'groups' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystems(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'groups' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersSystemsResponse> {
            return DefaultApiFp(configuration).listSystems(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterSatelliteManaged, filterBuiltPkgcache, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all my systems
         * @summary Show me all my systems
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
         * @param {string} [search] Find matching text
         * @param {string} [filterId] Filter
         * @param {string} [filterDisplayName] Filter
         * @param {string} [filterLastEvaluation] Filter
         * @param {string} [filterLastUpload] Filter
         * @param {string} [filterRhsaCount] Filter
         * @param {string} [filterRhbaCount] Filter
         * @param {string} [filterRheaCount] Filter
         * @param {string} [filterOtherCount] Filter
         * @param {string} [filterInstallableRhsaCount] Filter
         * @param {string} [filterInstallableRhbaCount] Filter
         * @param {string} [filterInstallableRheaCount] Filter
         * @param {string} [filterInstallableOtherCount] Filter
         * @param {string} [filterApplicableRhsaCount] Filter
         * @param {string} [filterApplicableRhbaCount] Filter
         * @param {string} [filterApplicableRheaCount] Filter
         * @param {string} [filterApplicableOtherCount] Filter
         * @param {string} [filterStale] Filter
         * @param {string} [filterPackagesInstalled] Filter
         * @param {string} [filterPackagesInstallable] Filter
         * @param {string} [filterPackagesApplicable] Filter
         * @param {string} [filterStaleTimestamp] Filter
         * @param {string} [filterStaleWarningTimestamp] Filter
         * @param {string} [filterCulledTimestamp] Filter
         * @param {string} [filterCreated] Filter
         * @param {string} [filterBaselineName] Filter
         * @param {string} [filterOs] Filter OS version
         * @param {string} [filterOsname] Filter OS name
         * @param {string} [filterOsmajor] Filter OS major version
         * @param {string} [filterOsminor] Filter OS minor version
         * @param {string} [filterSatelliteManaged] Filter
         * @param {string} [filterBuiltPkgcache] Filter
         * @param {string} [filterArch] Filter
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSystemsIds(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersIDsSatelliteManagedResponse> {
            return DefaultApiFp(configuration).listSystemsIds(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterOs, filterOsname, filterOsmajor, filterOsminor, filterSatelliteManaged, filterBuiltPkgcache, filterArch, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {boolean} [filterUpdatable] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageSystems(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, filterUpdatable?: boolean, options?: any): AxiosPromise<ControllersPackageSystemsResponse> {
            return DefaultApiFp(configuration).packageSystems(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, filterUpdatable, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all my systems which have a package installed
         * @summary Show me all my systems which have a package installed
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageSystemsIds(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, options?: any): AxiosPromise<ControllersIDsStatusResponse> {
            return DefaultApiFp(configuration).packageSystemsIds(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me all package versions installed on some system
         * @summary Show me all package versions installed on some system
         * @param {string} packageName Package name
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packageVersions(packageName: string, limit?: number, offset?: number, options?: any): AxiosPromise<ControllersPackageVersionsResponse> {
            return DefaultApiFp(configuration).packageVersions(packageName, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove systems from baseline
         * @summary Remove systems from baseline
         * @param {ControllersBaselineSystemsRemoveRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBaselineSystems(body: ControllersBaselineSystemsRemoveRequest, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).removeBaselineSystems(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me details about a system packages by given inventory id
         * @summary Show me details about a system packages by given inventory id
         * @param {string} inventoryId Inventory ID
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {string} [search] Find matching text
         * @param {string} [filterName] Filter
         * @param {string} [filterDescription] Filter
         * @param {string} [filterEvra] Filter
         * @param {string} [filterSummary] Filter
         * @param {boolean} [filterUpdatable] Filter
         * @param {string} [filterUpdateStatus] Filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPackages(inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, filterUpdateStatus?: string, options?: any): AxiosPromise<ControllersSystemPackageResponse> {
            return DefaultApiFp(configuration).systemPackages(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, filterUpdateStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me system\'s json request for VMaaS
         * @summary Show me system\'s json request for VMaaS
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVmaasJson(inventoryId: string, options?: any): AxiosPromise<ControllersSystemVmaasJSONResponse> {
            return DefaultApiFp(configuration).systemVmaasJson(inventoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Show me system\'s yum_updates (client side evaluation data)
         * @summary Show me system\'s yum_updates (client side evaluation data)
         * @param {string} inventoryId Inventory ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemYumUpdates(inventoryId: string, options?: any): AxiosPromise<ControllersSystemYumUpdatesResponse> {
            return DefaultApiFp(configuration).systemYumUpdates(inventoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a baseline for my set of systems. System cannot be satellite managed.
         * @summary Update a baseline for my set of systems
         * @param {number} baselineId Baseline ID
         * @param {ControllersUpdateBaselineRequest} body Request body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBaseline(baselineId: number, body: ControllersUpdateBaselineRequest, options?: any): AxiosPromise<ControllersUpdateBaselineResponse> {
            return DefaultApiFp(configuration).updateBaseline(baselineId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * View advisory-system pairs for selected systems and installable advisories
         * @summary View advisory-system pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAdvisoriesSystems(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersAdvisoriesSystemsResponse> {
            return DefaultApiFp(configuration).viewAdvisoriesSystems(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
        /**
         * View system-advisory pairs for selected systems and installable advisories
         * @summary View system-advisory pairs for selected systems and installable advisories
         * @param {ControllersSystemsAdvisoriesRequest} body Request body
         * @param {number} [limit] Limit for paging
         * @param {number} [offset] Offset for paging
         * @param {Array<string>} [tags] Tag filter
         * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
         * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
         * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
         * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
         * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
         * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
         * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSystemsAdvisories(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any): AxiosPromise<ControllersSystemsAdvisoriesResponse> {
            return DefaultApiFp(configuration).viewSystemsAdvisories(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Delete a baseline
     * @summary Delete a baseline
     * @param {number} baselineId Baseline ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public baselineDelete(baselineId: number, options?: any) {
        return DefaultApiFp(this.configuration).baselineDelete(baselineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a baseline for my set of systems. System cannot be satellite managed.
     * @summary Create a baseline for my set of systems
     * @param {ControllersCreateBaselineRequest} body Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBaseline(body: ControllersCreateBaselineRequest, options?: any) {
        return DefaultApiFp(this.configuration).createBaseline(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete system by inventory id
     * @summary Delete system by inventory id
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletesystem(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).deletesystem(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me details an advisory by given advisory name
     * @summary Show me details an advisory by given advisory name
     * @param {string} advisoryId Advisory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detailAdvisory(advisoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).detailAdvisory(advisoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show baseline detail by given baseline ID
     * @summary Show baseline detail by given baseline ID
     * @param {string} baselineId Baseline ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detailBaseline(baselineId: string, options?: any) {
        return DefaultApiFp(this.configuration).detailBaseline(baselineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me details about a system by given inventory id
     * @summary Show me details about a system by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public detailSystem(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).detailSystem(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export applicable advisories for all my systems. Export endpoints are not paginated.
     * @summary Export applicable advisories for all my systems
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {string} [filterApplicableSystems] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportAdvisories(search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterApplicableSystems?: string, options?: any) {
        return DefaultApiFp(this.configuration).exportAdvisories(search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterApplicableSystems, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export systems for my account. Export endpoints are not paginated.
     * @summary Export systems for my account
     * @param {string} advisoryId Advisory ID
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterStale] Filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {string} [filterOs] Filter OS version
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportAdvisorySystems(advisoryId: string, search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterOs?: string, tags?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).exportAdvisorySystems(advisoryId, search, filterId, filterDisplayName, filterStale, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterOs, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export systems applicable to a baseline. Export endpoints are not paginated.
     * @summary Export systems belonging to a baseline
     * @param {number} baselineId Baseline ID
     * @param {string} [search] Find matching text
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterOs] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportBaselineSystems(baselineId: number, search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).exportBaselineSystems(baselineId, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all my systems which have a package installed. Export endpoints are not paginated.
     * @summary Show me all my systems which have a package installed
     * @param {string} packageName Package name
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportPackageSystems(packageName: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, tags?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).exportPackageSystems(packageName, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all installed packages across my systems. Export endpoints are not paginated.
     * @summary Show me all installed packages across my systems
     * @param {'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterSystemsInstalled] Filter
     * @param {string} [filterSystemsInstallable] Filter
     * @param {string} [filterSystemsApplicable] Filter
     * @param {string} [filterSummary] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportPackages(sort?: 'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, options?: any) {
        return DefaultApiFp(this.configuration).exportPackages(sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export applicable advisories for all my systems. Export endpoints are not paginated.
     * @summary Export applicable advisories for all my systems
     * @param {string} inventoryId Inventory ID
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportSystemAdvisories(inventoryId: string, search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any) {
        return DefaultApiFp(this.configuration).exportSystemAdvisories(inventoryId, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me details about a system packages by given inventory id. Export endpoints are not paginated.
     * @summary Show me details about a system packages by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterEvra] Filter
     * @param {string} [filterSummary] Filter
     * @param {boolean} [filterUpdatable] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportSystemPackages(inventoryId: string, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).exportSystemPackages(inventoryId, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Export systems for my account. Export endpoints are not paginated.
     * @summary Export systems for my account
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterInstallableRhsaCount] Filter
     * @param {string} [filterInstallableRhbaCount] Filter
     * @param {string} [filterInstallableRheaCount] Filter
     * @param {string} [filterInstallableOtherCount] Filter
     * @param {string} [filterApplicableRhsaCount] Filter
     * @param {string} [filterApplicableRhbaCount] Filter
     * @param {string} [filterApplicableRheaCount] Filter
     * @param {string} [filterApplicableOtherCount] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterPackagesInstalled] Filter
     * @param {string} [filterPackagesInstallable] Filter
     * @param {string} [filterPackagesApplicable] Filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {string} [filterBaselineName] Filter
     * @param {string} [filterArch] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {string} [filterOsname] Filter OS name
     * @param {string} [filterOsmajor] Filter OS major version
     * @param {string} [filterOsminor] Filter OS minor version
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public exportSystems(search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterBaselineName?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).exportSystems(search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterBaselineName, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me metadata of selected package
     * @summary Show me metadata of selected package
     * @param {string} packageName package_name - latest, nevra - exact version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public latestPackage(packageName: string, options?: any) {
        return DefaultApiFp(this.configuration).latestPackage(packageName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all applicable advisories for all my systems
     * @summary Show me all applicable advisories for all my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'advisory_type_name' | 'synopsis' | 'public_date' | 'severity' | 'installable_systems' | 'applicable_systems'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {string} [filterInstallableSystems] Filter
     * @param {string} [filterApplicableSystems] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdvisories(limit?: number, offset?: number, sort?: 'id' | 'advisory_type_name' | 'synopsis' | 'public_date' | 'severity' | 'installable_systems' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listAdvisories(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all applicable advisories for all my systems
     * @summary Show me all applicable advisories for all my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {string} [filterInstallableSystems] Filter
     * @param {string} [filterApplicableSystems] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdvisoriesIds(limit?: number, offset?: number, sort?: 'id' | 'name' | 'advisory_type' | 'synopsis' | 'public_date' | 'applicable_systems', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, filterInstallableSystems?: string, filterApplicableSystems?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listAdvisoriesIds(limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, filterInstallableSystems, filterApplicableSystems, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me systems on which the given advisory is applicable
     * @summary Show me systems on which the given advisory is applicable
     * @param {string} advisoryId Advisory ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'stale' | 'status' | 'template' | 'groups' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterStatus] Filter
     * @param {string} [filterTemplate] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {string} [filterSatelliteManaged] Filter
     * @param {string} [filterBuiltPkgcache] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdvisorySystems(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'stale' | 'status' | 'template' | 'groups' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterStale?: string, filterStatus?: string, filterTemplate?: string, filterOs?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listAdvisorySystems(advisoryId, limit, offset, sort, search, filterId, filterDisplayName, filterStale, filterStatus, filterTemplate, filterOs, filterSatelliteManaged, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me systems on which the given advisory is applicable
     * @summary Show me systems on which the given advisory is applicable
     * @param {string} advisoryId Advisory ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'satellite_managed' | 'stale' | 'built_pkgcache'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterInsightsId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterSatelliteManaged] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterStaleTimestamp] Filter
     * @param {string} [filterStaleWarningTimestamp] Filter
     * @param {string} [filterCulledTimestamp] Filter
     * @param {string} [filterCreated] Filter
     * @param {string} [filterOsname] Filter
     * @param {string} [filterOsminor] Filter
     * @param {string} [filterOsmajor] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {string} [filterBuiltPkgcache] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAdvisorySystemsIds(advisoryId: string, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_evaluation' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'satellite_managed' | 'stale' | 'built_pkgcache', search?: string, filterId?: string, filterInsightsId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterSatelliteManaged?: string, filterStale?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterOsname?: string, filterOsminor?: string, filterOsmajor?: string, filterOs?: string, filterBuiltPkgcache?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listAdvisorySystemsIds(advisoryId, limit, offset, sort, search, filterId, filterInsightsId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterSatelliteManaged, filterStale, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterOsname, filterOsminor, filterOsmajor, filterOs, filterBuiltPkgcache, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all baselines for all my systems
     * @summary Show me all baselines for all my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'name' | 'systems' | 'published' | 'last_edited' | 'creator'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterName] Filter
     * @param {string} [filterSystems] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listBaseline(limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems' | 'published' | 'last_edited' | 'creator', search?: string, filterId?: string, filterName?: string, filterSystems?: string, tags?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listBaseline(limit, offset, sort, search, filterId, filterName, filterSystems, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all systems applicable to a baseline
     * @summary Show me all systems belonging to a baseline
     * @param {number} baselineId Baseline ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload' | 'groups'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterOs] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listBaselineSystems(baselineId: number, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload' | 'groups', search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listBaselineSystems(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all systems applicable to a baseline
     * @summary Show me all systems belonging to a baseline
     * @param {number} baselineId Baseline ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterOs] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listBaselineSystemsIds(baselineId: number, limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'os' | 'installable_rhsa_count' | 'installable_rhba_count' | 'installable_rhea_count' | 'installable_other_count' | 'applicable_rhsa_count' | 'applicable_rhba_count' | 'applicable_rhea_count' | 'applicable_other_count' | 'last_upload', search?: string, filterDisplayName?: string, filterOs?: string, tags?: Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listBaselineSystemsIds(baselineId, limit, offset, sort, search, filterDisplayName, filterOs, tags, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all installed packages across my systems
     * @summary Show me all installed packages across my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterSystemsInstalled] Filter
     * @param {string} [filterSystemsInstallable] Filter
     * @param {string} [filterSystemsApplicable] Filter
     * @param {string} [filterSummary] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPackages(limit?: number, offset?: number, sort?: 'id' | 'name' | 'systems_installed' | 'systems_installable' | 'systems_applicable', search?: string, filterName?: string, filterSystemsInstalled?: string, filterSystemsInstallable?: string, filterSystemsApplicable?: string, filterSummary?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listPackages(limit, offset, sort, search, filterName, filterSystemsInstalled, filterSystemsInstallable, filterSystemsApplicable, filterSummary, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me advisories for a system by given inventory id
     * @summary Show me advisories for a system by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSystemAdvisories(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any) {
        return DefaultApiFp(this.configuration).listSystemAdvisories(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me advisories for a system by given inventory id
     * @summary Show me advisories for a system by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'name' | 'type' | 'synopsis' | 'public_date'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterPublicDate] Filter
     * @param {string} [filterSynopsis] Filter
     * @param {string} [filterAdvisoryType] Filter
     * @param {string} [filterAdvisoryTypeName] Filter
     * @param {string} [filterSeverity] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSystemAdvisoriesIds(inventoryId: string, limit?: number, offset?: number, sort?: 'id' | 'name' | 'type' | 'synopsis' | 'public_date', search?: string, filterId?: string, filterDescription?: string, filterPublicDate?: string, filterSynopsis?: string, filterAdvisoryType?: string, filterAdvisoryTypeName?: string, filterSeverity?: string, options?: any) {
        return DefaultApiFp(this.configuration).listSystemAdvisoriesIds(inventoryId, limit, offset, sort, search, filterId, filterDescription, filterPublicDate, filterSynopsis, filterAdvisoryType, filterAdvisoryTypeName, filterSeverity, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me systems tags applicable to this application
     * @summary Show me systems tags applicable to this application
     * @param {'tag' | 'count'} [sort] Sort field
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSystemTags(sort?: 'tag' | 'count', limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listSystemTags(sort, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all my systems
     * @summary Show me all my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'groups' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterInstallableRhsaCount] Filter
     * @param {string} [filterInstallableRhbaCount] Filter
     * @param {string} [filterInstallableRheaCount] Filter
     * @param {string} [filterInstallableOtherCount] Filter
     * @param {string} [filterApplicableRhsaCount] Filter
     * @param {string} [filterApplicableRhbaCount] Filter
     * @param {string} [filterApplicableRheaCount] Filter
     * @param {string} [filterApplicableOtherCount] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterPackagesInstalled] Filter
     * @param {string} [filterPackagesInstallable] Filter
     * @param {string} [filterPackagesApplicable] Filter
     * @param {string} [filterStaleTimestamp] Filter
     * @param {string} [filterStaleWarningTimestamp] Filter
     * @param {string} [filterCulledTimestamp] Filter
     * @param {string} [filterCreated] Filter
     * @param {string} [filterBaselineName] Filter
     * @param {string} [filterSatelliteManaged] Filter
     * @param {string} [filterBuiltPkgcache] Filter
     * @param {string} [filterArch] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {string} [filterOsname] Filter OS name
     * @param {string} [filterOsmajor] Filter OS major version
     * @param {string} [filterOsminor] Filter OS minor version
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSystems(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'groups' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listSystems(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterSatelliteManaged, filterBuiltPkgcache, filterArch, filterOs, filterOsname, filterOsmajor, filterOsminor, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all my systems
     * @summary Show me all my systems
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'satellite_managed' | 'built_pkgcache'} [sort] Sort field
     * @param {string} [search] Find matching text
     * @param {string} [filterId] Filter
     * @param {string} [filterDisplayName] Filter
     * @param {string} [filterLastEvaluation] Filter
     * @param {string} [filterLastUpload] Filter
     * @param {string} [filterRhsaCount] Filter
     * @param {string} [filterRhbaCount] Filter
     * @param {string} [filterRheaCount] Filter
     * @param {string} [filterOtherCount] Filter
     * @param {string} [filterInstallableRhsaCount] Filter
     * @param {string} [filterInstallableRhbaCount] Filter
     * @param {string} [filterInstallableRheaCount] Filter
     * @param {string} [filterInstallableOtherCount] Filter
     * @param {string} [filterApplicableRhsaCount] Filter
     * @param {string} [filterApplicableRhbaCount] Filter
     * @param {string} [filterApplicableRheaCount] Filter
     * @param {string} [filterApplicableOtherCount] Filter
     * @param {string} [filterStale] Filter
     * @param {string} [filterPackagesInstalled] Filter
     * @param {string} [filterPackagesInstallable] Filter
     * @param {string} [filterPackagesApplicable] Filter
     * @param {string} [filterStaleTimestamp] Filter
     * @param {string} [filterStaleWarningTimestamp] Filter
     * @param {string} [filterCulledTimestamp] Filter
     * @param {string} [filterCreated] Filter
     * @param {string} [filterBaselineName] Filter
     * @param {string} [filterOs] Filter OS version
     * @param {string} [filterOsname] Filter OS name
     * @param {string} [filterOsmajor] Filter OS major version
     * @param {string} [filterOsminor] Filter OS minor version
     * @param {string} [filterSatelliteManaged] Filter
     * @param {string} [filterBuiltPkgcache] Filter
     * @param {string} [filterArch] Filter
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSystemsIds(limit?: number, offset?: number, sort?: 'id' | 'display_name' | 'last_upload' | 'rhsa_count' | 'rhba_count' | 'rhea_count' | 'other_count' | 'stale' | 'packages_installed' | 'baseline_name' | 'satellite_managed' | 'built_pkgcache', search?: string, filterId?: string, filterDisplayName?: string, filterLastEvaluation?: string, filterLastUpload?: string, filterRhsaCount?: string, filterRhbaCount?: string, filterRheaCount?: string, filterOtherCount?: string, filterInstallableRhsaCount?: string, filterInstallableRhbaCount?: string, filterInstallableRheaCount?: string, filterInstallableOtherCount?: string, filterApplicableRhsaCount?: string, filterApplicableRhbaCount?: string, filterApplicableRheaCount?: string, filterApplicableOtherCount?: string, filterStale?: string, filterPackagesInstalled?: string, filterPackagesInstallable?: string, filterPackagesApplicable?: string, filterStaleTimestamp?: string, filterStaleWarningTimestamp?: string, filterCulledTimestamp?: string, filterCreated?: string, filterBaselineName?: string, filterOs?: string, filterOsname?: string, filterOsmajor?: string, filterOsminor?: string, filterSatelliteManaged?: string, filterBuiltPkgcache?: string, filterArch?: string, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).listSystemsIds(limit, offset, sort, search, filterId, filterDisplayName, filterLastEvaluation, filterLastUpload, filterRhsaCount, filterRhbaCount, filterRheaCount, filterOtherCount, filterInstallableRhsaCount, filterInstallableRhbaCount, filterInstallableRheaCount, filterInstallableOtherCount, filterApplicableRhsaCount, filterApplicableRhbaCount, filterApplicableRheaCount, filterApplicableOtherCount, filterStale, filterPackagesInstalled, filterPackagesInstallable, filterPackagesApplicable, filterStaleTimestamp, filterStaleWarningTimestamp, filterCulledTimestamp, filterCreated, filterBaselineName, filterOs, filterOsname, filterOsmajor, filterOsminor, filterSatelliteManaged, filterBuiltPkgcache, filterArch, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all my systems which have a package installed
     * @summary Show me all my systems which have a package installed
     * @param {string} packageName Package name
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
     * @param {boolean} [filterUpdatable] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public packageSystems(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, filterUpdatable?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).packageSystems(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, filterUpdatable, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all my systems which have a package installed
     * @summary Show me all my systems which have a package installed
     * @param {string} packageName Package name
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {string} [filterSatelliteManaged] Filter systems managed by satellite
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public packageSystemsIds(packageName: string, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, filterSatelliteManaged?: string, options?: any) {
        return DefaultApiFp(this.configuration).packageSystemsIds(packageName, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, filterSatelliteManaged, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me all package versions installed on some system
     * @summary Show me all package versions installed on some system
     * @param {string} packageName Package name
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public packageVersions(packageName: string, limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).packageVersions(packageName, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove systems from baseline
     * @summary Remove systems from baseline
     * @param {ControllersBaselineSystemsRemoveRequest} body Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public removeBaselineSystems(body: ControllersBaselineSystemsRemoveRequest, options?: any) {
        return DefaultApiFp(this.configuration).removeBaselineSystems(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me details about a system packages by given inventory id
     * @summary Show me details about a system packages by given inventory id
     * @param {string} inventoryId Inventory ID
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {string} [search] Find matching text
     * @param {string} [filterName] Filter
     * @param {string} [filterDescription] Filter
     * @param {string} [filterEvra] Filter
     * @param {string} [filterSummary] Filter
     * @param {boolean} [filterUpdatable] Filter
     * @param {string} [filterUpdateStatus] Filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public systemPackages(inventoryId: string, limit?: number, offset?: number, search?: string, filterName?: string, filterDescription?: string, filterEvra?: string, filterSummary?: string, filterUpdatable?: boolean, filterUpdateStatus?: string, options?: any) {
        return DefaultApiFp(this.configuration).systemPackages(inventoryId, limit, offset, search, filterName, filterDescription, filterEvra, filterSummary, filterUpdatable, filterUpdateStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me system\'s json request for VMaaS
     * @summary Show me system\'s json request for VMaaS
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public systemVmaasJson(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).systemVmaasJson(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show me system\'s yum_updates (client side evaluation data)
     * @summary Show me system\'s yum_updates (client side evaluation data)
     * @param {string} inventoryId Inventory ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public systemYumUpdates(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).systemYumUpdates(inventoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a baseline for my set of systems. System cannot be satellite managed.
     * @summary Update a baseline for my set of systems
     * @param {number} baselineId Baseline ID
     * @param {ControllersUpdateBaselineRequest} body Request body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBaseline(baselineId: number, body: ControllersUpdateBaselineRequest, options?: any) {
        return DefaultApiFp(this.configuration).updateBaseline(baselineId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * View advisory-system pairs for selected systems and installable advisories
     * @summary View advisory-system pairs for selected systems and installable advisories
     * @param {ControllersSystemsAdvisoriesRequest} body Request body
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewAdvisoriesSystems(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).viewAdvisoriesSystems(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * View system-advisory pairs for selected systems and installable advisories
     * @summary View system-advisory pairs for selected systems and installable advisories
     * @param {ControllersSystemsAdvisoriesRequest} body Request body
     * @param {number} [limit] Limit for paging
     * @param {number} [offset] Offset for paging
     * @param {Array<string>} [tags] Tag filter
     * @param {Array<string>} [filterGroupName] Filter systems by inventory groups
     * @param {string} [filterSystemProfileSapSystem] Filter only SAP systems
     * @param {Array<string>} [filterSystemProfileSapSids] Filter systems by their SAP SIDs
     * @param {string} [filterSystemProfileAnsible] Filter systems by ansible
     * @param {string} [filterSystemProfileAnsibleControllerVersion] Filter systems by ansible version
     * @param {string} [filterSystemProfileMssql] Filter systems by mssql version
     * @param {string} [filterSystemProfileMssqlVersion] Filter systems by mssql version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public viewSystemsAdvisories(body: ControllersSystemsAdvisoriesRequest, limit?: number, offset?: number, tags?: Array<string>, filterGroupName?: Array<string>, filterSystemProfileSapSystem?: string, filterSystemProfileSapSids?: Array<string>, filterSystemProfileAnsible?: string, filterSystemProfileAnsibleControllerVersion?: string, filterSystemProfileMssql?: string, filterSystemProfileMssqlVersion?: string, options?: any) {
        return DefaultApiFp(this.configuration).viewSystemsAdvisories(body, limit, offset, tags, filterGroupName, filterSystemProfileSapSystem, filterSystemProfileSapSids, filterSystemProfileAnsible, filterSystemProfileAnsibleControllerVersion, filterSystemProfileMssql, filterSystemProfileMssqlVersion, options).then((request) => request(this.axios, this.basePath));
    }

}


