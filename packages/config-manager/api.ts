// tslint:disable
/**
 * Config manager
 * Config manager service
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AccountState
 */
export interface AccountState {
    /**
     *
     * @type {string}
     * @memberof AccountState
     */
    account?: string;
    /**
     *
     * @type {State}
     * @memberof AccountState
     */
    state?: State;
    /**
     *
     * @type {string}
     * @memberof AccountState
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof AccountState
     */
    label?: string;
}
/**
 *
 * @export
 * @interface State
 */
export interface State {
    /**
     *
     * @type {string}
     * @memberof State
     */
    insights: StateInsightsEnum;
    /**
     *
     * @type {string}
     * @memberof State
     */
    compliance_openscap: StateComplianceOpenscapEnum;
    /**
     *
     * @type {string}
     * @memberof State
     */
    remediations: StateRemediationsEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum StateInsightsEnum {
    Enabled = 'enabled',
    Disabled = 'disabled'
}
/**
    * @export
    * @enum {string}
    */
export enum StateComplianceOpenscapEnum {
    Enabled = 'enabled',
    Disabled = 'disabled'
}
/**
    * @export
    * @enum {string}
    */
export enum StateRemediationsEnum {
    Enabled = 'enabled',
    Disabled = 'disabled'
}

/**
 *
 * @export
 * @interface StateArchive
 */
export interface StateArchive {
    /**
     *
     * @type {string}
     * @memberof StateArchive
     */
    account?: string;
    /**
     *
     * @type {string}
     * @memberof StateArchive
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof StateArchive
     */
    label?: string;
    /**
     *
     * @type {string}
     * @memberof StateArchive
     */
    initiator?: string;
    /**
     *
     * @type {string}
     * @memberof StateArchive
     */
    created_at?: string;
    /**
     *
     * @type {State}
     * @memberof StateArchive
     */
    state?: State;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get the current state for requesting account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentState: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/states/current`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get ansible playbook for current state configuration
         * @param {string} id state archive identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybookById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPlaybookById.');
            }
            const localVarPath = `/states/{id}/playbook`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get single state change for requesting account
         * @param {string} id state archive identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getStateById.');
            }
            const localVarPath = `/states/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get archive of state changes for requesting account
         * @param {number} [limit] Maximum number of results to return
         * @param {number} [offset] Indicates the starting position of the query relative to the complete set of items that match the query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStates: async (limit?: number, offset?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/states`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update and roll out configuration state for requesting account
         * @param {State} state State map that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStates: async (state: State, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new RequiredError('state','Required parameter state was null or undefined when calling updateStates.');
            }
            const localVarPath = `/states`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof state !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(state !== undefined ? state : {}) : (state || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         *
         * @summary Get the current state for requesting account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentState(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountState>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCurrentState(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get ansible playbook for current state configuration
         * @param {string} id state archive identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaybookById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getPlaybookById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get single state change for requesting account
         * @param {string} id state archive identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStateById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StateArchive>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getStateById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get archive of state changes for requesting account
         * @param {number} [limit] Maximum number of results to return
         * @param {number} [offset] Indicates the starting position of the query relative to the complete set of items that match the query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStates(limit?: number, offset?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<StateArchive>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getStates(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update and roll out configuration state for requesting account
         * @param {State} state State map that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateStates(state: State, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountState>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateStates(state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *
         * @summary Get the current state for requesting account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentState(options?: any): AxiosPromise<AccountState> {
            return DefaultApiFp(configuration).getCurrentState(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get ansible playbook for current state configuration
         * @param {string} id state archive identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybookById(id: string, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).getPlaybookById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get single state change for requesting account
         * @param {string} id state archive identifier
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateById(id: string, options?: any): AxiosPromise<StateArchive> {
            return DefaultApiFp(configuration).getStateById(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get archive of state changes for requesting account
         * @param {number} [limit] Maximum number of results to return
         * @param {number} [offset] Indicates the starting position of the query relative to the complete set of items that match the query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStates(limit?: number, offset?: number, options?: any): AxiosPromise<Array<StateArchive>> {
            return DefaultApiFp(configuration).getStates(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update and roll out configuration state for requesting account
         * @param {State} state State map that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateStates(state: State, options?: any): AxiosPromise<AccountState> {
            return DefaultApiFp(configuration).updateStates(state, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @summary Get the current state for requesting account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCurrentState(options?: any) {
        return DefaultApiFp(this.configuration).getCurrentState(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get ansible playbook for current state configuration
     * @param {string} id state archive identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPlaybookById(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getPlaybookById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get single state change for requesting account
     * @param {string} id state archive identifier
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStateById(id: string, options?: any) {
        return DefaultApiFp(this.configuration).getStateById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get archive of state changes for requesting account
     * @param {number} [limit] Maximum number of results to return
     * @param {number} [offset] Indicates the starting position of the query relative to the complete set of items that match the query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStates(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).getStates(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update and roll out configuration state for requesting account
     * @param {State} state State map that needs to be updated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateStates(state: State, options?: any) {
        return DefaultApiFp(this.configuration).updateStates(state, options).then((request) => request(this.axios, this.basePath));
    }

}


