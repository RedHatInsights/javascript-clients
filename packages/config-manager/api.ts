/* tslint:disable */
/* eslint-disable */
/**
 * config-manager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface CreateProfileRequest
 */
export interface CreateProfileRequest {
    /**
     * Remote host configuration enabled state
     * @type {boolean}
     * @memberof CreateProfileRequest
     */
    'active': boolean;
    /**
     * Remote configuration status for running Compliance data collection
     * @type {boolean}
     * @memberof CreateProfileRequest
     */
    'compliance': boolean;
    /**
     * Remote configuration status for running Insights data collection
     * @type {boolean}
     * @memberof CreateProfileRequest
     */
    'insights': boolean;
    /**
     * Remote configuration status for running Remediation playbooks
     * @type {boolean}
     * @memberof CreateProfileRequest
     */
    'remediations': boolean;
}
/**
 *
 * @export
 * @interface GetProfiles200Response
 */
export interface GetProfiles200Response {
    /**
     *
     * @type {number}
     * @memberof GetProfiles200Response
     */
    'total': number;
    /**
     *
     * @type {number}
     * @memberof GetProfiles200Response
     */
    'count': number;
    /**
     *
     * @type {number}
     * @memberof GetProfiles200Response
     */
    'limit': number;
    /**
     *
     * @type {number}
     * @memberof GetProfiles200Response
     */
    'offset': number;
    /**
     *
     * @type {Array<Profile>}
     * @memberof GetProfiles200Response
     */
    'results': Array<Profile>;
}
/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * Profile unique identity value
     * @type {string}
     * @memberof Profile
     */
    'id'?: string;
    /**
     * Red Hat account number
     * @type {string}
     * @memberof Profile
     */
    'account_id'?: string;
    /**
     * Red Hat organization identity value
     * @type {string}
     * @memberof Profile
     */
    'org_id'?: string;
    /**
     * Time of profile creation
     * @type {string}
     * @memberof Profile
     */
    'created_at'?: string;
    /**
     * Remote host configuration enabled state
     * @type {boolean}
     * @memberof Profile
     */
    'active'?: boolean;
    /**
     * Remote configuration status for running Compliance data collection
     * @type {boolean}
     * @memberof Profile
     */
    'compliance'?: boolean;
    /**
     * Remote configuration status for running Insights data collection
     * @type {boolean}
     * @memberof Profile
     */
    'insights'?: boolean;
    /**
     * Remote configuration status for running Remediation playbooks
     * @type {boolean}
     * @memberof Profile
     */
    'remediations'?: boolean;
}

/**
 * CreateProfileApi - axios parameter creator
 * @export
 */
export const CreateProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create and optionally activate a new profile.
         * @summary Create a new profile
         * @param {CreateProfileRequest} createProfileRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile: async (createProfileRequest: CreateProfileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProfileRequest' is not null or undefined
            assertParamExists('createProfile', 'createProfileRequest', createProfileRequest)
            const localVarPath = `/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProfileRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreateProfileApi - functional programming interface
 * @export
 */
export const CreateProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreateProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * Create and optionally activate a new profile.
         * @summary Create a new profile
         * @param {CreateProfileRequest} createProfileRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProfile(createProfileRequest: CreateProfileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProfile(createProfileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreateProfileApi - factory interface
 * @export
 */
export const CreateProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreateProfileApiFp(configuration)
    return {
        /**
         * Create and optionally activate a new profile.
         * @summary Create a new profile
         * @param {CreateProfileRequest} createProfileRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProfile(createProfileRequest: CreateProfileRequest, options?: any): AxiosPromise<Profile> {
            return localVarFp.createProfile(createProfileRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreateProfileApi - object-oriented interface
 * @export
 * @class CreateProfileApi
 * @extends {BaseAPI}
 */
export class CreateProfileApi extends BaseAPI {
    /**
     * Create and optionally activate a new profile.
     * @summary Create a new profile
     * @param {CreateProfileRequest} createProfileRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateProfileApi
     */
    public createProfile(createProfileRequest: CreateProfileRequest, options?: AxiosRequestConfig) {
        return CreateProfileApiFp(this.configuration).createProfile(createProfileRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetPlaybookApi - axios parameter creator
 * @export
 */
export const GetPlaybookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Constructs and returns a Ansible playbook suitable to configure a host for the requested profile.
         * @summary Retrieve an Ansible playbook for the requested profile
         * @param {string} profileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybook: async (profileId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('getPlaybook', 'profileId', profileId)
            const localVarPath = `/playbooks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (profileId !== undefined) {
                localVarQueryParameter['profile_id'] = profileId;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetPlaybookApi - functional programming interface
 * @export
 */
export const GetPlaybookApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetPlaybookApiAxiosParamCreator(configuration)
    return {
        /**
         * Constructs and returns a Ansible playbook suitable to configure a host for the requested profile.
         * @summary Retrieve an Ansible playbook for the requested profile
         * @param {string} profileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlaybook(profileId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlaybook(profileId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetPlaybookApi - factory interface
 * @export
 */
export const GetPlaybookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetPlaybookApiFp(configuration)
    return {
        /**
         * Constructs and returns a Ansible playbook suitable to configure a host for the requested profile.
         * @summary Retrieve an Ansible playbook for the requested profile
         * @param {string} profileId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlaybook(profileId: string, options?: any): AxiosPromise<object> {
            return localVarFp.getPlaybook(profileId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetPlaybookApi - object-oriented interface
 * @export
 * @class GetPlaybookApi
 * @extends {BaseAPI}
 */
export class GetPlaybookApi extends BaseAPI {
    /**
     * Constructs and returns a Ansible playbook suitable to configure a host for the requested profile.
     * @summary Retrieve an Ansible playbook for the requested profile
     * @param {string} profileId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetPlaybookApi
     */
    public getPlaybook(profileId: string, options?: AxiosRequestConfig) {
        return GetPlaybookApiFp(this.configuration).getPlaybook(profileId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetProfileApi - axios parameter creator
 * @export
 */
export const GetProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a specific profile identified by the \'id\' path parameter for the identified account. If the special value \"current\" is used for the \'id\' path parameter, the most recent profile is retrieved instead.
         * @summary Get a specific profile
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getProfile', 'id', id)
            const localVarPath = `/profiles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetProfileApi - functional programming interface
 * @export
 */
export const GetProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a specific profile identified by the \'id\' path parameter for the identified account. If the special value \"current\" is used for the \'id\' path parameter, the most recent profile is retrieved instead.
         * @summary Get a specific profile
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetProfileApi - factory interface
 * @export
 */
export const GetProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetProfileApiFp(configuration)
    return {
        /**
         * Retrieve a specific profile identified by the \'id\' path parameter for the identified account. If the special value \"current\" is used for the \'id\' path parameter, the most recent profile is retrieved instead.
         * @summary Get a specific profile
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(id: string, options?: any): AxiosPromise<Profile> {
            return localVarFp.getProfile(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetProfileApi - object-oriented interface
 * @export
 * @class GetProfileApi
 * @extends {BaseAPI}
 */
export class GetProfileApi extends BaseAPI {
    /**
     * Retrieve a specific profile identified by the \'id\' path parameter for the identified account. If the special value \"current\" is used for the \'id\' path parameter, the most recent profile is retrieved instead.
     * @summary Get a specific profile
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetProfileApi
     */
    public getProfile(id: string, options?: AxiosRequestConfig) {
        return GetProfileApiFp(this.configuration).getProfile(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetProfilesApi - axios parameter creator
 * @export
 */
export const GetProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a paginated array of profiles for the identified account. The URL query parameters \'limit\' and \'offset\' can be used to paginate the results. The default value of \'limit\' is 50. The default value of \'offset\' is 0.
         * @summary Get a list of all profiles
         * @param {GetProfilesSortByEnum} [sortBy]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfiles: async (sortBy?: GetProfilesSortByEnum, limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetProfilesApi - functional programming interface
 * @export
 */
export const GetProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a paginated array of profiles for the identified account. The URL query parameters \'limit\' and \'offset\' can be used to paginate the results. The default value of \'limit\' is 50. The default value of \'offset\' is 0.
         * @summary Get a list of all profiles
         * @param {GetProfilesSortByEnum} [sortBy]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfiles(sortBy?: GetProfilesSortByEnum, limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetProfiles200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfiles(sortBy, limit, offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetProfilesApi - factory interface
 * @export
 */
export const GetProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetProfilesApiFp(configuration)
    return {
        /**
         * Retrieve a paginated array of profiles for the identified account. The URL query parameters \'limit\' and \'offset\' can be used to paginate the results. The default value of \'limit\' is 50. The default value of \'offset\' is 0.
         * @summary Get a list of all profiles
         * @param {GetProfilesSortByEnum} [sortBy]
         * @param {number} [limit]
         * @param {number} [offset]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfiles(sortBy?: GetProfilesSortByEnum, limit?: number, offset?: number, options?: any): AxiosPromise<GetProfiles200Response> {
            return localVarFp.getProfiles(sortBy, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetProfilesApi - object-oriented interface
 * @export
 * @class GetProfilesApi
 * @extends {BaseAPI}
 */
export class GetProfilesApi extends BaseAPI {
    /**
     * Retrieve a paginated array of profiles for the identified account. The URL query parameters \'limit\' and \'offset\' can be used to paginate the results. The default value of \'limit\' is 50. The default value of \'offset\' is 0.
     * @summary Get a list of all profiles
     * @param {GetProfilesSortByEnum} [sortBy]
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetProfilesApi
     */
    public getProfiles(sortBy?: GetProfilesSortByEnum, limit?: number, offset?: number, options?: AxiosRequestConfig) {
        return GetProfilesApiFp(this.configuration).getProfiles(sortBy, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetProfilesSortByEnum = {
    At: 'created_at',
    Atasc: 'created_at:asc',
    Atdesc: 'created_at:desc'
} as const;
export type GetProfilesSortByEnum = typeof GetProfilesSortByEnum[keyof typeof GetProfilesSortByEnum];


