// tslint:disable
/**
 * Source
 * Source
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template condition
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * ID of the resource
     * @type {string}
     * @memberof Application
     */
    application_type_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    availability_status?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    availability_status_error?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    created_at?: string;
    /**
     * 
     * @type {object}
     * @memberof Application
     */
    extra?: object;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Application
     */
    id?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Application
     */
    source_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    tenant?: string;
    /**
     * 
     * @type {string}
     * @memberof Application
     */
    updated_at?: string;
}
/**
 * 
 * @export
 * @interface ApplicationType
 */
export interface ApplicationType {
    /**
     * 
     * @type {string}
     * @memberof ApplicationType
     */
    created_at?: string;
    /**
     * 
     * @type {object}
     * @memberof ApplicationType
     */
    dependent_applications?: object;
    /**
     * 
     * @type {string}
     * @memberof ApplicationType
     */
    display_name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ApplicationType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationType
     */
    name?: string;
    /**
     * 
     * @type {object}
     * @memberof ApplicationType
     */
    supported_authentication_types?: object;
    /**
     * 
     * @type {object}
     * @memberof ApplicationType
     */
    supported_source_types?: object;
    /**
     * 
     * @type {string}
     * @memberof ApplicationType
     */
    updated_at?: string;
}
/**
 * 
 * @export
 * @interface ApplicationTypesCollection
 */
export interface ApplicationTypesCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof ApplicationTypesCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof ApplicationTypesCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<ApplicationType>}
     * @memberof ApplicationTypesCollection
     */
    data?: Array<ApplicationType>;
}
/**
 * 
 * @export
 * @interface ApplicationsCollection
 */
export interface ApplicationsCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof ApplicationsCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof ApplicationsCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<Application>}
     * @memberof ApplicationsCollection
     */
    data?: Array<Application>;
}
/**
 * 
 * @export
 * @interface Authentication
 */
export interface Authentication {
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    authtype?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    availability_status?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    availability_status_error?: string;
    /**
     * 
     * @type {AuthenticationExtra}
     * @memberof Authentication
     */
    extra?: AuthenticationExtra;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Authentication
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    password?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Authentication
     */
    resource_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    resource_type?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Authentication
     */
    source_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    tenant?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    username?: string;
}
/**
 * 
 * @export
 * @interface AuthenticationExtra
 */
export interface AuthenticationExtra {
    /**
     * 
     * @type {AuthenticationExtraAzure}
     * @memberof AuthenticationExtra
     */
    azure?: AuthenticationExtraAzure;
}
/**
 * 
 * @export
 * @interface AuthenticationExtraAzure
 */
export interface AuthenticationExtraAzure {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationExtraAzure
     */
    tenant_id?: string;
}
/**
 * 
 * @export
 * @interface AuthenticationsCollection
 */
export interface AuthenticationsCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof AuthenticationsCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof AuthenticationsCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<Authentication>}
     * @memberof AuthenticationsCollection
     */
    data?: Array<Authentication>;
}
/**
 * 
 * @export
 * @interface CollectionLink
 */
export interface CollectionLinks {
    /**
     * 
     * @type {string}
     * @memberof CollectionLink
     */
    first?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionLink
     */
    last?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionLink
     */
    next?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionLink
     */
    prev?: string;
}
/**
 * 
 * @export
 * @interface CollectionMetadata
 */
export interface CollectionMetadata {
    /**
     * 
     * @type {number}
     * @memberof CollectionMetadata
     */
    count?: number;
    /**
     * 
     * @type {number}
     * @memberof CollectionMetadata
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof CollectionMetadata
     */
    offset?: number;
}
/**
 * 
 * @export
 * @interface Endpoint
 */
export interface Endpoint {
    /**
     * 
     * @type {string}
     * @memberof Endpoint
     */
    availability_status?: string;
    /**
     * 
     * @type {string}
     * @memberof Endpoint
     */
    availability_status_error?: string;
    /**
     * Optional X.509 Certificate Authority
     * @type {string}
     * @memberof Endpoint
     */
    certificate_authority?: string;
    /**
     * 
     * @type {string}
     * @memberof Endpoint
     */
    created_at?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Endpoint
     */
    _default?: boolean;
    /**
     * URI host component
     * @type {string}
     * @memberof Endpoint
     */
    host?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Endpoint
     */
    id?: string;
    /**
     * URI path component
     * @type {string}
     * @memberof Endpoint
     */
    path?: string;
    /**
     * URI port component
     * @type {number}
     * @memberof Endpoint
     */
    port?: number;
    /**
     * Identifier of a receptor node
     * @type {string}
     * @memberof Endpoint
     */
    receptor_node?: string;
    /**
     * 
     * @type {string}
     * @memberof Endpoint
     */
    role?: string;
    /**
     * URI scheme component
     * @type {string}
     * @memberof Endpoint
     */
    scheme?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Endpoint
     */
    source_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Endpoint
     */
    tenant?: string;
    /**
     * 
     * @type {string}
     * @memberof Endpoint
     */
    updated_at?: string;
    /**
     * Should SSL be verified
     * @type {boolean}
     * @memberof Endpoint
     */
    verify_ssl?: boolean;
}
/**
 * 
 * @export
 * @interface EndpointsCollection
 */
export interface EndpointsCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof EndpointsCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof EndpointsCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<Endpoint>}
     * @memberof EndpointsCollection
     */
    data?: Array<Endpoint>;
}
/**
 * 
 * @export
 * @interface ErrorNotFound
 */
export interface ErrorNotFound {
    /**
     * 
     * @type {Array<ErrorNotFoundErrors>}
     * @memberof ErrorNotFound
     */
    errors?: Array<ErrorNotFoundErrors>;
}
/**
 * 
 * @export
 * @interface ErrorNotFoundError
 */
export interface ErrorNotFoundErrors {
    /**
     * 
     * @type {number}
     * @memberof ErrorNotFoundError
     */
    status?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorNotFoundError
     */
    detail?: string;
}
/**
 * 
 * @export
 * @interface GraphQLRequest
 */
export interface GraphQLRequest {
    /**
     * The GraphQL query
     * @type {string}
     * @memberof GraphQLRequest
     */
    query: string;
    /**
     * If the Query contains several named operations, the operationName controls which one should be executed
     * @type {string}
     * @memberof GraphQLRequest
     */
    operationName?: string;
    /**
     * Optional Query variable
     * @type {object}
     * @memberof GraphQLRequest
     */
    variables?: object | null;
}
/**
 * 
 * @export
 * @interface GraphQLResponse
 */
export interface GraphQLResponse {
    /**
     * Results from the GraphQL query
     * @type {object}
     * @memberof GraphQLResponse
     */
    data?: object;
    /**
     * Errors resulting from the GraphQL query
     * @type {Array<object>}
     * @memberof GraphQLResponse
     */
    errors?: Array<object>;
}
/**
 * 
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    availability_status?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    created_at?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Source
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    imported?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    source_ref?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Source
     */
    source_type_id?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    tenant?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    uid?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    updated_at?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    version?: string;
}
/**
 * 
 * @export
 * @interface SourceType
 */
export interface SourceType {
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    icon_url?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SourceType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    product_name?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    schema?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    updated_at?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    vendor?: string;
}
/**
 * 
 * @export
 * @interface SourceTypesCollection
 */
export interface SourceTypesCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof SourceTypesCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof SourceTypesCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<SourceType>}
     * @memberof SourceTypesCollection
     */
    data?: Array<SourceType>;
}
/**
 * 
 * @export
 * @interface SourcesCollection
 */
export interface SourcesCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof SourcesCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof SourcesCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<Source>}
     * @memberof SourcesCollection
     */
    data?: Array<Source>;
}
/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    external_tenant?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Checks Availability of a Source
         * @summary Checks Availability of a Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAvailabilitySource: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling checkAvailabilitySource.');
            }
            const localVarPath = `/sources/{id}/check_availability`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Application object
         * @summary Create a new Application
         * @param {Application} application Application attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication: async (application: Application, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'application' is not null or undefined
            if (application === null || application === undefined) {
                throw new RequiredError('application','Required parameter application was null or undefined when calling createApplication.');
            }
            const localVarPath = `/applications`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof application !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(application !== undefined ? application : {}) : (application || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Authentication object
         * @summary Create a new Authentication
         * @param {Authentication} authentication Authentication attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthentication: async (authentication: Authentication, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authentication' is not null or undefined
            if (authentication === null || authentication === undefined) {
                throw new RequiredError('authentication','Required parameter authentication was null or undefined when calling createAuthentication.');
            }
            const localVarPath = `/authentications`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authentication !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authentication !== undefined ? authentication : {}) : (authentication || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Endpoint object
         * @summary Create a new Endpoint
         * @param {Endpoint} endpoint Endpoint attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEndpoint: async (endpoint: Endpoint, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling createEndpoint.');
            }
            const localVarPath = `/endpoints`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof endpoint !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(endpoint !== undefined ? endpoint : {}) : (endpoint || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Source object
         * @summary Create a new Source
         * @param {Source} source Source attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSource: async (source: Source, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'source' is not null or undefined
            if (source === null || source === undefined) {
                throw new RequiredError('source','Required parameter source was null or undefined when calling createSource.');
            }
            const localVarPath = `/sources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof source !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(source !== undefined ? source : {}) : (source || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Application object
         * @summary Delete an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteApplication.');
            }
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Authentication object
         * @summary Delete an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthentication: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteAuthentication.');
            }
            const localVarPath = `/authentications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Endpoint object
         * @summary Delete an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEndpoint: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteEndpoint.');
            }
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Source object
         * @summary Delete an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSource: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSource.');
            }
            const localVarPath = `/sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentation: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/openapi.json`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Source object
         * @summary List Sources for ApplicationType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationTypeSources: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listApplicationTypeSources.');
            }
            const localVarPath = `/application_types/{id}/sources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ApplicationType object
         * @summary List ApplicationType
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationTypes: async (limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/application_types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Application object
         * @summary List Application
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications: async (limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/applications`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Authentication object
         * @summary List Authentication
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthentications: async (limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/authentications`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Authentication object
         * @summary List Authentications for Endpoint
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpointAuthentications: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listEndpointAuthentications.');
            }
            const localVarPath = `/endpoints/{id}/authentications`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Endpoint object
         * @summary List Endpoint
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpoints: async (limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/endpoints`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ApplicationType object
         * @summary List ApplicationTypes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceApplicationTypes: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceApplicationTypes.');
            }
            const localVarPath = `/sources/{id}/application_types`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Application object
         * @summary List Applications for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceApplications: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceApplications.');
            }
            const localVarPath = `/sources/{id}/applications`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Authentication object
         * @summary List Authentications for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceAuthentications: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceAuthentications.');
            }
            const localVarPath = `/sources/{id}/authentications`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Endpoint object
         * @summary List Endpoints for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceEndpoints: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceEndpoints.');
            }
            const localVarPath = `/sources/{id}/endpoints`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Source object
         * @summary List Sources for SourceType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTypeSources: async (id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceTypeSources.');
            }
            const localVarPath = `/source_types/{id}/sources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SourceType object
         * @summary List SourceType
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTypes: async (limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/source_types`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Source object
         * @summary List Source
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources: async (limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/sources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs a GraphQL Query
         * @summary Perform a GraphQL Query
         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphQL: async (graphQLRequest: GraphQLRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'graphQLRequest' is not null or undefined
            if (graphQLRequest === null || graphQLRequest === undefined) {
                throw new RequiredError('graphQLRequest','Required parameter graphQLRequest was null or undefined when calling postGraphQL.');
            }
            const localVarPath = `/graphql`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof graphQLRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(graphQLRequest !== undefined ? graphQLRequest : {}) : (graphQLRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Application object
         * @summary Show an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showApplication: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showApplication.');
            }
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ApplicationType object
         * @summary Show an existing ApplicationType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showApplicationType: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showApplicationType.');
            }
            const localVarPath = `/application_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Authentication object
         * @summary Show an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAuthentication: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showAuthentication.');
            }
            const localVarPath = `/authentications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Endpoint object
         * @summary Show an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showEndpoint: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showEndpoint.');
            }
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSource: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showSource.');
            }
            const localVarPath = `/sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a SourceType object
         * @summary Show an existing SourceType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSourceType: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showSourceType.');
            }
            const localVarPath = `/source_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Application object
         * @summary Update an existing Application
         * @param {string} id ID of the resource
         * @param {Application} application Application attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication: async (id: string, application: Application, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateApplication.');
            }
            // verify required parameter 'application' is not null or undefined
            if (application === null || application === undefined) {
                throw new RequiredError('application','Required parameter application was null or undefined when calling updateApplication.');
            }
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof application !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(application !== undefined ? application : {}) : (application || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Authentication object
         * @summary Update an existing Authentication
         * @param {string} id ID of the resource
         * @param {Authentication} authentication Authentication attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthentication: async (id: string, authentication: Authentication, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateAuthentication.');
            }
            // verify required parameter 'authentication' is not null or undefined
            if (authentication === null || authentication === undefined) {
                throw new RequiredError('authentication','Required parameter authentication was null or undefined when calling updateAuthentication.');
            }
            const localVarPath = `/authentications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof authentication !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authentication !== undefined ? authentication : {}) : (authentication || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Endpoint object
         * @summary Update an existing Endpoint
         * @param {string} id ID of the resource
         * @param {Endpoint} endpoint Endpoint attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndpoint: async (id: string, endpoint: Endpoint, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateEndpoint.');
            }
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling updateEndpoint.');
            }
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof endpoint !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(endpoint !== undefined ? endpoint : {}) : (endpoint || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Source object
         * @summary Update an existing Source
         * @param {string} id ID of the resource
         * @param {Source} source Source attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSource: async (id: string, source: Source, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSource.');
            }
            // verify required parameter 'source' is not null or undefined
            if (source === null || source === undefined) {
                throw new RequiredError('source','Required parameter source was null or undefined when calling updateSource.');
            }
            const localVarPath = `/sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarRequestOptions["auth"] = { username: configuration.username, password: configuration.password };
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof source !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(source !== undefined ? source : {}) : (source || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Checks Availability of a Source
         * @summary Checks Availability of a Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkAvailabilitySource(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).checkAvailabilitySource(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Application object
         * @summary Create a new Application
         * @param {Application} application Application attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApplication(application: Application, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createApplication(application, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Authentication object
         * @summary Create a new Authentication
         * @param {Authentication} authentication Authentication attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthentication(authentication: Authentication, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authentication>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createAuthentication(authentication, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Endpoint object
         * @summary Create a new Endpoint
         * @param {Endpoint} endpoint Endpoint attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEndpoint(endpoint: Endpoint, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Endpoint>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createEndpoint(endpoint, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a Source object
         * @summary Create a new Source
         * @param {Source} source Source attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSource(source: Source, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createSource(source, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Application object
         * @summary Delete an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplication(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteApplication(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Authentication object
         * @summary Delete an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthentication(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteAuthentication(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Endpoint object
         * @summary Delete an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEndpoint(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteEndpoint(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a Source object
         * @summary Delete an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSource(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteSource(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentation(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getDocumentation(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Source object
         * @summary List Sources for ApplicationType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplicationTypeSources(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listApplicationTypeSources(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ApplicationType object
         * @summary List ApplicationType
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplicationTypes(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationTypesCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listApplicationTypes(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Application object
         * @summary List Application
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplications(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationsCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listApplications(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Authentication object
         * @summary List Authentication
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAuthentications(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationsCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listAuthentications(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Authentication object
         * @summary List Authentications for Endpoint
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEndpointAuthentications(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationsCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listEndpointAuthentications(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Endpoint object
         * @summary List Endpoint
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEndpoints(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointsCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listEndpoints(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of ApplicationType object
         * @summary List ApplicationTypes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceApplicationTypes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationTypesCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSourceApplicationTypes(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Application object
         * @summary List Applications for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceApplications(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationsCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSourceApplications(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Authentication object
         * @summary List Authentications for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceAuthentications(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationsCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSourceAuthentications(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Endpoint object
         * @summary List Endpoints for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceEndpoints(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointsCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSourceEndpoints(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Source object
         * @summary List Sources for SourceType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceTypeSources(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSourceTypeSources(id, limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of SourceType object
         * @summary List SourceType
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSourceTypes(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceTypesCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSourceTypes(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns an array of Source object
         * @summary List Source
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSources(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesCollection>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listSources(limit, offset, filter, sortBy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Performs a GraphQL Query
         * @summary Perform a GraphQL Query
         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGraphQL(graphQLRequest: GraphQLRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GraphQLResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postGraphQL(graphQLRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Application object
         * @summary Show an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showApplication(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).showApplication(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a ApplicationType object
         * @summary Show an existing ApplicationType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showApplicationType(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationType>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).showApplicationType(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Authentication object
         * @summary Show an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showAuthentication(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authentication>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).showAuthentication(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Endpoint object
         * @summary Show an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showEndpoint(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Endpoint>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).showEndpoint(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSource(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).showSource(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a SourceType object
         * @summary Show an existing SourceType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showSourceType(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceType>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).showSourceType(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a Application object
         * @summary Update an existing Application
         * @param {string} id ID of the resource
         * @param {Application} application Application attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApplication(id: string, application: Application, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateApplication(id, application, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a Authentication object
         * @summary Update an existing Authentication
         * @param {string} id ID of the resource
         * @param {Authentication} authentication Authentication attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthentication(id: string, authentication: Authentication, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateAuthentication(id, authentication, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a Endpoint object
         * @summary Update an existing Endpoint
         * @param {string} id ID of the resource
         * @param {Endpoint} endpoint Endpoint attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEndpoint(id: string, endpoint: Endpoint, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateEndpoint(id, endpoint, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a Source object
         * @summary Update an existing Source
         * @param {string} id ID of the resource
         * @param {Source} source Source attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSource(id: string, source: Source, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).updateSource(id, source, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Checks Availability of a Source
         * @summary Checks Availability of a Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkAvailabilitySource(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).checkAvailabilitySource(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Application object
         * @summary Create a new Application
         * @param {Application} application Application attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication(application: Application, options?: any): AxiosPromise<Application> {
            return DefaultApiFp(configuration).createApplication(application, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Authentication object
         * @summary Create a new Authentication
         * @param {Authentication} authentication Authentication attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthentication(authentication: Authentication, options?: any): AxiosPromise<Authentication> {
            return DefaultApiFp(configuration).createAuthentication(authentication, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Endpoint object
         * @summary Create a new Endpoint
         * @param {Endpoint} endpoint Endpoint attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEndpoint(endpoint: Endpoint, options?: any): AxiosPromise<Endpoint> {
            return DefaultApiFp(configuration).createEndpoint(endpoint, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a Source object
         * @summary Create a new Source
         * @param {Source} source Source attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSource(source: Source, options?: any): AxiosPromise<Source> {
            return DefaultApiFp(configuration).createSource(source, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Application object
         * @summary Delete an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteApplication(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Authentication object
         * @summary Delete an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthentication(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteAuthentication(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Endpoint object
         * @summary Delete an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEndpoint(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteEndpoint(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a Source object
         * @summary Delete an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSource(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteSource(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentation(options?: any): AxiosPromise<object> {
            return DefaultApiFp(configuration).getDocumentation(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of Source object
         * @summary List Sources for ApplicationType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationTypeSources(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<SourcesCollection> {
            return DefaultApiFp(configuration).listApplicationTypeSources(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of ApplicationType object
         * @summary List ApplicationType
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationTypes(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<ApplicationTypesCollection> {
            return DefaultApiFp(configuration).listApplicationTypes(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of Application object
         * @summary List Application
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<ApplicationsCollection> {
            return DefaultApiFp(configuration).listApplications(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of Authentication object
         * @summary List Authentication
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthentications(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<AuthenticationsCollection> {
            return DefaultApiFp(configuration).listAuthentications(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of Authentication object
         * @summary List Authentications for Endpoint
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpointAuthentications(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<AuthenticationsCollection> {
            return DefaultApiFp(configuration).listEndpointAuthentications(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of Endpoint object
         * @summary List Endpoint
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpoints(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<EndpointsCollection> {
            return DefaultApiFp(configuration).listEndpoints(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of ApplicationType object
         * @summary List ApplicationTypes for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceApplicationTypes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<ApplicationTypesCollection> {
            return DefaultApiFp(configuration).listSourceApplicationTypes(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of Application object
         * @summary List Applications for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceApplications(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<ApplicationsCollection> {
            return DefaultApiFp(configuration).listSourceApplications(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of Authentication object
         * @summary List Authentications for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceAuthentications(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<AuthenticationsCollection> {
            return DefaultApiFp(configuration).listSourceAuthentications(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of Endpoint object
         * @summary List Endpoints for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceEndpoints(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<EndpointsCollection> {
            return DefaultApiFp(configuration).listSourceEndpoints(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of Source object
         * @summary List Sources for SourceType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTypeSources(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<SourcesCollection> {
            return DefaultApiFp(configuration).listSourceTypeSources(id, limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of SourceType object
         * @summary List SourceType
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTypes(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<SourceTypesCollection> {
            return DefaultApiFp(configuration).listSourceTypes(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an array of Source object
         * @summary List Source
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {object} [filter] Filter for querying collections.
         * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any): AxiosPromise<SourcesCollection> {
            return DefaultApiFp(configuration).listSources(limit, offset, filter, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs a GraphQL Query
         * @summary Perform a GraphQL Query
         * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGraphQL(graphQLRequest: GraphQLRequest, options?: any): AxiosPromise<GraphQLResponse> {
            return DefaultApiFp(configuration).postGraphQL(graphQLRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Application object
         * @summary Show an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showApplication(id: string, options?: any): AxiosPromise<Application> {
            return DefaultApiFp(configuration).showApplication(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a ApplicationType object
         * @summary Show an existing ApplicationType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showApplicationType(id: string, options?: any): AxiosPromise<ApplicationType> {
            return DefaultApiFp(configuration).showApplicationType(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Authentication object
         * @summary Show an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAuthentication(id: string, options?: any): AxiosPromise<Authentication> {
            return DefaultApiFp(configuration).showAuthentication(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Endpoint object
         * @summary Show an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showEndpoint(id: string, options?: any): AxiosPromise<Endpoint> {
            return DefaultApiFp(configuration).showEndpoint(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSource(id: string, options?: any): AxiosPromise<Source> {
            return DefaultApiFp(configuration).showSource(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a SourceType object
         * @summary Show an existing SourceType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSourceType(id: string, options?: any): AxiosPromise<SourceType> {
            return DefaultApiFp(configuration).showSourceType(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Application object
         * @summary Update an existing Application
         * @param {string} id ID of the resource
         * @param {Application} application Application attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication(id: string, application: Application, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateApplication(id, application, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Authentication object
         * @summary Update an existing Authentication
         * @param {string} id ID of the resource
         * @param {Authentication} authentication Authentication attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthentication(id: string, authentication: Authentication, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateAuthentication(id, authentication, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Endpoint object
         * @summary Update an existing Endpoint
         * @param {string} id ID of the resource
         * @param {Endpoint} endpoint Endpoint attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndpoint(id: string, endpoint: Endpoint, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateEndpoint(id, endpoint, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a Source object
         * @summary Update an existing Source
         * @param {string} id ID of the resource
         * @param {Source} source Source attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSource(id: string, source: Source, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).updateSource(id, source, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Checks Availability of a Source
     * @summary Checks Availability of a Source
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkAvailabilitySource(id: string, options?: any) {
        return DefaultApiFp(this.configuration).checkAvailabilitySource(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Application object
     * @summary Create a new Application
     * @param {Application} application Application attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createApplication(application: Application, options?: any) {
        return DefaultApiFp(this.configuration).createApplication(application, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Authentication object
     * @summary Create a new Authentication
     * @param {Authentication} authentication Authentication attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAuthentication(authentication: Authentication, options?: any) {
        return DefaultApiFp(this.configuration).createAuthentication(authentication, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Endpoint object
     * @summary Create a new Endpoint
     * @param {Endpoint} endpoint Endpoint attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEndpoint(endpoint: Endpoint, options?: any) {
        return DefaultApiFp(this.configuration).createEndpoint(endpoint, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a Source object
     * @summary Create a new Source
     * @param {Source} source Source attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSource(source: Source, options?: any) {
        return DefaultApiFp(this.configuration).createSource(source, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Application object
     * @summary Delete an existing Application
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteApplication(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteApplication(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Authentication object
     * @summary Delete an existing Authentication
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAuthentication(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteAuthentication(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Endpoint object
     * @summary Delete an existing Endpoint
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteEndpoint(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteEndpoint(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a Source object
     * @summary Delete an existing Source
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSource(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteSource(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Return this API document in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDocumentation(options?: any) {
        return DefaultApiFp(this.configuration).getDocumentation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of Source object
     * @summary List Sources for ApplicationType
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listApplicationTypeSources(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listApplicationTypeSources(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of ApplicationType object
     * @summary List ApplicationType
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listApplicationTypes(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listApplicationTypes(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of Application object
     * @summary List Application
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listApplications(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listApplications(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of Authentication object
     * @summary List Authentication
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAuthentications(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listAuthentications(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of Authentication object
     * @summary List Authentications for Endpoint
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEndpointAuthentications(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listEndpointAuthentications(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of Endpoint object
     * @summary List Endpoint
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEndpoints(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listEndpoints(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of ApplicationType object
     * @summary List ApplicationTypes for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceApplicationTypes(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listSourceApplicationTypes(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of Application object
     * @summary List Applications for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceApplications(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listSourceApplications(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of Authentication object
     * @summary List Authentications for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceAuthentications(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listSourceAuthentications(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of Endpoint object
     * @summary List Endpoints for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceEndpoints(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listSourceEndpoints(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of Source object
     * @summary List Sources for SourceType
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceTypeSources(id: string, limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listSourceTypeSources(id, limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of SourceType object
     * @summary List SourceType
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceTypes(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listSourceTypes(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an array of Source object
     * @summary List Source
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {object} [filter] Filter for querying collections.
     * @param {string | Array<string>} [sortBy] The list of attribute and order to sort the result set by.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSources(limit?: number, offset?: number, filter?: object, sortBy?: string | Array<string>, options?: any) {
        return DefaultApiFp(this.configuration).listSources(limit, offset, filter, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs a GraphQL Query
     * @summary Perform a GraphQL Query
     * @param {GraphQLRequest} graphQLRequest GraphQL Query Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postGraphQL(graphQLRequest: GraphQLRequest, options?: any) {
        return DefaultApiFp(this.configuration).postGraphQL(graphQLRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a Application object
     * @summary Show an existing Application
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showApplication(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showApplication(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a ApplicationType object
     * @summary Show an existing ApplicationType
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showApplicationType(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showApplicationType(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a Authentication object
     * @summary Show an existing Authentication
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showAuthentication(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showAuthentication(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a Endpoint object
     * @summary Show an existing Endpoint
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showEndpoint(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showEndpoint(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a Source object
     * @summary Show an existing Source
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSource(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showSource(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a SourceType object
     * @summary Show an existing SourceType
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSourceType(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showSourceType(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Application object
     * @summary Update an existing Application
     * @param {string} id ID of the resource
     * @param {Application} application Application attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateApplication(id: string, application: Application, options?: any) {
        return DefaultApiFp(this.configuration).updateApplication(id, application, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Authentication object
     * @summary Update an existing Authentication
     * @param {string} id ID of the resource
     * @param {Authentication} authentication Authentication attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAuthentication(id: string, authentication: Authentication, options?: any) {
        return DefaultApiFp(this.configuration).updateAuthentication(id, authentication, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Endpoint object
     * @summary Update an existing Endpoint
     * @param {string} id ID of the resource
     * @param {Endpoint} endpoint Endpoint attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEndpoint(id: string, endpoint: Endpoint, options?: any) {
        return DefaultApiFp(this.configuration).updateEndpoint(id, endpoint, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a Source object
     * @summary Update an existing Source
     * @param {string} id ID of the resource
     * @param {Source} source Source attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSource(id: string, source: Source, options?: any) {
        return DefaultApiFp(this.configuration).updateSource(id, source, options).then((request) => request(this.axios, this.basePath));
    }

}


