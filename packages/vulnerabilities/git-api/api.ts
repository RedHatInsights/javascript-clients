// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Vulnerability Engine Manager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface AffectedSystemsOut
 */
export interface AffectedSystemsOut {
    /**
     *
     * @type {Object}
     * @memberof AffectedSystemsOut
     */
    data: Object;
    /**
     *
     * @type {Links}
     * @memberof AffectedSystemsOut
     */
    links: Links;
    /**
     *
     * @type {MetaAffectedSystems}
     * @memberof AffectedSystemsOut
     */
    meta: MetaAffectedSystems;
}

/**
 *
 * @export
 * @interface BulkChangeOut
 */
export interface BulkChangeOut {
    /**
     * List of updated objects/updated object IDs.
     * @type {Array<string>}
     * @memberof BulkChangeOut
     */
    updated: Array<string>;
}

/**
 *
 * @export
 * @interface BusinessRiskListOut
 */
export interface BusinessRiskListOut {
    /**
     * List of available business risk/business_risk_id pairs.
     * @type {Array<BusinessRiskListOutData>}
     * @memberof BusinessRiskListOut
     */
    data: Array<BusinessRiskListOutData>;
    /**
     *
     * @type {BusinessRiskListOutMeta}
     * @memberof BusinessRiskListOut
     */
    meta: BusinessRiskListOutMeta;
}

/**
 *
 * @export
 * @interface BusinessRiskListOutData
 */
export interface BusinessRiskListOutData {
    /**
     * Internal business_risk_id.
     * @type {number}
     * @memberof BusinessRiskListOutData
     */
    id: number;
    /**
     * Represenation of internal business_risk_id.
     * @type {string}
     * @memberof BusinessRiskListOutData
     */
    name: string;
}

/**
 *
 * @export
 * @interface BusinessRiskListOutMeta
 */
export interface BusinessRiskListOutMeta {
    /**
     * Total number of available business risk/business_risk_id pairs.
     * @type {number}
     * @memberof BusinessRiskListOutMeta
     */
    totalItems: number;
}

/**
 *
 * @export
 * @interface CveDetailOut
 */
export interface CveDetailOut {
    /**
     *
     * @type {CveDetailOutData}
     * @memberof CveDetailOut
     */
    data?: CveDetailOutData;
}

/**
 *
 * @export
 * @interface CveDetailOutData
 */
export interface CveDetailOutData {
    /**
     * CVE id.
     * @type {string}
     * @memberof CveDetailOutData
     */
    id: string;
    /**
     * Type of the record.
     * @type {string}
     * @memberof CveDetailOutData
     */
    type: string;
    /**
     *
     * @type {CveDetailOutDataAttributes}
     * @memberof CveDetailOutData
     */
    attributes: CveDetailOutDataAttributes;
}

/**
 *
 * @export
 * @interface CveDetailOutDataAttributes
 */
export interface CveDetailOutDataAttributes {
    /**
     * Business risk of the vulnerability.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    businessRisk: string;
    /**
     * Internal ID of the vulnerability business risk.
     * @type {number}
     * @memberof CveDetailOutDataAttributes
     */
    businessRiskId: number;
    /**
     * Complementary text to the business risk.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    businessRiskText: string | null;
    /**
     * cvss2 metrics of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    cvss2Metrics: string;
    /**
     * String representation of cvss2 score of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    cvss2Score: string;
    /**
     * cvss3 metrics of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    cvss3Metrics: string;
    /**
     * String representation of cvss3 score of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    cvss3Score: string;
    /**
     *
     * @type {Array<string>}
     * @memberof CveDetailOutDataAttributes
     */
    cweList: Array<string>;
    /**
     * Description of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    description: string;
    /**
     * List of Red Hat erratas fixing the CVE.
     * @type {Array<string>}
     * @memberof CveDetailOutDataAttributes
     */
    errataList: Array<string>;
    /**
     * String representation of ISO-8601 formatted date of last modification of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    modifiedDate: string;
    /**
     * Red Hat security impact of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    impact: string;
    /**
     * List of packages where the fix for the CVE appeared.
     * @type {Array<string>}
     * @memberof CveDetailOutDataAttributes
     */
    packageList: Array<string>;
    /**
     * String representation of ISO-8601 formatted date of first public disclosure of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    publicDate: string;
    /**
     * Additional resource about the CVE, provided by Red Hat.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    redhatUrl: string;
    /**
     * Additional resources about the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    secondaryUrl: string;
    /**
     * Synopsis of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    synopsis: string;
}

/**
 *
 * @export
 * @interface CveOrList
 */
export interface CveOrList {
}

/**
 *
 * @export
 * @interface CveRiskIn
 */
export interface CveRiskIn {
    /**
     *
     * @type {CveOrList}
     * @memberof CveRiskIn
     */
    cve: CveOrList;
    /**
     * Business risk ID to be set, obtained by GET method.
     * @type {number}
     * @memberof CveRiskIn
     */
    businessRiskId?: number;
    /**
     * Complementary text to the business risk.
     * @type {string}
     * @memberof CveRiskIn
     */
    businessRiskText?: string;
}

/**
 *
 * @export
 * @interface Errors
 */
export interface Errors {
    /**
     *
     * @type {Array<ErrorsErrors>}
     * @memberof Errors
     */
    errors: Array<ErrorsErrors>;
}

/**
 *
 * @export
 * @interface ErrorsErrors
 */
export interface ErrorsErrors {
    /**
     * Error detail.
     * @type {string}
     * @memberof ErrorsErrors
     */
    detail: string;
    /**
     * String representation of HTTP status code.
     * @type {string}
     * @memberof ErrorsErrors
     */
    status: string;
}

/**
 *
 * @export
 * @interface InventoryIdOrList
 */
export interface InventoryIdOrList {
}

/**
 *
 * @export
 * @interface Links
 */
export interface Links {
    /**
     * Link to first page.
     * @type {string}
     * @memberof Links
     */
    first: string;
    /**
     * Link to last page.
     * @type {string}
     * @memberof Links
     */
    last: string;
    /**
     * Link to next page.
     * @type {string}
     * @memberof Links
     */
    next: string | null;
    /**
     * Link to next page.
     * @type {string}
     * @memberof Links
     */
    previous: string | null;
}

/**
 *
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     * Full text filter
     * @type {string}
     * @memberof Meta
     */
    filter: string | null;
    /**
     * Maximum number of paginated results.
     * @type {number}
     * @memberof Meta
     */
    limit: number;
    /**
     * First record of paginated response.
     * @type {number}
     * @memberof Meta
     */
    offset: number;
    /**
     * Page number of paginated response.
     * @type {number}
     * @memberof Meta
     */
    page: number;
    /**
     * Number of records per page of paginated response.
     * @type {number}
     * @memberof Meta
     */
    pageSize: number;
    /**
     * Total number of pages of paginated response.
     * @type {number}
     * @memberof Meta
     */
    pages: number;
    /**
     * Sorting filter.
     * @type {string}
     * @memberof Meta
     */
    sort: string | null;
    /**
     * Total number of records.
     * @type {number}
     * @memberof Meta
     */
    totalItems: number;
    /**
     * Format of the output data, either JSON (default) or CSV.
     * @type {string}
     * @memberof Meta
     */
    dataFormat: string;
}

/**
 *
 * @export
 * @interface MetaAffectedSystems
 */
export interface MetaAffectedSystems {
    /**
     * Full text filter
     * @type {string}
     * @memberof MetaAffectedSystems
     */
    filter: string | null;
    /**
     * Maximum number of paginated results.
     * @type {number}
     * @memberof MetaAffectedSystems
     */
    limit: number;
    /**
     * First record of paginated response.
     * @type {number}
     * @memberof MetaAffectedSystems
     */
    offset: number;
    /**
     * Page number of paginated response.
     * @type {number}
     * @memberof MetaAffectedSystems
     */
    page: number;
    /**
     * Number of records per page of paginated response.
     * @type {number}
     * @memberof MetaAffectedSystems
     */
    pageSize: number;
    /**
     * Total number of pages of paginated response.
     * @type {number}
     * @memberof MetaAffectedSystems
     */
    pages: number;
    /**
     * Sorting filter.
     * @type {string}
     * @memberof MetaAffectedSystems
     */
    sort: string | null;
    /**
     * Total number of records.
     * @type {number}
     * @memberof MetaAffectedSystems
     */
    totalItems: number;
    /**
     * Format of the output data, either JSON (default) or CSV.
     * @type {string}
     * @memberof MetaAffectedSystems
     */
    dataFormat: string;
    /**
     * Filer based on CVE status ID.
     * @type {string}
     * @memberof MetaAffectedSystems
     */
    statusId: string | null;
}

/**
 *
 * @export
 * @interface MetaCves
 */
export interface MetaCves {
    /**
     * Full text filter
     * @type {string}
     * @memberof MetaCves
     */
    filter: string | null;
    /**
     * Maximum number of paginated results.
     * @type {number}
     * @memberof MetaCves
     */
    limit: number;
    /**
     * First record of paginated response.
     * @type {number}
     * @memberof MetaCves
     */
    offset: number;
    /**
     * Page number of paginated response.
     * @type {number}
     * @memberof MetaCves
     */
    page: number;
    /**
     * Number of records per page of paginated response.
     * @type {number}
     * @memberof MetaCves
     */
    pageSize: number;
    /**
     * Total number of pages of paginated response.
     * @type {number}
     * @memberof MetaCves
     */
    pages: number;
    /**
     * Sorting filter.
     * @type {string}
     * @memberof MetaCves
     */
    sort: string | null;
    /**
     * Total number of records.
     * @type {number}
     * @memberof MetaCves
     */
    totalItems: number;
    /**
     * Format of the output data, either JSON (default) or CSV.
     * @type {string}
     * @memberof MetaCves
     */
    dataFormat: string;
    /**
     * Filter based on business risk IDs.
     * @type {string}
     * @memberof MetaCves
     */
    businessRisk?: string | null;
    /**
     * Filter based on cvss score, starting from the value.
     * @type {number}
     * @memberof MetaCves
     */
    cvssFrom: number | null;
    /**
     * Filter based on cvss score, up to the value.
     * @type {number}
     * @memberof MetaCves
     */
    cvssTo: number | null;
    /**
     * Filter CVEs based on their published date, starting from the date.
     * @type {string}
     * @memberof MetaCves
     */
    publicFrom: string | null;
    /**
     * Filter CVEs based on their published date, up to the date.
     * @type {string}
     * @memberof MetaCves
     */
    publicTo: string | null;
    /**
     * Filter based on impact IDs.
     * @type {string}
     * @memberof MetaCves
     */
    impact?: string | null;
    /**
     * Filer based on CVE status ID.
     * @type {string}
     * @memberof MetaCves
     */
    statusId: string | null;
}

/**
 *
 * @export
 * @interface MetaCvesSystems
 */
export interface MetaCvesSystems {
    /**
     * Full text filter
     * @type {string}
     * @memberof MetaCvesSystems
     */
    filter: string | null;
    /**
     * Maximum number of paginated results.
     * @type {number}
     * @memberof MetaCvesSystems
     */
    limit: number;
    /**
     * First record of paginated response.
     * @type {number}
     * @memberof MetaCvesSystems
     */
    offset: number;
    /**
     * Page number of paginated response.
     * @type {number}
     * @memberof MetaCvesSystems
     */
    page: number;
    /**
     * Number of records per page of paginated response.
     * @type {number}
     * @memberof MetaCvesSystems
     */
    pageSize: number;
    /**
     * Total number of pages of paginated response.
     * @type {number}
     * @memberof MetaCvesSystems
     */
    pages: number;
    /**
     * Sorting filter.
     * @type {string}
     * @memberof MetaCvesSystems
     */
    sort: string | null;
    /**
     * Total number of records.
     * @type {number}
     * @memberof MetaCvesSystems
     */
    totalItems: number;
    /**
     * Format of the output data, either JSON (default) or CSV.
     * @type {string}
     * @memberof MetaCvesSystems
     */
    dataFormat: string;
    /**
     * Filter based on business risk IDs.
     * @type {string}
     * @memberof MetaCvesSystems
     */
    businessRisk?: string | null;
    /**
     * Filter based on cvss score, starting from the value.
     * @type {number}
     * @memberof MetaCvesSystems
     */
    cvssFrom: number | null;
    /**
     * Filter based on cvss score, up to the value.
     * @type {number}
     * @memberof MetaCvesSystems
     */
    cvssTo: number | null;
    /**
     * Filter CVEs based on their published date, starting from the date.
     * @type {string}
     * @memberof MetaCvesSystems
     */
    publicFrom: string | null;
    /**
     * Filter CVEs based on their published date, up to the date.
     * @type {string}
     * @memberof MetaCvesSystems
     */
    publicTo: string | null;
    /**
     * Filter based on impact IDs.
     * @type {string}
     * @memberof MetaCvesSystems
     */
    impact?: string | null;
    /**
     * Filer based on CVE status ID.
     * @type {string}
     * @memberof MetaCvesSystems
     */
    statusId: string | null;
    /**
     * If given system was opted out.
     * @type {boolean}
     * @memberof MetaCvesSystems
     */
    optOut: boolean;
}

/**
 *
 * @export
 * @interface MetaSystems
 */
export interface MetaSystems {
    /**
     * Full text filter
     * @type {string}
     * @memberof MetaSystems
     */
    filter: string | null;
    /**
     * Maximum number of paginated results.
     * @type {number}
     * @memberof MetaSystems
     */
    limit: number;
    /**
     * First record of paginated response.
     * @type {number}
     * @memberof MetaSystems
     */
    offset: number;
    /**
     * Page number of paginated response.
     * @type {number}
     * @memberof MetaSystems
     */
    page: number;
    /**
     * Number of records per page of paginated response.
     * @type {number}
     * @memberof MetaSystems
     */
    pageSize: number;
    /**
     * Total number of pages of paginated response.
     * @type {number}
     * @memberof MetaSystems
     */
    pages: number;
    /**
     * Sorting filter.
     * @type {string}
     * @memberof MetaSystems
     */
    sort: string | null;
    /**
     * Total number of records.
     * @type {number}
     * @memberof MetaSystems
     */
    totalItems: number;
    /**
     * Format of the output data, either JSON (default) or CSV.
     * @type {string}
     * @memberof MetaSystems
     */
    dataFormat: string;
    /**
     * Whether the filter to show opted out systems is active or not. If not set, defaults to hiding opted out systems.
     * @type {boolean}
     * @memberof MetaSystems
     */
    optOut: boolean | null;
}

/**
 *
 * @export
 * @interface MetaVulnerabilitiesOut
 */
export interface MetaVulnerabilitiesOut {
    /**
     * Full text filter
     * @type {string}
     * @memberof MetaVulnerabilitiesOut
     */
    filter: string | null;
    /**
     * Maximum number of paginated results.
     * @type {number}
     * @memberof MetaVulnerabilitiesOut
     */
    limit: number;
    /**
     * First record of paginated response.
     * @type {number}
     * @memberof MetaVulnerabilitiesOut
     */
    offset: number;
    /**
     * Page number of paginated response.
     * @type {number}
     * @memberof MetaVulnerabilitiesOut
     */
    page: number;
    /**
     * Number of records per page of paginated response.
     * @type {number}
     * @memberof MetaVulnerabilitiesOut
     */
    pageSize: number;
    /**
     * Total number of pages of paginated response.
     * @type {number}
     * @memberof MetaVulnerabilitiesOut
     */
    pages: number;
    /**
     * Sorting filter.
     * @type {string}
     * @memberof MetaVulnerabilitiesOut
     */
    sort: string | null;
    /**
     * Total number of records.
     * @type {number}
     * @memberof MetaVulnerabilitiesOut
     */
    totalItems: number;
    /**
     * Format of the output data, either JSON (default) or CSV.
     * @type {string}
     * @memberof MetaVulnerabilitiesOut
     */
    dataFormat: string;
    /**
     * Filter based on business risk IDs.
     * @type {string}
     * @memberof MetaVulnerabilitiesOut
     */
    businessRisk?: string | null;
    /**
     * Filter based on cvss score, starting from the value.
     * @type {number}
     * @memberof MetaVulnerabilitiesOut
     */
    cvssFrom: number | null;
    /**
     * Filter based on cvss score, up to the value.
     * @type {number}
     * @memberof MetaVulnerabilitiesOut
     */
    cvssTo: number | null;
    /**
     * Show all known vulnerabilities, regardless of number of affected systems.
     * @type {boolean}
     * @memberof MetaVulnerabilitiesOut
     */
    showAll: boolean | null;
    /**
     * Filter CVEs based on their published date, starting from the date.
     * @type {string}
     * @memberof MetaVulnerabilitiesOut
     */
    publicFrom: string | null;
    /**
     * Filter CVEs based on their published date, up to the date.
     * @type {string}
     * @memberof MetaVulnerabilitiesOut
     */
    publicTo: string | null;
    /**
     * Filter based on impact IDs.
     * @type {string}
     * @memberof MetaVulnerabilitiesOut
     */
    impact: string | null;
}

/**
 *
 * @export
 * @interface OptOutIn
 */
export interface OptOutIn {
    /**
     *
     * @type {InventoryIdOrList}
     * @memberof OptOutIn
     */
    inventoryId: InventoryIdOrList;
    /**
     * Opt out setting to be set.
     * @type {boolean}
     * @memberof OptOutIn
     */
    optOut: boolean;
}

/**
 *
 * @export
 * @interface StatusIn
 */
export interface StatusIn {
    /**
     * Host ID.
     * @type {string}
     * @memberof StatusIn
     */
    inventoryId: string;
    /**
     * CVE name.
     * @type {string}
     * @memberof StatusIn
     */
    cve: string;
    /**
     * Status ID to be set, obtained by GET method.
     * @type {number}
     * @memberof StatusIn
     */
    statusId: number;
}

/**
 *
 * @export
 * @interface StatusListOut
 */
export interface StatusListOut {
    /**
     * List of available status/status_id pairs.
     * @type {Array<StatusListOutData>}
     * @memberof StatusListOut
     */
    data: Array<StatusListOutData>;
    /**
     *
     * @type {StatusListOutMeta}
     * @memberof StatusListOut
     */
    meta: StatusListOutMeta;
}

/**
 *
 * @export
 * @interface StatusListOutData
 */
export interface StatusListOutData {
    /**
     * Internal status_id.
     * @type {number}
     * @memberof StatusListOutData
     */
    id: number;
    /**
     * Represenation of internal status_id.
     * @type {string}
     * @memberof StatusListOutData
     */
    name: string;
}

/**
 *
 * @export
 * @interface StatusListOutMeta
 */
export interface StatusListOutMeta {
    /**
     * Total number of available status/status_id pairs.
     * @type {number}
     * @memberof StatusListOutMeta
     */
    totalItems: number;
}

/**
 *
 * @export
 * @interface SystemCvesOut
 */
export interface SystemCvesOut {
    /**
     *
     * @type {Object}
     * @memberof SystemCvesOut
     */
    data: Object;
    /**
     *
     * @type {Links}
     * @memberof SystemCvesOut
     */
    links: Links;
    /**
     *
     * @type {MetaCves}
     * @memberof SystemCvesOut
     */
    meta: MetaCves;
}

/**
 *
 * @export
 * @interface SystemDetailsOut
 */
export interface SystemDetailsOut {
    /**
     *
     * @type {SystemDetailsOutData}
     * @memberof SystemDetailsOut
     */
    data: SystemDetailsOutData;
}

/**
 *
 * @export
 * @interface SystemDetailsOutData
 */
export interface SystemDetailsOutData {
    /**
     * Date of last evaluation.
     * @type {string}
     * @memberof SystemDetailsOutData
     */
    lastEvaluation: string | null;
    /**
     * System opt out status.
     * @type {boolean}
     * @memberof SystemDetailsOutData
     */
    optOut: boolean;
    /**
     * Date of the latest upload of archive.
     * @type {string}
     * @memberof SystemDetailsOutData
     */
    lastUpload: string | null;
}

/**
 *
 * @export
 * @interface SystemListOut
 */
export interface SystemListOut {
    /**
     *
     * @type {Object}
     * @memberof SystemListOut
     */
    data: Object;
    /**
     *
     * @type {Links}
     * @memberof SystemListOut
     */
    links: Links;
    /**
     *
     * @type {MetaSystems}
     * @memberof SystemListOut
     */
    meta: MetaSystems;
}

/**
 *
 * @export
 * @interface VersionOut
 */
export interface VersionOut {
    /**
     * Version of application.
     * @type {Object}
     * @memberof VersionOut
     */
    applicationVersion: Object;
    /**
     * Version of database schema.
     * @type {Object}
     * @memberof VersionOut
     */
    databaseVersion: Object;
}

/**
 *
 * @export
 * @interface VulnerabilitiesOut
 */
export interface VulnerabilitiesOut {
    /**
     *
     * @type {Object}
     * @memberof VulnerabilitiesOut
     */
    data: Object;
    /**
     *
     * @type {Links}
     * @memberof VulnerabilitiesOut
     */
    links: Links;
    /**
     *
     * @type {MetaVulnerabilitiesOut}
     * @memberof VulnerabilitiesOut
     */
    meta: MetaVulnerabilitiesOut;
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes system from database.
         * @summary Delete system.
         * @param {string} inventoryId Inventory ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystem(inventoryId: string, options: any = {}): RequestArgs {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling deleteSystem.');
            }
            const localVarPath = `/v1/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Report of affected systems for a given CVE.
         * @summary Affected systems for a given CVE.
         * @param {string} cveId CVE id.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {string} [statusId] Filer based on CVE status ID.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffectedSystemsByCve(cveId: string, filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, statusId?: string, dataFormat?: string, options: any = {}): RequestArgs {
            // verify required parameter 'cveId' is not null or undefined
            if (cveId === null || cveId === undefined) {
                throw new RequiredError('cveId','Required parameter cveId was null or undefined when calling getAffectedSystemsByCve.');
            }
            const localVarPath = `/v1/cves/{cve_id}/affected_systems`
                .replace(`{${"cve_id"}}`, encodeURIComponent(String(cveId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (statusId !== undefined) {
                localVarQueryParameter['status_id'] = statusId;
            }

            if (dataFormat !== undefined) {
                localVarQueryParameter['data_format'] = dataFormat;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns available business risk and business_risk_id pairs where business_risk_id is internal ID of the business risk.
         * @summary Available business risk/business_risk_id pairs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRiskList(options: any = {}): RequestArgs {
            const localVarPath = `/v1/business_risk`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show all information about given CVE.
         * @summary Details of a CVE.
         * @param {string} cveId CVE id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCveDetails(cveId: string, options: any = {}): RequestArgs {
            // verify required parameter 'cveId' is not null or undefined
            if (cveId === null || cveId === undefined) {
                throw new RequiredError('cveId','Required parameter cveId was null or undefined when calling getCveDetails.');
            }
            const localVarPath = `/v1/cves/{cve_id}`
                .replace(`{${"cve_id"}}`, encodeURIComponent(String(cveId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Overview of vulnerabilities across whole host inventory.
         * @summary Vulnerabilities overview.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {number} [cvssFrom] Filter based on cvss score, starting from the value.
         * @param {number} [cvssTo] Filter based on cvss score, up to the value.
         * @param {string} [publicFrom] Filter CVEs based on their published date, starting from the date.
         * @param {string} [publicTo] Filter CVEs based on their published date, up to the date.
         * @param {string} [impact] Filter based on impact IDs.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {string} [businessRisk] Filter based on business risk IDs.
         * @param {boolean} [showAll] Show all known vulnerabilities, regardless of number of affected systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCveList(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, cvssFrom?: number, cvssTo?: number, publicFrom?: string, publicTo?: string, impact?: string, dataFormat?: string, businessRisk?: string, showAll?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/v1/vulnerabilities/cves`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (cvssFrom !== undefined) {
                localVarQueryParameter['cvss_from'] = cvssFrom;
            }

            if (cvssTo !== undefined) {
                localVarQueryParameter['cvss_to'] = cvssTo;
            }

            if (publicFrom !== undefined) {
                localVarQueryParameter['public_from'] = publicFrom;
            }

            if (publicTo !== undefined) {
                localVarQueryParameter['public_to'] = publicTo;
            }

            if (impact !== undefined) {
                localVarQueryParameter['impact'] = impact;
            }

            if (dataFormat !== undefined) {
                localVarQueryParameter['data_format'] = dataFormat;
            }

            if (businessRisk !== undefined) {
                localVarQueryParameter['business_risk'] = businessRisk;
            }

            if (showAll !== undefined) {
                localVarQueryParameter['show_all'] = showAll;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows detailed infomation about all CVEs the system is exposed to.
         * @summary CVE report for a system.
         * @param {string} inventoryId Inventory ID.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {number} [cvssFrom] Filter based on cvss score, starting from the value.
         * @param {number} [cvssTo] Filter based on cvss score, up to the value.
         * @param {string} [publicFrom] Filter CVEs based on their published date, starting from the date.
         * @param {string} [publicTo] Filter CVEs based on their published date, up to the date.
         * @param {string} [impact] Filter based on impact IDs.
         * @param {string} [statusId] Filer based on CVE status ID.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {string} [businessRisk] Filter based on business risk IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCveListBySystem(inventoryId: string, filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, cvssFrom?: number, cvssTo?: number, publicFrom?: string, publicTo?: string, impact?: string, statusId?: string, dataFormat?: string, businessRisk?: string, options: any = {}): RequestArgs {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling getCveListBySystem.');
            }
            const localVarPath = `/v1/systems/{inventory_id}/cves`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (cvssFrom !== undefined) {
                localVarQueryParameter['cvss_from'] = cvssFrom;
            }

            if (cvssTo !== undefined) {
                localVarQueryParameter['cvss_to'] = cvssTo;
            }

            if (publicFrom !== undefined) {
                localVarQueryParameter['public_from'] = publicFrom;
            }

            if (publicTo !== undefined) {
                localVarQueryParameter['public_to'] = publicTo;
            }

            if (impact !== undefined) {
                localVarQueryParameter['impact'] = impact;
            }

            if (statusId !== undefined) {
                localVarQueryParameter['status_id'] = statusId;
            }

            if (dataFormat !== undefined) {
                localVarQueryParameter['data_format'] = dataFormat;
            }

            if (businessRisk !== undefined) {
                localVarQueryParameter['business_risk'] = businessRisk;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns available status and status_id pairs where status_id is internal ID of the status.
         * @summary Available status/status_id pairs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusList(options: any = {}): RequestArgs {
            const localVarPath = `/v1/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides details of a system, e.g. it's opt out status.
         * @summary System details.
         * @param {string} inventoryId Inventory ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDetails(inventoryId: string, options: any = {}): RequestArgs {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling getSystemDetails.');
            }
            const localVarPath = `/v1/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List systems visible to logged in account with basic information related to vulnerabilities.
         * @summary List systems.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {boolean} [optOut] If set to true, shows systems which have been opted out from vulnerability application. If not set defaults to false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemsList(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, dataFormat?: string, optOut?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/v1/systems`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (dataFormat !== undefined) {
                localVarQueryParameter['data_format'] = dataFormat;
            }

            if (optOut !== undefined) {
                localVarQueryParameter['opt_out'] = optOut;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get application version.
         * @summary Application version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options: any = {}): RequestArgs {
            const localVarPath = `/v1/version`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets business risk for a CVE.
         * @summary Set business risk for a CVE.
         * @param {CveRiskIn} cveRiskIn Values to be set. At least one of the \&quot;business_risk_id\&quot; or \&quot;business_risk_text\&quot; parameters is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCveBusinessRisk(cveRiskIn: CveRiskIn, options: any = {}): RequestArgs {
            // verify required parameter 'cveRiskIn' is not null or undefined
            if (cveRiskIn === null || cveRiskIn === undefined) {
                throw new RequiredError('cveRiskIn','Required parameter cveRiskIn was null or undefined when calling setCveBusinessRisk.');
            }
            const localVarPath = `/v1/cves/business_risk`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CveRiskIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(cveRiskIn || {}) : (cveRiskIn || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets status for given host and CVE.
         * @summary Set status for system vulnerability.
         * @param {StatusIn} statusIn Values to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatus(statusIn: StatusIn, options: any = {}): RequestArgs {
            // verify required parameter 'statusIn' is not null or undefined
            if (statusIn === null || statusIn === undefined) {
                throw new RequiredError('statusIn','Required parameter statusIn was null or undefined when calling setStatus.');
            }
            const localVarPath = `/v1/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"StatusIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(statusIn || {}) : (statusIn || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
         * @summary Opt in/out a system to/from vulnerability application.
         * @param {string} inventoryId Inventory ID.
         * @param {boolean} value opt_out setting of the host.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemOptOut(inventoryId: string, value: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling setSystemOptOut.');
            }
            // verify required parameter 'value' is not null or undefined
            if (value === null || value === undefined) {
                throw new RequiredError('value','Required parameter value was null or undefined when calling setSystemOptOut.');
            }
            const localVarPath = `/v1/systems/{inventory_id}/opt_out`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
         * @summary Opt in/out a system to/from vulnerability application.
         * @param {OptOutIn} optOutIn Values to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemsOptOut(optOutIn: OptOutIn, options: any = {}): RequestArgs {
            // verify required parameter 'optOutIn' is not null or undefined
            if (optOutIn === null || optOutIn === undefined) {
                throw new RequiredError('optOutIn','Required parameter optOutIn was null or undefined when calling setSystemsOptOut.');
            }
            const localVarPath = `/v1/systems/opt_out`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"OptOutIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(optOutIn || {}) : (optOutIn || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes system from database.
         * @summary Delete system.
         * @param {string} inventoryId Inventory ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystem(inventoryId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteSystem(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Report of affected systems for a given CVE.
         * @summary Affected systems for a given CVE.
         * @param {string} cveId CVE id.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {string} [statusId] Filer based on CVE status ID.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffectedSystemsByCve(cveId: string, filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, statusId?: string, dataFormat?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AffectedSystemsOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getAffectedSystemsByCve(cveId, filter, limit, offset, page, pageSize, sort, statusId, dataFormat, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns available business risk and business_risk_id pairs where business_risk_id is internal ID of the business risk.
         * @summary Available business risk/business_risk_id pairs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRiskList(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BusinessRiskListOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getBusinessRiskList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Show all information about given CVE.
         * @summary Details of a CVE.
         * @param {string} cveId CVE id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCveDetails(cveId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CveDetailOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getCveDetails(cveId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Overview of vulnerabilities across whole host inventory.
         * @summary Vulnerabilities overview.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {number} [cvssFrom] Filter based on cvss score, starting from the value.
         * @param {number} [cvssTo] Filter based on cvss score, up to the value.
         * @param {string} [publicFrom] Filter CVEs based on their published date, starting from the date.
         * @param {string} [publicTo] Filter CVEs based on their published date, up to the date.
         * @param {string} [impact] Filter based on impact IDs.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {string} [businessRisk] Filter based on business risk IDs.
         * @param {boolean} [showAll] Show all known vulnerabilities, regardless of number of affected systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCveList(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, cvssFrom?: number, cvssTo?: number, publicFrom?: string, publicTo?: string, impact?: string, dataFormat?: string, businessRisk?: string, showAll?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VulnerabilitiesOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getCveList(filter, limit, offset, page, pageSize, sort, cvssFrom, cvssTo, publicFrom, publicTo, impact, dataFormat, businessRisk, showAll, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Shows detailed infomation about all CVEs the system is exposed to.
         * @summary CVE report for a system.
         * @param {string} inventoryId Inventory ID.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {number} [cvssFrom] Filter based on cvss score, starting from the value.
         * @param {number} [cvssTo] Filter based on cvss score, up to the value.
         * @param {string} [publicFrom] Filter CVEs based on their published date, starting from the date.
         * @param {string} [publicTo] Filter CVEs based on their published date, up to the date.
         * @param {string} [impact] Filter based on impact IDs.
         * @param {string} [statusId] Filer based on CVE status ID.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {string} [businessRisk] Filter based on business risk IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCveListBySystem(inventoryId: string, filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, cvssFrom?: number, cvssTo?: number, publicFrom?: string, publicTo?: string, impact?: string, statusId?: string, dataFormat?: string, businessRisk?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemCvesOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getCveListBySystem(inventoryId, filter, limit, offset, page, pageSize, sort, cvssFrom, cvssTo, publicFrom, publicTo, impact, statusId, dataFormat, businessRisk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns available status and status_id pairs where status_id is internal ID of the status.
         * @summary Available status/status_id pairs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusList(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusListOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getStatusList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provides details of a system, e.g. it's opt out status.
         * @summary System details.
         * @param {string} inventoryId Inventory ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDetails(inventoryId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemDetailsOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getSystemDetails(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List systems visible to logged in account with basic information related to vulnerabilities.
         * @summary List systems.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {boolean} [optOut] If set to true, shows systems which have been opted out from vulnerability application. If not set defaults to false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemsList(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, dataFormat?: string, optOut?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemListOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getSystemsList(filter, limit, offset, page, pageSize, sort, dataFormat, optOut, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get application version.
         * @summary Application version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getVersion(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets business risk for a CVE.
         * @summary Set business risk for a CVE.
         * @param {CveRiskIn} cveRiskIn Values to be set. At least one of the \&quot;business_risk_id\&quot; or \&quot;business_risk_text\&quot; parameters is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCveBusinessRisk(cveRiskIn: CveRiskIn, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkChangeOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).setCveBusinessRisk(cveRiskIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets status for given host and CVE.
         * @summary Set status for system vulnerability.
         * @param {StatusIn} statusIn Values to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatus(statusIn: StatusIn, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).setStatus(statusIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
         * @summary Opt in/out a system to/from vulnerability application.
         * @param {string} inventoryId Inventory ID.
         * @param {boolean} value opt_out setting of the host.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemOptOut(inventoryId: string, value: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).setSystemOptOut(inventoryId, value, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
         * @summary Opt in/out a system to/from vulnerability application.
         * @param {OptOutIn} optOutIn Values to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemsOptOut(optOutIn: OptOutIn, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkChangeOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).setSystemsOptOut(optOutIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes system from database.
         * @summary Delete system.
         * @param {string} inventoryId Inventory ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystem(inventoryId: string, options?: any) {
            return DefaultApiFp(configuration).deleteSystem(inventoryId, options)(axios, basePath);
        },
        /**
         * Report of affected systems for a given CVE.
         * @summary Affected systems for a given CVE.
         * @param {string} cveId CVE id.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {string} [statusId] Filer based on CVE status ID.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAffectedSystemsByCve(cveId: string, filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, statusId?: string, dataFormat?: string, options?: any) {
            return DefaultApiFp(configuration).getAffectedSystemsByCve(cveId, filter, limit, offset, page, pageSize, sort, statusId, dataFormat, options)(axios, basePath);
        },
        /**
         * Returns available business risk and business_risk_id pairs where business_risk_id is internal ID of the business risk.
         * @summary Available business risk/business_risk_id pairs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBusinessRiskList(options?: any) {
            return DefaultApiFp(configuration).getBusinessRiskList(options)(axios, basePath);
        },
        /**
         * Show all information about given CVE.
         * @summary Details of a CVE.
         * @param {string} cveId CVE id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCveDetails(cveId: string, options?: any) {
            return DefaultApiFp(configuration).getCveDetails(cveId, options)(axios, basePath);
        },
        /**
         * Overview of vulnerabilities across whole host inventory.
         * @summary Vulnerabilities overview.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {number} [cvssFrom] Filter based on cvss score, starting from the value.
         * @param {number} [cvssTo] Filter based on cvss score, up to the value.
         * @param {string} [publicFrom] Filter CVEs based on their published date, starting from the date.
         * @param {string} [publicTo] Filter CVEs based on their published date, up to the date.
         * @param {string} [impact] Filter based on impact IDs.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {string} [businessRisk] Filter based on business risk IDs.
         * @param {boolean} [showAll] Show all known vulnerabilities, regardless of number of affected systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCveList(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, cvssFrom?: number, cvssTo?: number, publicFrom?: string, publicTo?: string, impact?: string, dataFormat?: string, businessRisk?: string, showAll?: boolean, options?: any) {
            return DefaultApiFp(configuration).getCveList(filter, limit, offset, page, pageSize, sort, cvssFrom, cvssTo, publicFrom, publicTo, impact, dataFormat, businessRisk, showAll, options)(axios, basePath);
        },
        /**
         * Shows detailed infomation about all CVEs the system is exposed to.
         * @summary CVE report for a system.
         * @param {string} inventoryId Inventory ID.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {number} [cvssFrom] Filter based on cvss score, starting from the value.
         * @param {number} [cvssTo] Filter based on cvss score, up to the value.
         * @param {string} [publicFrom] Filter CVEs based on their published date, starting from the date.
         * @param {string} [publicTo] Filter CVEs based on their published date, up to the date.
         * @param {string} [impact] Filter based on impact IDs.
         * @param {string} [statusId] Filer based on CVE status ID.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {string} [businessRisk] Filter based on business risk IDs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCveListBySystem(inventoryId: string, filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, cvssFrom?: number, cvssTo?: number, publicFrom?: string, publicTo?: string, impact?: string, statusId?: string, dataFormat?: string, businessRisk?: string, options?: any) {
            return DefaultApiFp(configuration).getCveListBySystem(inventoryId, filter, limit, offset, page, pageSize, sort, cvssFrom, cvssTo, publicFrom, publicTo, impact, statusId, dataFormat, businessRisk, options)(axios, basePath);
        },
        /**
         * Returns available status and status_id pairs where status_id is internal ID of the status.
         * @summary Available status/status_id pairs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatusList(options?: any) {
            return DefaultApiFp(configuration).getStatusList(options)(axios, basePath);
        },
        /**
         * Provides details of a system, e.g. it's opt out status.
         * @summary System details.
         * @param {string} inventoryId Inventory ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemDetails(inventoryId: string, options?: any) {
            return DefaultApiFp(configuration).getSystemDetails(inventoryId, options)(axios, basePath);
        },
        /**
         * List systems visible to logged in account with basic information related to vulnerabilities.
         * @summary List systems.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
         * @param {boolean} [optOut] If set to true, shows systems which have been opted out from vulnerability application. If not set defaults to false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemsList(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, dataFormat?: string, optOut?: boolean, options?: any) {
            return DefaultApiFp(configuration).getSystemsList(filter, limit, offset, page, pageSize, sort, dataFormat, optOut, options)(axios, basePath);
        },
        /**
         * Get application version.
         * @summary Application version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVersion(options?: any) {
            return DefaultApiFp(configuration).getVersion(options)(axios, basePath);
        },
        /**
         * Sets business risk for a CVE.
         * @summary Set business risk for a CVE.
         * @param {CveRiskIn} cveRiskIn Values to be set. At least one of the \&quot;business_risk_id\&quot; or \&quot;business_risk_text\&quot; parameters is required.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCveBusinessRisk(cveRiskIn: CveRiskIn, options?: any) {
            return DefaultApiFp(configuration).setCveBusinessRisk(cveRiskIn, options)(axios, basePath);
        },
        /**
         * Sets status for given host and CVE.
         * @summary Set status for system vulnerability.
         * @param {StatusIn} statusIn Values to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setStatus(statusIn: StatusIn, options?: any) {
            return DefaultApiFp(configuration).setStatus(statusIn, options)(axios, basePath);
        },
        /**
         * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
         * @summary Opt in/out a system to/from vulnerability application.
         * @param {string} inventoryId Inventory ID.
         * @param {boolean} value opt_out setting of the host.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemOptOut(inventoryId: string, value: boolean, options?: any) {
            return DefaultApiFp(configuration).setSystemOptOut(inventoryId, value, options)(axios, basePath);
        },
        /**
         * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
         * @summary Opt in/out a system to/from vulnerability application.
         * @param {OptOutIn} optOutIn Values to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setSystemsOptOut(optOutIn: OptOutIn, options?: any) {
            return DefaultApiFp(configuration).setSystemsOptOut(optOutIn, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Deletes system from database.
     * @summary Delete system.
     * @param {string} inventoryId Inventory ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSystem(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteSystem(inventoryId, options)(this.axios, this.basePath);
    }

    /**
     * Report of affected systems for a given CVE.
     * @summary Affected systems for a given CVE.
     * @param {string} cveId CVE id.
     * @param {string} [filter] Full text filter.
     * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {string} [sort] Sorting used for response.
     * @param {string} [statusId] Filer based on CVE status ID.
     * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAffectedSystemsByCve(cveId: string, filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, statusId?: string, dataFormat?: string, options?: any) {
        return DefaultApiFp(this.configuration).getAffectedSystemsByCve(cveId, filter, limit, offset, page, pageSize, sort, statusId, dataFormat, options)(this.axios, this.basePath);
    }

    /**
     * Returns available business risk and business_risk_id pairs where business_risk_id is internal ID of the business risk.
     * @summary Available business risk/business_risk_id pairs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBusinessRiskList(options?: any) {
        return DefaultApiFp(this.configuration).getBusinessRiskList(options)(this.axios, this.basePath);
    }

    /**
     * Show all information about given CVE.
     * @summary Details of a CVE.
     * @param {string} cveId CVE id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCveDetails(cveId: string, options?: any) {
        return DefaultApiFp(this.configuration).getCveDetails(cveId, options)(this.axios, this.basePath);
    }

    /**
     * Overview of vulnerabilities across whole host inventory.
     * @summary Vulnerabilities overview.
     * @param {string} [filter] Full text filter.
     * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {string} [sort] Sorting used for response.
     * @param {number} [cvssFrom] Filter based on cvss score, starting from the value.
     * @param {number} [cvssTo] Filter based on cvss score, up to the value.
     * @param {string} [publicFrom] Filter CVEs based on their published date, starting from the date.
     * @param {string} [publicTo] Filter CVEs based on their published date, up to the date.
     * @param {string} [impact] Filter based on impact IDs.
     * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
     * @param {string} [businessRisk] Filter based on business risk IDs.
     * @param {boolean} [showAll] Show all known vulnerabilities, regardless of number of affected systems.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCveList(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, cvssFrom?: number, cvssTo?: number, publicFrom?: string, publicTo?: string, impact?: string, dataFormat?: string, businessRisk?: string, showAll?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getCveList(filter, limit, offset, page, pageSize, sort, cvssFrom, cvssTo, publicFrom, publicTo, impact, dataFormat, businessRisk, showAll, options)(this.axios, this.basePath);
    }

    /**
     * Shows detailed infomation about all CVEs the system is exposed to.
     * @summary CVE report for a system.
     * @param {string} inventoryId Inventory ID.
     * @param {string} [filter] Full text filter.
     * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {string} [sort] Sorting used for response.
     * @param {number} [cvssFrom] Filter based on cvss score, starting from the value.
     * @param {number} [cvssTo] Filter based on cvss score, up to the value.
     * @param {string} [publicFrom] Filter CVEs based on their published date, starting from the date.
     * @param {string} [publicTo] Filter CVEs based on their published date, up to the date.
     * @param {string} [impact] Filter based on impact IDs.
     * @param {string} [statusId] Filer based on CVE status ID.
     * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
     * @param {string} [businessRisk] Filter based on business risk IDs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCveListBySystem(inventoryId: string, filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, cvssFrom?: number, cvssTo?: number, publicFrom?: string, publicTo?: string, impact?: string, statusId?: string, dataFormat?: string, businessRisk?: string, options?: any) {
        return DefaultApiFp(this.configuration).getCveListBySystem(inventoryId, filter, limit, offset, page, pageSize, sort, cvssFrom, cvssTo, publicFrom, publicTo, impact, statusId, dataFormat, businessRisk, options)(this.axios, this.basePath);
    }

    /**
     * Returns available status and status_id pairs where status_id is internal ID of the status.
     * @summary Available status/status_id pairs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatusList(options?: any) {
        return DefaultApiFp(this.configuration).getStatusList(options)(this.axios, this.basePath);
    }

    /**
     * Provides details of a system, e.g. it's opt out status.
     * @summary System details.
     * @param {string} inventoryId Inventory ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSystemDetails(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).getSystemDetails(inventoryId, options)(this.axios, this.basePath);
    }

    /**
     * List systems visible to logged in account with basic information related to vulnerabilities.
     * @summary List systems.
     * @param {string} [filter] Full text filter.
     * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {string} [sort] Sorting used for response.
     * @param {string} [dataFormat] Format of the output data, either JSON (default) or CSV.
     * @param {boolean} [optOut] If set to true, shows systems which have been opted out from vulnerability application. If not set defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSystemsList(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, dataFormat?: string, optOut?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).getSystemsList(filter, limit, offset, page, pageSize, sort, dataFormat, optOut, options)(this.axios, this.basePath);
    }

    /**
     * Get application version.
     * @summary Application version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getVersion(options?: any) {
        return DefaultApiFp(this.configuration).getVersion(options)(this.axios, this.basePath);
    }

    /**
     * Sets business risk for a CVE.
     * @summary Set business risk for a CVE.
     * @param {CveRiskIn} cveRiskIn Values to be set. At least one of the \&quot;business_risk_id\&quot; or \&quot;business_risk_text\&quot; parameters is required.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setCveBusinessRisk(cveRiskIn: CveRiskIn, options?: any) {
        return DefaultApiFp(this.configuration).setCveBusinessRisk(cveRiskIn, options)(this.axios, this.basePath);
    }

    /**
     * Sets status for given host and CVE.
     * @summary Set status for system vulnerability.
     * @param {StatusIn} statusIn Values to be set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setStatus(statusIn: StatusIn, options?: any) {
        return DefaultApiFp(this.configuration).setStatus(statusIn, options)(this.axios, this.basePath);
    }

    /**
     * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
     * @summary Opt in/out a system to/from vulnerability application.
     * @param {string} inventoryId Inventory ID.
     * @param {boolean} value opt_out setting of the host.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setSystemOptOut(inventoryId: string, value: boolean, options?: any) {
        return DefaultApiFp(this.configuration).setSystemOptOut(inventoryId, value, options)(this.axios, this.basePath);
    }

    /**
     * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
     * @summary Opt in/out a system to/from vulnerability application.
     * @param {OptOutIn} optOutIn Values to be set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setSystemsOptOut(optOutIn: OptOutIn, options?: any) {
        return DefaultApiFp(this.configuration).setSystemsOptOut(optOutIn, options)(this.axios, this.basePath);
    }

}

/**
 * InternalApi - axios parameter creator
 * @export
 */
export const InternalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Refresh cached counts for given account ID. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given account ID.
         * @param {string} accountId Account ID of user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccount(accountId: string, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling refreshAccount.');
            }
            const localVarPath = `/v1/refresh/accounts/{account_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthInternal required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh cached counts for given account ID and CVE. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given account ID and CVE.
         * @param {string} accountId Account ID of user.
         * @param {string} cveId CVE id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccountCve(accountId: string, cveId: string, options: any = {}): RequestArgs {
            // verify required parameter 'accountId' is not null or undefined
            if (accountId === null || accountId === undefined) {
                throw new RequiredError('accountId','Required parameter accountId was null or undefined when calling refreshAccountCve.');
            }
            // verify required parameter 'cveId' is not null or undefined
            if (cveId === null || cveId === undefined) {
                throw new RequiredError('cveId','Required parameter cveId was null or undefined when calling refreshAccountCve.');
            }
            const localVarPath = `/v1/refresh/accounts/{account_id}/cves/{cve_id}`
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)))
                .replace(`{${"cve_id"}}`, encodeURIComponent(String(cveId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthInternal required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh cached counts for given CVE. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given CVE.
         * @param {string} cveId CVE id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCve(cveId: string, options: any = {}): RequestArgs {
            // verify required parameter 'cveId' is not null or undefined
            if (cveId === null || cveId === undefined) {
                throw new RequiredError('cveId','Required parameter cveId was null or undefined when calling refreshCve.');
            }
            const localVarPath = `/v1/refresh/cves/{cve_id}`
                .replace(`{${"cve_id"}}`, encodeURIComponent(String(cveId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthInternal required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Refresh cached counts for given inventory ID. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given inventory ID.
         * @param {string} inventoryId Inventory ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshSystem(inventoryId: string, options: any = {}): RequestArgs {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling refreshSystem.');
            }
            const localVarPath = `/v1/refresh/systems/{inventory_id}`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuthInternal required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            // authentication BasicAuth required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InternalApi - functional programming interface
 * @export
 */
export const InternalApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Refresh cached counts for given account ID. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given account ID.
         * @param {string} accountId Account ID of user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccount(accountId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = InternalApiAxiosParamCreator(configuration).refreshAccount(accountId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Refresh cached counts for given account ID and CVE. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given account ID and CVE.
         * @param {string} accountId Account ID of user.
         * @param {string} cveId CVE id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccountCve(accountId: string, cveId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = InternalApiAxiosParamCreator(configuration).refreshAccountCve(accountId, cveId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Refresh cached counts for given CVE. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given CVE.
         * @param {string} cveId CVE id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCve(cveId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = InternalApiAxiosParamCreator(configuration).refreshCve(cveId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Refresh cached counts for given inventory ID. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given inventory ID.
         * @param {string} inventoryId Inventory ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshSystem(inventoryId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = InternalApiAxiosParamCreator(configuration).refreshSystem(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InternalApi - factory interface
 * @export
 */
export const InternalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Refresh cached counts for given account ID. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given account ID.
         * @param {string} accountId Account ID of user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccount(accountId: string, options?: any) {
            return InternalApiFp(configuration).refreshAccount(accountId, options)(axios, basePath);
        },
        /**
         * Refresh cached counts for given account ID and CVE. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given account ID and CVE.
         * @param {string} accountId Account ID of user.
         * @param {string} cveId CVE id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshAccountCve(accountId: string, cveId: string, options?: any) {
            return InternalApiFp(configuration).refreshAccountCve(accountId, cveId, options)(axios, basePath);
        },
        /**
         * Refresh cached counts for given CVE. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given CVE.
         * @param {string} cveId CVE id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshCve(cveId: string, options?: any) {
            return InternalApiFp(configuration).refreshCve(cveId, options)(axios, basePath);
        },
        /**
         * Refresh cached counts for given inventory ID. Admin interface, available only to internal users.
         * @summary Refresh cached counts for given inventory ID.
         * @param {string} inventoryId Inventory ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshSystem(inventoryId: string, options?: any) {
            return InternalApiFp(configuration).refreshSystem(inventoryId, options)(axios, basePath);
        },
    };
};

/**
 * InternalApi - object-oriented interface
 * @export
 * @class InternalApi
 * @extends {BaseAPI}
 */
export class InternalApi extends BaseAPI {
    /**
     * Refresh cached counts for given account ID. Admin interface, available only to internal users.
     * @summary Refresh cached counts for given account ID.
     * @param {string} accountId Account ID of user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    public refreshAccount(accountId: string, options?: any) {
        return InternalApiFp(this.configuration).refreshAccount(accountId, options)(this.axios, this.basePath);
    }

    /**
     * Refresh cached counts for given account ID and CVE. Admin interface, available only to internal users.
     * @summary Refresh cached counts for given account ID and CVE.
     * @param {string} accountId Account ID of user.
     * @param {string} cveId CVE id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    public refreshAccountCve(accountId: string, cveId: string, options?: any) {
        return InternalApiFp(this.configuration).refreshAccountCve(accountId, cveId, options)(this.axios, this.basePath);
    }

    /**
     * Refresh cached counts for given CVE. Admin interface, available only to internal users.
     * @summary Refresh cached counts for given CVE.
     * @param {string} cveId CVE id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    public refreshCve(cveId: string, options?: any) {
        return InternalApiFp(this.configuration).refreshCve(cveId, options)(this.axios, this.basePath);
    }

    /**
     * Refresh cached counts for given inventory ID. Admin interface, available only to internal users.
     * @summary Refresh cached counts for given inventory ID.
     * @param {string} inventoryId Inventory ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InternalApi
     */
    public refreshSystem(inventoryId: string, options?: any) {
        return InternalApiFp(this.configuration).refreshSystem(inventoryId, options)(this.axios, this.basePath);
    }

}

