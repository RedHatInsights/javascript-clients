/* tslint:disable */
/* eslint-disable */
/**
 * Cloud Services for RHEL Compliance API v2
 * UNDER DEVELOPMENT: This version of the API is not fully done and some parts of it might change! This is the API for Cloud Services for RHEL Compliance. You can find out more about Red Hat Cloud Services for RHEL at [https://console.redhat.com/](https://console.redhat.com/)
 *
 * The version of the OpenAPI document: v2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface AssignRulesRequest
 */
export interface AssignRulesRequest {
    /**
     *
     * @type {any}
     * @memberof AssignRulesRequest
     */
    'ids'?: any;
}
/**
 *
 * @export
 * @interface CreatePolicy201Response
 */
export interface CreatePolicy201Response {
    /**
     *
     * @type {CreatePolicy201ResponseData}
     * @memberof CreatePolicy201Response
     */
    'data'?: CreatePolicy201ResponseData;
}
/**
 *
 * @export
 * @interface CreatePolicy201ResponseData
 */
export interface CreatePolicy201ResponseData {
    /**
     *
     * @type {Policy}
     * @memberof CreatePolicy201ResponseData
     */
    'schema'?: Policy;
}
/**
 *
 * @export
 * @interface Errors
 */
export interface Errors {
    /**
     *
     * @type {any}
     * @memberof Errors
     */
    'errors': any;
}
/**
 *
 * @export
 * @interface Links
 */
export interface Links {
    /**
     * Link to first page
     * @type {any}
     * @memberof Links
     */
    'first'?: any;
    /**
     * Link to last page
     * @type {any}
     * @memberof Links
     */
    'last'?: any;
    /**
     * Link to previous page
     * @type {any}
     * @memberof Links
     */
    'previous'?: any;
    /**
     * Link to next page
     * @type {any}
     * @memberof Links
     */
    'next'?: any;
}
/**
 *
 * @export
 * @interface Metadata
 */
export interface Metadata {
    /**
     * Total number of items
     * @type {any}
     * @memberof Metadata
     */
    'total'?: any;
    /**
     * Number of items returned per page
     * @type {any}
     * @memberof Metadata
     */
    'limit'?: any;
    /**
     * Offset of the first item of paginated response
     * @type {any}
     * @memberof Metadata
     */
    'offset'?: any;
    /**
     * Attribute and direction the items are sorted by
     * @type {any}
     * @memberof Metadata
     */
    'sort_by'?: any;
    /**
     * Query string used to filter items by their attributes
     * @type {any}
     * @memberof Metadata
     */
    'filter'?: any;
}
/**
 *
 * @export
 * @interface Policies200Response
 */
export interface Policies200Response {
    /**
     *
     * @type {Metadata}
     * @memberof Policies200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof Policies200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof Policies200Response
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface Policy
 */
export interface Policy {
    /**
     *
     * @type {any}
     * @memberof Policy
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof Policy
     */
    'type'?: PolicyTypeEnum;
    /**
     * Short title of the Policy
     * @type {any}
     * @memberof Policy
     */
    'title'?: any;
    /**
     * Longer description of the Policy
     * @type {any}
     * @memberof Policy
     */
    'description'?: any;
    /**
     * The Business Objective associated to the Policy
     * @type {any}
     * @memberof Policy
     */
    'business_objective'?: any;
    /**
     * The percentage above which the Policy meets compliance requirements
     * @type {any}
     * @memberof Policy
     */
    'compliance_threshold': any;
    /**
     * Identifier of the underlying Profile
     * @type {any}
     * @memberof Policy
     */
    'profile_id': any;
    /**
     * Major version of the Operating System that the Policy covers
     * @type {any}
     * @memberof Policy
     */
    'os_major_version'?: any;
    /**
     * Identificator of the Profile
     * @type {any}
     * @memberof Policy
     */
    'ref_id'?: any;
    /**
     * Title of the associated Policy
     * @type {any}
     * @memberof Policy
     */
    'profile_title'?: any;
    /**
     * The number of Systems assigned to this Policy
     * @type {any}
     * @memberof Policy
     */
    'total_system_count'?: any;
}

export const PolicyTypeEnum = {
    Policy: 'policy'
} as const;

export type PolicyTypeEnum = typeof PolicyTypeEnum[keyof typeof PolicyTypeEnum];

/**
 *
 * @export
 * @interface PolicyUpdate
 */
export interface PolicyUpdate {
    /**
     * Longer description of the Policy
     * @type {any}
     * @memberof PolicyUpdate
     */
    'description'?: any;
    /**
     * The Business Objective associated to the Policy
     * @type {any}
     * @memberof PolicyUpdate
     */
    'business_objective'?: any;
    /**
     * The percentage above which the Policy meets compliance requirements
     * @type {any}
     * @memberof PolicyUpdate
     */
    'compliance_threshold'?: any;
}
/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     *
     * @type {any}
     * @memberof Profile
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof Profile
     */
    'type'?: ProfileTypeEnum;
    /**
     * Identificator of the Profile
     * @type {any}
     * @memberof Profile
     */
    'ref_id'?: any;
    /**
     * Short title of the Profile
     * @type {any}
     * @memberof Profile
     */
    'title'?: any;
    /**
     * Longer description of the Profile
     * @type {any}
     * @memberof Profile
     */
    'description'?: any;
    /**
     * Pair of keys and values for Value Definition customizations
     * @type {any}
     * @memberof Profile
     */
    'value_overrides'?: any;
}

export const ProfileTypeEnum = {
    Profile: 'profile'
} as const;

export type ProfileTypeEnum = typeof ProfileTypeEnum[keyof typeof ProfileTypeEnum];

/**
 *
 * @export
 * @interface Profile200Response
 */
export interface Profile200Response {
    /**
     *
     * @type {Profile200ResponseData}
     * @memberof Profile200Response
     */
    'data'?: Profile200ResponseData;
}
/**
 *
 * @export
 * @interface Profile200ResponseData
 */
export interface Profile200ResponseData {
    /**
     *
     * @type {Profile}
     * @memberof Profile200ResponseData
     */
    'schema'?: Profile;
}
/**
 *
 * @export
 * @interface Profiles200Response
 */
export interface Profiles200Response {
    /**
     *
     * @type {Metadata}
     * @memberof Profiles200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof Profiles200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof Profiles200Response
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface Report
 */
export interface Report {
    /**
     *
     * @type {any}
     * @memberof Report
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof Report
     */
    'type'?: ReportTypeEnum;
    /**
     * Short title of the Report
     * @type {any}
     * @memberof Report
     */
    'title'?: any;
    /**
     * The Business Objective associated to the Policy
     * @type {any}
     * @memberof Report
     */
    'business_objective'?: any;
    /**
     * The percentage above which the Policy meets compliance requirements
     * @type {any}
     * @memberof Report
     */
    'compliance_threshold'?: any;
    /**
     * Major version of the Operating System that the Report covers
     * @type {any}
     * @memberof Report
     */
    'os_major_version'?: any;
    /**
     * Identificator of the Profile
     * @type {any}
     * @memberof Report
     */
    'ref_id'?: any;
    /**
     * Title of the associated Profile
     * @type {any}
     * @memberof Report
     */
    'profile_title'?: any;
    /**
     * Describes percentage of compliant systems
     * @type {any}
     * @memberof Report
     */
    'percent_compliant'?: any;
    /**
     * The number of Systems assigned to this Report. Not visible under the Systems endpoint.
     * @type {any}
     * @memberof Report
     */
    'assigned_system_count'?: any;
    /**
     * The number of compliant Systems in this Report. Inconsistent under the Systems endpoint.
     * @type {any}
     * @memberof Report
     */
    'compliant_system_count'?: any;
    /**
     * Informs if the user has access to all the Systems under the Report. \\                             Inconsistent under the Systems endpoint.
     * @type {any}
     * @memberof Report
     */
    'all_systems_exposed'?: any;
    /**
     * The number of unsupported Systems in this Report. \\                             Inconsistent under the Systems endpoint.
     * @type {any}
     * @memberof Report
     */
    'unsupported_system_count'?: any;
    /**
     * The number of Systems in this Report that have Test Results available. \\                             Inconsistent under the Systems endpoint.
     * @type {any}
     * @memberof Report
     */
    'reported_system_count'?: any;
}

export const ReportTypeEnum = {
    Report: 'report'
} as const;

export type ReportTypeEnum = typeof ReportTypeEnum[keyof typeof ReportTypeEnum];

/**
 *
 * @export
 * @interface Report200Response
 */
export interface Report200Response {
    /**
     *
     * @type {Report200ResponseData}
     * @memberof Report200Response
     */
    'data'?: Report200ResponseData;
}
/**
 *
 * @export
 * @interface Report200ResponseData
 */
export interface Report200ResponseData {
    /**
     *
     * @type {Report}
     * @memberof Report200ResponseData
     */
    'schema'?: Report;
}
/**
 *
 * @export
 * @interface ReportRuleResults200Response
 */
export interface ReportRuleResults200Response {
    /**
     *
     * @type {Metadata}
     * @memberof ReportRuleResults200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof ReportRuleResults200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof ReportRuleResults200Response
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface ReportStats200Response
 */
export interface ReportStats200Response {
    /**
     *
     * @type {ReportStats200ResponseData}
     * @memberof ReportStats200Response
     */
    'data'?: ReportStats200ResponseData;
}
/**
 *
 * @export
 * @interface ReportStats200ResponseData
 */
export interface ReportStats200ResponseData {
    /**
     *
     * @type {any}
     * @memberof ReportStats200ResponseData
     */
    'schema'?: any;
}
/**
 *
 * @export
 * @interface ReportTestResults200Response
 */
export interface ReportTestResults200Response {
    /**
     *
     * @type {Metadata}
     * @memberof ReportTestResults200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof ReportTestResults200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof ReportTestResults200Response
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface Reports200Response
 */
export interface Reports200Response {
    /**
     *
     * @type {Metadata}
     * @memberof Reports200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof Reports200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof Reports200Response
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface Rule
 */
export interface Rule {
    /**
     *
     * @type {any}
     * @memberof Rule
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof Rule
     */
    'type'?: RuleTypeEnum;
    /**
     * Identificator of the Rule
     * @type {any}
     * @memberof Rule
     */
    'ref_id'?: any;
    /**
     * Short title of the Rule
     * @type {any}
     * @memberof Rule
     */
    'title'?: any;
    /**
     * Rationale of the Rule
     * @type {any}
     * @memberof Rule
     */
    'rationale'?: any;
    /**
     * Longer description of the Rule
     * @type {any}
     * @memberof Rule
     */
    'description'?: any;
    /**
     * The original sorting precedence of the Rule in the Security Guide
     * @type {any}
     * @memberof Rule
     */
    'precedence'?: any;
    /**
     * The severity of the Rule
     * @type {any}
     * @memberof Rule
     */
    'severity'?: any;
    /**
     *
     * @type {RuleIdentifier}
     * @memberof Rule
     */
    'identifier'?: RuleIdentifier;
    /**
     * Array of the Rule References
     * @type {any}
     * @memberof Rule
     */
    'references'?: any;
    /**
     * Whether or not a remediation is available for the given rule.
     * @type {any}
     * @memberof Rule
     */
    'remediation_available'?: any;
    /**
     * The idenfitier of the remediation associated to this rule, only available under profiles.
     * @type {any}
     * @memberof Rule
     */
    'remediation_issue_id'?: any;
}

export const RuleTypeEnum = {
    Rule: 'rule'
} as const;

export type RuleTypeEnum = typeof RuleTypeEnum[keyof typeof RuleTypeEnum];

/**
 *
 * @export
 * @interface Rule200Response
 */
export interface Rule200Response {
    /**
     *
     * @type {Rule200ResponseData}
     * @memberof Rule200Response
     */
    'data'?: Rule200ResponseData;
}
/**
 *
 * @export
 * @interface Rule200ResponseData
 */
export interface Rule200ResponseData {
    /**
     *
     * @type {Rule}
     * @memberof Rule200ResponseData
     */
    'schema'?: Rule;
}
/**
 *
 * @export
 * @interface RuleGroup
 */
export interface RuleGroup {
    /**
     *
     * @type {any}
     * @memberof RuleGroup
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof RuleGroup
     */
    'type'?: RuleGroupTypeEnum;
    /**
     * Identificator of the Rule Group
     * @type {any}
     * @memberof RuleGroup
     */
    'ref_id'?: any;
    /**
     * Short title of the Rule Group
     * @type {any}
     * @memberof RuleGroup
     */
    'title'?: any;
    /**
     * Rationale of the Rule Group
     * @type {any}
     * @memberof RuleGroup
     */
    'rationale'?: any;
    /**
     * Longer description of the Rule Group
     * @type {any}
     * @memberof RuleGroup
     */
    'description'?: any;
    /**
     * The original sorting precedence of the Rule Group in the Security Guide
     * @type {any}
     * @memberof RuleGroup
     */
    'precedence'?: any;
}

export const RuleGroupTypeEnum = {
    RuleGroup: 'rule_group'
} as const;

export type RuleGroupTypeEnum = typeof RuleGroupTypeEnum[keyof typeof RuleGroupTypeEnum];

/**
 *
 * @export
 * @interface RuleGroup200Response
 */
export interface RuleGroup200Response {
    /**
     *
     * @type {RuleGroup200ResponseData}
     * @memberof RuleGroup200Response
     */
    'data'?: RuleGroup200ResponseData;
}
/**
 *
 * @export
 * @interface RuleGroup200ResponseData
 */
export interface RuleGroup200ResponseData {
    /**
     *
     * @type {RuleGroup}
     * @memberof RuleGroup200ResponseData
     */
    'schema'?: RuleGroup;
}
/**
 *
 * @export
 * @interface RuleGroups200Response
 */
export interface RuleGroups200Response {
    /**
     *
     * @type {Metadata}
     * @memberof RuleGroups200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof RuleGroups200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof RuleGroups200Response
     */
    'data'?: any;
}
/**
 * Identifier of the Rule
 * @export
 * @interface RuleIdentifier
 */
export interface RuleIdentifier {
    /**
     *
     * @type {any}
     * @memberof RuleIdentifier
     */
    'label'?: any;
    /**
     *
     * @type {any}
     * @memberof RuleIdentifier
     */
    'system'?: any;
}
/**
 *
 * @export
 * @interface RuleResult
 */
export interface RuleResult {
    /**
     *
     * @type {any}
     * @memberof RuleResult
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof RuleResult
     */
    'type'?: RuleResultTypeEnum;
    /**
     * Status of the Rule Result
     * @type {any}
     * @memberof RuleResult
     */
    'result'?: RuleResultResultEnum;
    /**
     * UUID of the affected Rule
     * @type {any}
     * @memberof RuleResult
     */
    'rule_id'?: any;
    /**
     * UUID of the affected System
     * @type {any}
     * @memberof RuleResult
     */
    'system_id'?: any;
    /**
     * Identificator of the Rule
     * @type {any}
     * @memberof RuleResult
     */
    'ref_id'?: any;
    /**
     * Short title of the Rule
     * @type {any}
     * @memberof RuleResult
     */
    'title'?: any;
    /**
     * Rationale of the Rule
     * @type {any}
     * @memberof RuleResult
     */
    'rationale'?: any;
    /**
     * Longer description of the Rule
     * @type {any}
     * @memberof RuleResult
     */
    'description'?: any;
    /**
     * The original sorting precedence of the Rule in the Security Guide
     * @type {any}
     * @memberof RuleResult
     */
    'precedence'?: any;
    /**
     * The severity of the Rule
     * @type {any}
     * @memberof RuleResult
     */
    'severity'?: any;
    /**
     * The idenfitier of the remediation associated to this rule, only available under profiles.
     * @type {any}
     * @memberof RuleResult
     */
    'remediation_issue_id'?: any;
}

export const RuleResultTypeEnum = {
    Rule: 'rule'
} as const;

export type RuleResultTypeEnum = typeof RuleResultTypeEnum[keyof typeof RuleResultTypeEnum];
export const RuleResultResultEnum = {
    Pass: 'pass',
    Fail: 'fail',
    Error: 'error',
    Unknown: 'unknown',
    Fixed: 'fixed',
    Notapplicable: 'notapplicable',
    Notchecked: 'notchecked',
    Informational: 'informational',
    Notselected: 'notselected'
} as const;

export type RuleResultResultEnum = typeof RuleResultResultEnum[keyof typeof RuleResultResultEnum];

/**
 *
 * @export
 * @interface Rules200Response
 */
export interface Rules200Response {
    /**
     *
     * @type {Metadata}
     * @memberof Rules200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof Rules200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof Rules200Response
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface SecurityGuide
 */
export interface SecurityGuide {
    /**
     *
     * @type {any}
     * @memberof SecurityGuide
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof SecurityGuide
     */
    'type'?: SecurityGuideTypeEnum;
    /**
     * Identificator of the Security Guide
     * @type {any}
     * @memberof SecurityGuide
     */
    'ref_id'?: any;
    /**
     * Short title of the Security Guide
     * @type {any}
     * @memberof SecurityGuide
     */
    'title'?: any;
    /**
     * Version of the Security Guide
     * @type {any}
     * @memberof SecurityGuide
     */
    'version'?: any;
    /**
     * Longer description of the Security Guide
     * @type {any}
     * @memberof SecurityGuide
     */
    'description'?: any;
    /**
     * Major version of the Operating System that the Security Guide covers
     * @type {any}
     * @memberof SecurityGuide
     */
    'os_major_version'?: any;
}

export const SecurityGuideTypeEnum = {
    SecurityGuide: 'security_guide'
} as const;

export type SecurityGuideTypeEnum = typeof SecurityGuideTypeEnum[keyof typeof SecurityGuideTypeEnum];

/**
 *
 * @export
 * @interface SecurityGuide200Response
 */
export interface SecurityGuide200Response {
    /**
     *
     * @type {SecurityGuide200ResponseData}
     * @memberof SecurityGuide200Response
     */
    'data'?: SecurityGuide200ResponseData;
}
/**
 *
 * @export
 * @interface SecurityGuide200ResponseData
 */
export interface SecurityGuide200ResponseData {
    /**
     *
     * @type {SecurityGuide}
     * @memberof SecurityGuide200ResponseData
     */
    'schema'?: SecurityGuide;
}
/**
 *
 * @export
 * @interface SecurityGuides200Response
 */
export interface SecurityGuides200Response {
    /**
     *
     * @type {Metadata}
     * @memberof SecurityGuides200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof SecurityGuides200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof SecurityGuides200Response
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface SupportedProfile
 */
export interface SupportedProfile {
    /**
     *
     * @type {any}
     * @memberof SupportedProfile
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof SupportedProfile
     */
    'type'?: SupportedProfileTypeEnum;
    /**
     * Identificator of the latest supported Profile
     * @type {any}
     * @memberof SupportedProfile
     */
    'ref_id'?: any;
    /**
     * Short title of the Profile
     * @type {any}
     * @memberof SupportedProfile
     */
    'title'?: any;
    /**
     * Longer description of the Profile
     * @type {any}
     * @memberof SupportedProfile
     */
    'description'?: any;
    /**
     * UUID of the latest Security Guide supporting this Profile
     * @type {any}
     * @memberof SupportedProfile
     */
    'security_guide_id'?: any;
    /**
     * Version of the latest Security Guide supporting this Profile
     * @type {any}
     * @memberof SupportedProfile
     */
    'security_guide_version'?: any;
    /**
     * Major version of the Operating System that the Profile covers
     * @type {any}
     * @memberof SupportedProfile
     */
    'os_major_version'?: any;
    /**
     * List of the supported Operating System minor versions that the Profile covers
     * @type {any}
     * @memberof SupportedProfile
     */
    'os_minor_versions'?: any;
}

export const SupportedProfileTypeEnum = {
    SupportedProfile: 'supported_profile'
} as const;

export type SupportedProfileTypeEnum = typeof SupportedProfileTypeEnum[keyof typeof SupportedProfileTypeEnum];

/**
 *
 * @export
 * @interface SupportedProfiles200Response
 */
export interface SupportedProfiles200Response {
    /**
     *
     * @type {Metadata}
     * @memberof SupportedProfiles200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof SupportedProfiles200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof SupportedProfiles200Response
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface System
 */
export interface System {
    /**
     *
     * @type {any}
     * @memberof System
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof System
     */
    'type'?: SystemTypeEnum;
    /**
     * Display Name of the System
     * @type {any}
     * @memberof System
     */
    'display_name'?: any;
    /**
     *
     * @type {any}
     * @memberof System
     */
    'groups'?: any;
    /**
     *
     * @type {any}
     * @memberof System
     */
    'culled_timestamp'?: any;
    /**
     *
     * @type {any}
     * @memberof System
     */
    'stale_timestamp'?: any;
    /**
     *
     * @type {any}
     * @memberof System
     */
    'stale_warning_timestamp'?: any;
    /**
     *
     * @type {any}
     * @memberof System
     */
    'updated'?: any;
    /**
     *
     * @type {any}
     * @memberof System
     */
    'insights_id'?: any;
    /**
     *
     * @type {any}
     * @memberof System
     */
    'tags'?: any;
    /**
     * Major version of the Operating System
     * @type {any}
     * @memberof System
     */
    'os_major_version'?: any;
    /**
     * Minor version of the Operating System
     * @type {any}
     * @memberof System
     */
    'os_minor_version'?: any;
    /**
     * List of Policies assigned to the System, visible only when not listing Systems under a given Policy
     * @type {any}
     * @memberof System
     */
    'policies'?: any;
}

export const SystemTypeEnum = {
    System: 'system'
} as const;

export type SystemTypeEnum = typeof SystemTypeEnum[keyof typeof SystemTypeEnum];

/**
 *
 * @export
 * @interface System200Response
 */
export interface System200Response {
    /**
     *
     * @type {System200ResponseData}
     * @memberof System200Response
     */
    'data'?: System200ResponseData;
}
/**
 *
 * @export
 * @interface System200ResponseData
 */
export interface System200ResponseData {
    /**
     *
     * @type {System}
     * @memberof System200ResponseData
     */
    'schema'?: System;
}
/**
 *
 * @export
 * @interface Systems200Response
 */
export interface Systems200Response {
    /**
     *
     * @type {Metadata}
     * @memberof Systems200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof Systems200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof Systems200Response
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface Tailoring
 */
export interface Tailoring {
    /**
     *
     * @type {any}
     * @memberof Tailoring
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof Tailoring
     */
    'type'?: TailoringTypeEnum;
    /**
     * Identificator of the Profile from which the Tailoring was cloned
     * @type {any}
     * @memberof Tailoring
     */
    'profile_id'?: any;
    /**
     * Identificator of the Security Guide that contains the parent Profile
     * @type {any}
     * @memberof Tailoring
     */
    'security_guide_id'?: any;
    /**
     * Version of the Security Guide that contains the parent Profile
     * @type {any}
     * @memberof Tailoring
     */
    'security_guide_version'?: any;
    /**
     * Major version of the Operating System that the Tailoring covers
     * @type {any}
     * @memberof Tailoring
     */
    'os_major_version'?: any;
    /**
     * Minor version of the Operating System that the Tailoring covers
     * @type {any}
     * @memberof Tailoring
     */
    'os_minor_version'?: any;
    /**
     * Pair of keys and values for Value Definition customizations
     * @type {any}
     * @memberof Tailoring
     */
    'value_overrides'?: any;
}

export const TailoringTypeEnum = {
    Tailoring: 'tailoring'
} as const;

export type TailoringTypeEnum = typeof TailoringTypeEnum[keyof typeof TailoringTypeEnum];

/**
 *
 * @export
 * @interface Tailoring200Response
 */
export interface Tailoring200Response {
    /**
     *
     * @type {Tailoring200ResponseData}
     * @memberof Tailoring200Response
     */
    'data'?: Tailoring200ResponseData;
}
/**
 *
 * @export
 * @interface Tailoring200ResponseData
 */
export interface Tailoring200ResponseData {
    /**
     *
     * @type {Tailoring}
     * @memberof Tailoring200ResponseData
     */
    'schema'?: Tailoring;
}
/**
 * Defines customizations of rules and variables for a set of profiles
 * @export
 * @interface TailoringFile
 */
export interface TailoringFile {
    [key: string]: any;

    /**
     *
     * @type {any}
     * @memberof TailoringFile
     */
    'profiles'?: any;
}
/**
 *
 * @export
 * @interface Tailorings200Response
 */
export interface Tailorings200Response {
    /**
     *
     * @type {Metadata}
     * @memberof Tailorings200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof Tailorings200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof Tailorings200Response
     */
    'data'?: any;
}
/**
 *
 * @export
 * @interface TestResult
 */
export interface TestResult {
    /**
     *
     * @type {any}
     * @memberof TestResult
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof TestResult
     */
    'type'?: TestResultTypeEnum;
    /**
     * Display Name of the System
     * @type {any}
     * @memberof TestResult
     */
    'display_name'?: any;
    /**
     *
     * @type {any}
     * @memberof TestResult
     */
    'groups'?: any;
    /**
     *
     * @type {any}
     * @memberof TestResult
     */
    'tags'?: any;
    /**
     * UUID of the underlying System
     * @type {any}
     * @memberof TestResult
     */
    'system_id'?: any;
    /**
     * Major version of the Operating System
     * @type {any}
     * @memberof TestResult
     */
    'os_major_version'?: any;
    /**
     * Minor version of the Operating System
     * @type {any}
     * @memberof TestResult
     */
    'os_minor_version'?: any;
    /**
     * Whether the Test Result is compliant or not within a given Report.
     * @type {any}
     * @memberof TestResult
     */
    'compliant'?: any;
    /**
     * Compliance Score of the System within a given Report.
     * @type {any}
     * @memberof TestResult
     */
    'score'?: any;
    /**
     * Whether the System is supported or not by a Profile within a given Policy.
     * @type {any}
     * @memberof TestResult
     */
    'supported'?: any;
    /**
     * Number of failed rules in the Test Result
     * @type {any}
     * @memberof TestResult
     */
    'failed_rule_count'?: any;
    /**
     * The date when the System has been reported a Test Result for the last time.
     * @type {any}
     * @memberof TestResult
     */
    'end_time'?: any;
}

export const TestResultTypeEnum = {
    TestResult: 'test_result'
} as const;

export type TestResultTypeEnum = typeof TestResultTypeEnum[keyof typeof TestResultTypeEnum];

/**
 *
 * @export
 * @interface ValueDefinition
 */
export interface ValueDefinition {
    /**
     *
     * @type {any}
     * @memberof ValueDefinition
     */
    'id'?: any;
    /**
     *
     * @type {any}
     * @memberof ValueDefinition
     */
    'type'?: ValueDefinitionTypeEnum;
    /**
     * Identificator of the Value Definition
     * @type {any}
     * @memberof ValueDefinition
     */
    'ref_id'?: any;
    /**
     * Short title of the Value Definition
     * @type {any}
     * @memberof ValueDefinition
     */
    'title'?: any;
    /**
     * Type of the Value Definition
     * @type {any}
     * @memberof ValueDefinition
     */
    'value_type'?: any;
    /**
     * Longer description of the Value Definition
     * @type {any}
     * @memberof ValueDefinition
     */
    'description'?: any;
    /**
     * Default value of the Value Definition
     * @type {any}
     * @memberof ValueDefinition
     */
    'default_value'?: any;
}

export const ValueDefinitionTypeEnum = {
    ValueDefinition: 'value_definition'
} as const;

export type ValueDefinitionTypeEnum = typeof ValueDefinitionTypeEnum[keyof typeof ValueDefinitionTypeEnum];

/**
 *
 * @export
 * @interface ValueDefinition200Response
 */
export interface ValueDefinition200Response {
    /**
     *
     * @type {ValueDefinition200ResponseData}
     * @memberof ValueDefinition200Response
     */
    'data'?: ValueDefinition200ResponseData;
}
/**
 *
 * @export
 * @interface ValueDefinition200ResponseData
 */
export interface ValueDefinition200ResponseData {
    /**
     *
     * @type {ValueDefinition}
     * @memberof ValueDefinition200ResponseData
     */
    'schema'?: ValueDefinition;
}
/**
 *
 * @export
 * @interface ValueDefinitions200Response
 */
export interface ValueDefinitions200Response {
    /**
     *
     * @type {Metadata}
     * @memberof ValueDefinitions200Response
     */
    'meta'?: Metadata;
    /**
     *
     * @type {Links}
     * @memberof ValueDefinitions200Response
     */
    'links'?: Links;
    /**
     *
     * @type {any}
     * @memberof ValueDefinitions200Response
     */
    'data'?: any;
}

/**
 * AssignRuleApi - axios parameter creator
 * @export
 */
export const AssignRuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assigns a Rule to a Tailoring
         * @summary Assign a Rule to a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRule: async (policyId: any, tailoringId: any, ruleId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('assignRule', 'policyId', policyId)
            // verify required parameter 'tailoringId' is not null or undefined
            assertParamExists('assignRule', 'tailoringId', tailoringId)
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('assignRule', 'ruleId', ruleId)
            const localVarPath = `/policies/{policy_id}/tailorings/{tailoring_id}/rules/{rule_id}`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)))
                .replace(`{${"tailoring_id"}}`, encodeURIComponent(String(tailoringId)))
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssignRuleApi - functional programming interface
 * @export
 */
export const AssignRuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssignRuleApiAxiosParamCreator(configuration)
    return {
        /**
         * Assigns a Rule to a Tailoring
         * @summary Assign a Rule to a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignRule(policyId: any, tailoringId: any, ruleId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignRule(policyId, tailoringId, ruleId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssignRuleApi - factory interface
 * @export
 */
export const AssignRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssignRuleApiFp(configuration)
    return {
        /**
         * Assigns a Rule to a Tailoring
         * @summary Assign a Rule to a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRule(policyId: any, tailoringId: any, ruleId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<void> {
            return localVarFp.assignRule(policyId, tailoringId, ruleId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssignRuleApi - object-oriented interface
 * @export
 * @class AssignRuleApi
 * @extends {BaseAPI}
 */
export class AssignRuleApi extends BaseAPI {
    /**
     * Assigns a Rule to a Tailoring
     * @summary Assign a Rule to a Tailoring
     * @param {any} policyId
     * @param {any} tailoringId
     * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignRuleApi
     */
    public assignRule(policyId: any, tailoringId: any, ruleId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return AssignRuleApiFp(this.configuration).assignRule(policyId, tailoringId, ruleId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AssignRulesApi - axios parameter creator
 * @export
 */
export const AssignRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Bulk assign Rules to a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {AssignRulesRequest} [assignRulesRequest]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        assignRules: async (policyId: any, tailoringId: any, xRHIDENTITY?: any, assignRulesRequest?: AssignRulesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('assignRules', 'policyId', policyId)
            // verify required parameter 'tailoringId' is not null or undefined
            assertParamExists('assignRules', 'tailoringId', tailoringId)
            const localVarPath = `/policies/{policy_id}/tailorings/{tailoring_id}/rules`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)))
                .replace(`{${"tailoring_id"}}`, encodeURIComponent(String(tailoringId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssignRulesApi - functional programming interface
 * @export
 */
export const AssignRulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssignRulesApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Bulk assign Rules to a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {AssignRulesRequest} [assignRulesRequest]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async assignRules(policyId: any, tailoringId: any, xRHIDENTITY?: any, assignRulesRequest?: AssignRulesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rules200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignRules(policyId, tailoringId, xRHIDENTITY, assignRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssignRulesApi - factory interface
 * @export
 */
export const AssignRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssignRulesApiFp(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Bulk assign Rules to a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {AssignRulesRequest} [assignRulesRequest]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        assignRules(policyId: any, tailoringId: any, xRHIDENTITY?: any, assignRulesRequest?: AssignRulesRequest, options?: any): AxiosPromise<Rules200Response> {
            return localVarFp.assignRules(policyId, tailoringId, xRHIDENTITY, assignRulesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssignRulesApi - object-oriented interface
 * @export
 * @class AssignRulesApi
 * @extends {BaseAPI}
 */
export class AssignRulesApi extends BaseAPI {
    /**
     * This feature is exclusively used by the frontend
     * @summary Bulk assign Rules to a Tailoring
     * @param {any} policyId
     * @param {any} tailoringId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {AssignRulesRequest} [assignRulesRequest]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AssignRulesApi
     */
    public assignRules(policyId: any, tailoringId: any, xRHIDENTITY?: any, assignRulesRequest?: AssignRulesRequest, options?: AxiosRequestConfig) {
        return AssignRulesApiFp(this.configuration).assignRules(policyId, tailoringId, xRHIDENTITY, assignRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AssignSystemApi - axios parameter creator
 * @export
 */
export const AssignSystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Assigns a System to a Policy
         * @summary Assign a System to a Policy
         * @param {any} systemId
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSystem: async (systemId: any, policyId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('assignSystem', 'systemId', systemId)
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('assignSystem', 'policyId', policyId)
            const localVarPath = `/policies/{policy_id}/systems/{system_id}`
                .replace(`{${"system_id"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssignSystemApi - functional programming interface
 * @export
 */
export const AssignSystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssignSystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Assigns a System to a Policy
         * @summary Assign a System to a Policy
         * @param {any} systemId
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignSystem(systemId: any, policyId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<System200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignSystem(systemId, policyId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssignSystemApi - factory interface
 * @export
 */
export const AssignSystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssignSystemApiFp(configuration)
    return {
        /**
         * Assigns a System to a Policy
         * @summary Assign a System to a Policy
         * @param {any} systemId
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignSystem(systemId: any, policyId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<System200Response> {
            return localVarFp.assignSystem(systemId, policyId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssignSystemApi - object-oriented interface
 * @export
 * @class AssignSystemApi
 * @extends {BaseAPI}
 */
export class AssignSystemApi extends BaseAPI {
    /**
     * Assigns a System to a Policy
     * @summary Assign a System to a Policy
     * @param {any} systemId
     * @param {any} policyId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssignSystemApi
     */
    public assignSystem(systemId: any, policyId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return AssignSystemApiFp(this.configuration).assignSystem(systemId, policyId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AssignSystemsApi - axios parameter creator
 * @export
 */
export const AssignSystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Bulk assign Systems to a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {AssignRulesRequest} [assignRulesRequest]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        assignSystems: async (policyId: any, xRHIDENTITY?: any, assignRulesRequest?: AssignRulesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('assignSystems', 'policyId', policyId)
            const localVarPath = `/policies/{policy_id}/systems`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(assignRulesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssignSystemsApi - functional programming interface
 * @export
 */
export const AssignSystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssignSystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Bulk assign Systems to a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {AssignRulesRequest} [assignRulesRequest]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async assignSystems(policyId: any, xRHIDENTITY?: any, assignRulesRequest?: AssignRulesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Systems200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignSystems(policyId, xRHIDENTITY, assignRulesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssignSystemsApi - factory interface
 * @export
 */
export const AssignSystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssignSystemsApiFp(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Bulk assign Systems to a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {AssignRulesRequest} [assignRulesRequest]
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        assignSystems(policyId: any, xRHIDENTITY?: any, assignRulesRequest?: AssignRulesRequest, options?: any): AxiosPromise<Systems200Response> {
            return localVarFp.assignSystems(policyId, xRHIDENTITY, assignRulesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AssignSystemsApi - object-oriented interface
 * @export
 * @class AssignSystemsApi
 * @extends {BaseAPI}
 */
export class AssignSystemsApi extends BaseAPI {
    /**
     * This feature is exclusively used by the frontend
     * @summary Bulk assign Systems to a Policy
     * @param {any} policyId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {AssignRulesRequest} [assignRulesRequest]
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof AssignSystemsApi
     */
    public assignSystems(policyId: any, xRHIDENTITY?: any, assignRulesRequest?: AssignRulesRequest, options?: AxiosRequestConfig) {
        return AssignSystemsApiFp(this.configuration).assignSystems(policyId, xRHIDENTITY, assignRulesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CreatePolicyApi - axios parameter creator
 * @export
 */
export const CreatePolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a Policy with the provided attributes
         * @summary Create a Policy
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {Policy} [policy]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy: async (xRHIDENTITY?: any, policy?: Policy, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(policy, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreatePolicyApi - functional programming interface
 * @export
 */
export const CreatePolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreatePolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a Policy with the provided attributes
         * @summary Create a Policy
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {Policy} [policy]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicy(xRHIDENTITY?: any, policy?: Policy, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePolicy201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicy(xRHIDENTITY, policy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreatePolicyApi - factory interface
 * @export
 */
export const CreatePolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreatePolicyApiFp(configuration)
    return {
        /**
         * Create a Policy with the provided attributes
         * @summary Create a Policy
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {Policy} [policy]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy(xRHIDENTITY?: any, policy?: Policy, options?: any): AxiosPromise<CreatePolicy201Response> {
            return localVarFp.createPolicy(xRHIDENTITY, policy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreatePolicyApi - object-oriented interface
 * @export
 * @class CreatePolicyApi
 * @extends {BaseAPI}
 */
export class CreatePolicyApi extends BaseAPI {
    /**
     * Create a Policy with the provided attributes
     * @summary Create a Policy
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {Policy} [policy]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreatePolicyApi
     */
    public createPolicy(xRHIDENTITY?: any, policy?: Policy, options?: AxiosRequestConfig) {
        return CreatePolicyApiFp(this.configuration).createPolicy(xRHIDENTITY, policy, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeletePolicyApi - axios parameter creator
 * @export
 */
export const DeletePolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes a Policy
         * @summary Delete a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy: async (policyId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('deletePolicy', 'policyId', policyId)
            const localVarPath = `/policies/{policy_id}`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeletePolicyApi - functional programming interface
 * @export
 */
export const DeletePolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeletePolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes a Policy
         * @summary Delete a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePolicy(policyId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePolicy201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePolicy(policyId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeletePolicyApi - factory interface
 * @export
 */
export const DeletePolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeletePolicyApiFp(configuration)
    return {
        /**
         * Deletes a Policy
         * @summary Delete a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePolicy(policyId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<CreatePolicy201Response> {
            return localVarFp.deletePolicy(policyId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeletePolicyApi - object-oriented interface
 * @export
 * @class DeletePolicyApi
 * @extends {BaseAPI}
 */
export class DeletePolicyApi extends BaseAPI {
    /**
     * Deletes a Policy
     * @summary Delete a Policy
     * @param {any} policyId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeletePolicyApi
     */
    public deletePolicy(policyId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return DeletePolicyApiFp(this.configuration).deletePolicy(policyId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DeleteReportApi - axios parameter creator
 * @export
 */
export const DeleteReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes Report\'s test results
         * @summary Delete a Report results
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport: async (reportId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('deleteReport', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeleteReportApi - functional programming interface
 * @export
 */
export const DeleteReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeleteReportApiAxiosParamCreator(configuration)
    return {
        /**
         * Deletes Report\'s test results
         * @summary Delete a Report results
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteReport(reportId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReport(reportId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeleteReportApi - factory interface
 * @export
 */
export const DeleteReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeleteReportApiFp(configuration)
    return {
        /**
         * Deletes Report\'s test results
         * @summary Delete a Report results
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteReport(reportId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<void> {
            return localVarFp.deleteReport(reportId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeleteReportApi - object-oriented interface
 * @export
 * @class DeleteReportApi
 * @extends {BaseAPI}
 */
export class DeleteReportApi extends BaseAPI {
    /**
     * Deletes Report\'s test results
     * @summary Delete a Report results
     * @param {any} reportId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeleteReportApi
     */
    public deleteReport(reportId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return DeleteReportApiFp(this.configuration).deleteReport(reportId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PoliciesApi - axios parameter creator
 * @export
 */
export const PoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Policies
         * @summary Request Policies
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Policies are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policies: async (xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoliciesApi - functional programming interface
 * @export
 */
export const PoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Policies
         * @summary Request Policies
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Policies are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policies(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policies200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policies(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PoliciesApi - factory interface
 * @export
 */
export const PoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PoliciesApiFp(configuration)
    return {
        /**
         * Lists Policies
         * @summary Request Policies
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Policies are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policies(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Policies200Response> {
            return localVarFp.policies(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PoliciesApi - object-oriented interface
 * @export
 * @class PoliciesApi
 * @extends {BaseAPI}
 */
export class PoliciesApi extends BaseAPI {
    /**
     * Lists Policies
     * @summary Request Policies
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Policies are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoliciesApi
     */
    public policies(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return PoliciesApiFp(this.configuration).policies(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PolicyApi - axios parameter creator
 * @export
 */
export const PolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Policy
         * @summary Request a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policy: async (policyId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('policy', 'policyId', policyId)
            const localVarPath = `/policies/{policy_id}`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicyApi - functional programming interface
 * @export
 */
export const PolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Policy
         * @summary Request a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policy(policyId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePolicy201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policy(policyId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PolicyApi - factory interface
 * @export
 */
export const PolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PolicyApiFp(configuration)
    return {
        /**
         * Returns a Policy
         * @summary Request a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policy(policyId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<CreatePolicy201Response> {
            return localVarFp.policy(policyId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PolicyApi - object-oriented interface
 * @export
 * @class PolicyApi
 * @extends {BaseAPI}
 */
export class PolicyApi extends BaseAPI {
    /**
     * Returns a Policy
     * @summary Request a Policy
     * @param {any} policyId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApi
     */
    public policy(policyId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return PolicyApiFp(this.configuration).policy(policyId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PolicySystemsApi - axios parameter creator
 * @export
 */
export const PolicySystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Systems assigned to a Policy
         * @summary Request Systems assigned to a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, and &#x60;group_name&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policySystems: async (policyId: any, xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('policySystems', 'policyId', policyId)
            const localVarPath = `/policies/{policy_id}/systems`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicySystemsApi - functional programming interface
 * @export
 */
export const PolicySystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PolicySystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Systems assigned to a Policy
         * @summary Request Systems assigned to a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, and &#x60;group_name&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async policySystems(policyId: any, xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Systems200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policySystems(policyId, xRHIDENTITY, tags, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PolicySystemsApi - factory interface
 * @export
 */
export const PolicySystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PolicySystemsApiFp(configuration)
    return {
        /**
         * Lists Systems assigned to a Policy
         * @summary Request Systems assigned to a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, and &#x60;group_name&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        policySystems(policyId: any, xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Systems200Response> {
            return localVarFp.policySystems(policyId, xRHIDENTITY, tags, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PolicySystemsApi - object-oriented interface
 * @export
 * @class PolicySystemsApi
 * @extends {BaseAPI}
 */
export class PolicySystemsApi extends BaseAPI {
    /**
     * Lists Systems assigned to a Policy
     * @summary Request Systems assigned to a Policy
     * @param {any} policyId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, and &#x60;group_name&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicySystemsApi
     */
    public policySystems(policyId: any, xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return PolicySystemsApiFp(this.configuration).policySystems(policyId, xRHIDENTITY, tags, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PolicySystemsOSApi - axios parameter creator
 * @export
 */
export const PolicySystemsOSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        policySystemsOS: async (policyId: any, xRHIDENTITY?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('policySystemsOS', 'policyId', policyId)
            const localVarPath = `/policies/{policy_id}/systems/os_versions`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PolicySystemsOSApi - functional programming interface
 * @export
 */
export const PolicySystemsOSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PolicySystemsOSApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async policySystemsOS(policyId: any, xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.policySystemsOS(policyId, xRHIDENTITY, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PolicySystemsOSApi - factory interface
 * @export
 */
export const PolicySystemsOSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PolicySystemsOSApiFp(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        policySystemsOS(policyId: any, xRHIDENTITY?: any, filter?: any, options?: any): AxiosPromise<any> {
            return localVarFp.policySystemsOS(policyId, xRHIDENTITY, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PolicySystemsOSApi - object-oriented interface
 * @export
 * @class PolicySystemsOSApi
 * @extends {BaseAPI}
 */
export class PolicySystemsOSApi extends BaseAPI {
    /**
     * This feature is exclusively used by the frontend
     * @summary Request the list of available OS versions
     * @param {any} policyId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof PolicySystemsOSApi
     */
    public policySystemsOS(policyId: any, xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig) {
        return PolicySystemsOSApiFp(this.configuration).policySystemsOS(policyId, xRHIDENTITY, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileApi - axios parameter creator
 * @export
 */
export const ProfileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Profile
         * @summary Request a Profile
         * @param {any} securityGuideId
         * @param {any} profileId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profile: async (securityGuideId: any, profileId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('profile', 'securityGuideId', securityGuideId)
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('profile', 'profileId', profileId)
            const localVarPath = `/security_guides/{security_guide_id}/profiles/{profile_id}`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)))
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileApi - functional programming interface
 * @export
 */
export const ProfileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Profile
         * @summary Request a Profile
         * @param {any} securityGuideId
         * @param {any} profileId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profile(securityGuideId: any, profileId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profile(securityGuideId, profileId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileApi - factory interface
 * @export
 */
export const ProfileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileApiFp(configuration)
    return {
        /**
         * Returns a Profile
         * @summary Request a Profile
         * @param {any} securityGuideId
         * @param {any} profileId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profile(securityGuideId: any, profileId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<Profile200Response> {
            return localVarFp.profile(securityGuideId, profileId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileApi - object-oriented interface
 * @export
 * @class ProfileApi
 * @extends {BaseAPI}
 */
export class ProfileApi extends BaseAPI {
    /**
     * Returns a Profile
     * @summary Request a Profile
     * @param {any} securityGuideId
     * @param {any} profileId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileApi
     */
    public profile(securityGuideId: any, profileId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return ProfileApiFp(this.configuration).profile(securityGuideId, profileId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileRuleApi - axios parameter creator
 * @export
 */
export const ProfileRuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Rule assigned to a Profile
         * @summary Request a Rule assigned to a Profile
         * @param {any} securityGuideId
         * @param {any} profileId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileRule: async (securityGuideId: any, profileId: any, ruleId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('profileRule', 'securityGuideId', securityGuideId)
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('profileRule', 'profileId', profileId)
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('profileRule', 'ruleId', ruleId)
            const localVarPath = `/security_guides/{security_guide_id}/profiles/{profile_id}/rules/{rule_id}`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)))
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)))
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileRuleApi - functional programming interface
 * @export
 */
export const ProfileRuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileRuleApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Rule assigned to a Profile
         * @summary Request a Rule assigned to a Profile
         * @param {any} securityGuideId
         * @param {any} profileId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileRule(securityGuideId: any, profileId: any, ruleId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileRule(securityGuideId, profileId, ruleId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileRuleApi - factory interface
 * @export
 */
export const ProfileRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileRuleApiFp(configuration)
    return {
        /**
         * Returns a Rule assigned to a Profile
         * @summary Request a Rule assigned to a Profile
         * @param {any} securityGuideId
         * @param {any} profileId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileRule(securityGuideId: any, profileId: any, ruleId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<Rule200Response> {
            return localVarFp.profileRule(securityGuideId, profileId, ruleId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileRuleApi - object-oriented interface
 * @export
 * @class ProfileRuleApi
 * @extends {BaseAPI}
 */
export class ProfileRuleApi extends BaseAPI {
    /**
     * Returns a Rule assigned to a Profile
     * @summary Request a Rule assigned to a Profile
     * @param {any} securityGuideId
     * @param {any} profileId
     * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileRuleApi
     */
    public profileRule(securityGuideId: any, profileId: any, ruleId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return ProfileRuleApiFp(this.configuration).profileRule(securityGuideId, profileId, ruleId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfileRulesApi - axios parameter creator
 * @export
 */
export const ProfileRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Rules assigned to a Profile
         * @summary Request Rules assigned to a Profile
         * @param {any} securityGuideId
         * @param {any} profileId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileRules: async (securityGuideId: any, profileId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('profileRules', 'securityGuideId', securityGuideId)
            // verify required parameter 'profileId' is not null or undefined
            assertParamExists('profileRules', 'profileId', profileId)
            const localVarPath = `/security_guides/{security_guide_id}/profiles/{profile_id}/rules`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)))
                .replace(`{${"profile_id"}}`, encodeURIComponent(String(profileId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileRulesApi - functional programming interface
 * @export
 */
export const ProfileRulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileRulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Rules assigned to a Profile
         * @summary Request Rules assigned to a Profile
         * @param {any} securityGuideId
         * @param {any} profileId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profileRules(securityGuideId: any, profileId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rules200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profileRules(securityGuideId, profileId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileRulesApi - factory interface
 * @export
 */
export const ProfileRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileRulesApiFp(configuration)
    return {
        /**
         * Lists Rules assigned to a Profile
         * @summary Request Rules assigned to a Profile
         * @param {any} securityGuideId
         * @param {any} profileId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profileRules(securityGuideId: any, profileId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Rules200Response> {
            return localVarFp.profileRules(securityGuideId, profileId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileRulesApi - object-oriented interface
 * @export
 * @class ProfileRulesApi
 * @extends {BaseAPI}
 */
export class ProfileRulesApi extends BaseAPI {
    /**
     * Lists Rules assigned to a Profile
     * @summary Request Rules assigned to a Profile
     * @param {any} securityGuideId
     * @param {any} profileId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileRulesApi
     */
    public profileRules(securityGuideId: any, profileId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return ProfileRulesApiFp(this.configuration).profileRules(securityGuideId, profileId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProfilesApi - axios parameter creator
 * @export
 */
export const ProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Profiles
         * @summary Request Profiles
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Profiles are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profiles: async (securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('profiles', 'securityGuideId', securityGuideId)
            const localVarPath = `/security_guides/{security_guide_id}/profiles`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfilesApi - functional programming interface
 * @export
 */
export const ProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Profiles
         * @summary Request Profiles
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Profiles are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async profiles(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profiles200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.profiles(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfilesApi - factory interface
 * @export
 */
export const ProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfilesApiFp(configuration)
    return {
        /**
         * Lists Profiles
         * @summary Request Profiles
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Profiles are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        profiles(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Profiles200Response> {
            return localVarFp.profiles(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfilesApi - object-oriented interface
 * @export
 * @class ProfilesApi
 * @extends {BaseAPI}
 */
export class ProfilesApi extends BaseAPI {
    /**
     * Lists Profiles
     * @summary Request Profiles
     * @param {any} securityGuideId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Profiles are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfilesApi
     */
    public profiles(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return ProfilesApiFp(this.configuration).profiles(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Report
         * @summary Request a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        report: async (reportId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('report', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Report
         * @summary Request a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async report(reportId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Report200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.report(reportId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportApiFp(configuration)
    return {
        /**
         * Returns a Report
         * @summary Request a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        report(reportId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<Report200Response> {
            return localVarFp.report(reportId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI {
    /**
     * Returns a Report
     * @summary Request a Report
     * @param {any} reportId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public report(reportId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return ReportApiFp(this.configuration).report(reportId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportRuleResultsApi - axios parameter creator
 * @export
 */
export const ReportRuleResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Rule Results under a Report
         * @summary Request Rule Results under a Report
         * @param {any} testResultId
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rule Results are searchable using attributes &#x60;result&#x60;, &#x60;title&#x60;, &#x60;severity&#x60;, and &#x60;remediation_available&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportRuleResults: async (testResultId: any, reportId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testResultId' is not null or undefined
            assertParamExists('reportRuleResults', 'testResultId', testResultId)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('reportRuleResults', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}/test_results/{test_result_id}/rule_results`
                .replace(`{${"test_result_id"}}`, encodeURIComponent(String(testResultId)))
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportRuleResultsApi - functional programming interface
 * @export
 */
export const ReportRuleResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportRuleResultsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Rule Results under a Report
         * @summary Request Rule Results under a Report
         * @param {any} testResultId
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rule Results are searchable using attributes &#x60;result&#x60;, &#x60;title&#x60;, &#x60;severity&#x60;, and &#x60;remediation_available&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportRuleResults(testResultId: any, reportId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportRuleResults200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportRuleResults(testResultId, reportId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportRuleResultsApi - factory interface
 * @export
 */
export const ReportRuleResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportRuleResultsApiFp(configuration)
    return {
        /**
         * Lists Rule Results under a Report
         * @summary Request Rule Results under a Report
         * @param {any} testResultId
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rule Results are searchable using attributes &#x60;result&#x60;, &#x60;title&#x60;, &#x60;severity&#x60;, and &#x60;remediation_available&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportRuleResults(testResultId: any, reportId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<ReportRuleResults200Response> {
            return localVarFp.reportRuleResults(testResultId, reportId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportRuleResultsApi - object-oriented interface
 * @export
 * @class ReportRuleResultsApi
 * @extends {BaseAPI}
 */
export class ReportRuleResultsApi extends BaseAPI {
    /**
     * Lists Rule Results under a Report
     * @summary Request Rule Results under a Report
     * @param {any} testResultId
     * @param {any} reportId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rule Results are searchable using attributes &#x60;result&#x60;, &#x60;title&#x60;, &#x60;severity&#x60;, and &#x60;remediation_available&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportRuleResultsApi
     */
    public reportRuleResults(testResultId: any, reportId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return ReportRuleResultsApiFp(this.configuration).reportRuleResults(testResultId, reportId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportStatsApi - axios parameter creator
 * @export
 */
export const ReportStatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns detailed stats for a Report
         * @summary Request detailed stats for a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        reportStats: async (reportId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('reportStats', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}/stats`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportStatsApi - functional programming interface
 * @export
 */
export const ReportStatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportStatsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns detailed stats for a Report
         * @summary Request detailed stats for a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async reportStats(reportId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportStats200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportStats(reportId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportStatsApi - factory interface
 * @export
 */
export const ReportStatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportStatsApiFp(configuration)
    return {
        /**
         * Returns detailed stats for a Report
         * @summary Request detailed stats for a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        reportStats(reportId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<ReportStats200Response> {
            return localVarFp.reportStats(reportId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportStatsApi - object-oriented interface
 * @export
 * @class ReportStatsApi
 * @extends {BaseAPI}
 */
export class ReportStatsApi extends BaseAPI {
    /**
     * Returns detailed stats for a Report
     * @summary Request detailed stats for a Report
     * @param {any} reportId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ReportStatsApi
     */
    public reportStats(reportId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return ReportStatsApiFp(this.configuration).reportStats(reportId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportSystemApi - axios parameter creator
 * @export
 */
export const ReportSystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a System under a Report
         * @summary Request a System
         * @param {any} systemId
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSystem: async (systemId: any, reportId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('reportSystem', 'systemId', systemId)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('reportSystem', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}/systems/{system_id}`
                .replace(`{${"system_id"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportSystemApi - functional programming interface
 * @export
 */
export const ReportSystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportSystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a System under a Report
         * @summary Request a System
         * @param {any} systemId
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportSystem(systemId: any, reportId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<System200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportSystem(systemId, reportId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportSystemApi - factory interface
 * @export
 */
export const ReportSystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportSystemApiFp(configuration)
    return {
        /**
         * Returns a System under a Report
         * @summary Request a System
         * @param {any} systemId
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSystem(systemId: any, reportId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<System200Response> {
            return localVarFp.reportSystem(systemId, reportId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportSystemApi - object-oriented interface
 * @export
 * @class ReportSystemApi
 * @extends {BaseAPI}
 */
export class ReportSystemApi extends BaseAPI {
    /**
     * Returns a System under a Report
     * @summary Request a System
     * @param {any} systemId
     * @param {any} reportId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSystemApi
     */
    public reportSystem(systemId: any, reportId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return ReportSystemApiFp(this.configuration).reportSystem(systemId, reportId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportSystemsApi - axios parameter creator
 * @export
 */
export const ReportSystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Systems assigned to a Report
         * @summary Request Systems assigned to a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;never_reported&#x60;, and &#x60;group_name&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSystems: async (reportId: any, xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('reportSystems', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}/systems`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportSystemsApi - functional programming interface
 * @export
 */
export const ReportSystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportSystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Systems assigned to a Report
         * @summary Request Systems assigned to a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;never_reported&#x60;, and &#x60;group_name&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportSystems(reportId: any, xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Systems200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportSystems(reportId, xRHIDENTITY, tags, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportSystemsApi - factory interface
 * @export
 */
export const ReportSystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportSystemsApiFp(configuration)
    return {
        /**
         * Lists Systems assigned to a Report
         * @summary Request Systems assigned to a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;never_reported&#x60;, and &#x60;group_name&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportSystems(reportId: any, xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Systems200Response> {
            return localVarFp.reportSystems(reportId, xRHIDENTITY, tags, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportSystemsApi - object-oriented interface
 * @export
 * @class ReportSystemsApi
 * @extends {BaseAPI}
 */
export class ReportSystemsApi extends BaseAPI {
    /**
     * Lists Systems assigned to a Report
     * @summary Request Systems assigned to a Report
     * @param {any} reportId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;never_reported&#x60;, and &#x60;group_name&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportSystemsApi
     */
    public reportSystems(reportId: any, xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return ReportSystemsApiFp(this.configuration).reportSystems(reportId, xRHIDENTITY, tags, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportSystemsOSApi - axios parameter creator
 * @export
 */
export const ReportSystemsOSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        reportSystemsOS: async (reportId: any, xRHIDENTITY?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('reportSystemsOS', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}/systems/os_versions`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportSystemsOSApi - functional programming interface
 * @export
 */
export const ReportSystemsOSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportSystemsOSApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async reportSystemsOS(reportId: any, xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportSystemsOS(reportId, xRHIDENTITY, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportSystemsOSApi - factory interface
 * @export
 */
export const ReportSystemsOSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportSystemsOSApiFp(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        reportSystemsOS(reportId: any, xRHIDENTITY?: any, filter?: any, options?: any): AxiosPromise<any> {
            return localVarFp.reportSystemsOS(reportId, xRHIDENTITY, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportSystemsOSApi - object-oriented interface
 * @export
 * @class ReportSystemsOSApi
 * @extends {BaseAPI}
 */
export class ReportSystemsOSApi extends BaseAPI {
    /**
     * This feature is exclusively used by the frontend
     * @summary Request the list of available OS versions
     * @param {any} reportId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ReportSystemsOSApi
     */
    public reportSystemsOS(reportId: any, xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig) {
        return ReportSystemsOSApiFp(this.configuration).reportSystemsOS(reportId, xRHIDENTITY, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportTestResultApi - axios parameter creator
 * @export
 */
export const ReportTestResultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Test Result under a Report
         * @summary Request a Test Result
         * @param {any} testResultId
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTestResult: async (testResultId: any, reportId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testResultId' is not null or undefined
            assertParamExists('reportTestResult', 'testResultId', testResultId)
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('reportTestResult', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}/test_results/{test_result_id}`
                .replace(`{${"test_result_id"}}`, encodeURIComponent(String(testResultId)))
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportTestResultApi - functional programming interface
 * @export
 */
export const ReportTestResultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportTestResultApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Test Result under a Report
         * @summary Request a Test Result
         * @param {any} testResultId
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportTestResult(testResultId: any, reportId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<System200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportTestResult(testResultId, reportId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportTestResultApi - factory interface
 * @export
 */
export const ReportTestResultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportTestResultApiFp(configuration)
    return {
        /**
         * Returns a Test Result under a Report
         * @summary Request a Test Result
         * @param {any} testResultId
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTestResult(testResultId: any, reportId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<System200Response> {
            return localVarFp.reportTestResult(testResultId, reportId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportTestResultApi - object-oriented interface
 * @export
 * @class ReportTestResultApi
 * @extends {BaseAPI}
 */
export class ReportTestResultApi extends BaseAPI {
    /**
     * Returns a Test Result under a Report
     * @summary Request a Test Result
     * @param {any} testResultId
     * @param {any} reportId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportTestResultApi
     */
    public reportTestResult(testResultId: any, reportId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return ReportTestResultApiFp(this.configuration).reportTestResult(testResultId, reportId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportTestResultsApi - axios parameter creator
 * @export
 */
export const ReportTestResultsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Test Results under a Report
         * @summary Request Test Results under a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Test Results are searchable using attributes &#x60;score&#x60;, &#x60;supported&#x60;, &#x60;system_id&#x60;, &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;security_guide_version&#x60;, &#x60;compliant&#x60;, &#x60;group_name&#x60;, and &#x60;failed_rule_severity&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTestResults: async (reportId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('reportTestResults', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}/test_results`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportTestResultsApi - functional programming interface
 * @export
 */
export const ReportTestResultsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportTestResultsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Test Results under a Report
         * @summary Request Test Results under a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Test Results are searchable using attributes &#x60;score&#x60;, &#x60;supported&#x60;, &#x60;system_id&#x60;, &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;security_guide_version&#x60;, &#x60;compliant&#x60;, &#x60;group_name&#x60;, and &#x60;failed_rule_severity&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportTestResults(reportId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReportTestResults200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportTestResults(reportId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportTestResultsApi - factory interface
 * @export
 */
export const ReportTestResultsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportTestResultsApiFp(configuration)
    return {
        /**
         * Lists Test Results under a Report
         * @summary Request Test Results under a Report
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Test Results are searchable using attributes &#x60;score&#x60;, &#x60;supported&#x60;, &#x60;system_id&#x60;, &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;security_guide_version&#x60;, &#x60;compliant&#x60;, &#x60;group_name&#x60;, and &#x60;failed_rule_severity&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportTestResults(reportId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<ReportTestResults200Response> {
            return localVarFp.reportTestResults(reportId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportTestResultsApi - object-oriented interface
 * @export
 * @class ReportTestResultsApi
 * @extends {BaseAPI}
 */
export class ReportTestResultsApi extends BaseAPI {
    /**
     * Lists Test Results under a Report
     * @summary Request Test Results under a Report
     * @param {any} reportId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Test Results are searchable using attributes &#x60;score&#x60;, &#x60;supported&#x60;, &#x60;system_id&#x60;, &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;security_guide_version&#x60;, &#x60;compliant&#x60;, &#x60;group_name&#x60;, and &#x60;failed_rule_severity&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportTestResultsApi
     */
    public reportTestResults(reportId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return ReportTestResultsApiFp(this.configuration).reportTestResults(reportId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportTestResultsOSApi - axios parameter creator
 * @export
 */
export const ReportTestResultsOSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Test Results are searchable using attributes &#x60;score&#x60;, &#x60;supported&#x60;, &#x60;system_id&#x60;, &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;security_guide_version&#x60;, &#x60;compliant&#x60;, &#x60;group_name&#x60;, and &#x60;failed_rule_severity&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        reportTestResultsOS: async (reportId: any, xRHIDENTITY?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('reportTestResultsOS', 'reportId', reportId)
            const localVarPath = `/reports/{report_id}/test_results/os_versions`
                .replace(`{${"report_id"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportTestResultsOSApi - functional programming interface
 * @export
 */
export const ReportTestResultsOSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportTestResultsOSApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Test Results are searchable using attributes &#x60;score&#x60;, &#x60;supported&#x60;, &#x60;system_id&#x60;, &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;security_guide_version&#x60;, &#x60;compliant&#x60;, &#x60;group_name&#x60;, and &#x60;failed_rule_severity&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async reportTestResultsOS(reportId: any, xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportTestResultsOS(reportId, xRHIDENTITY, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportTestResultsOSApi - factory interface
 * @export
 */
export const ReportTestResultsOSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportTestResultsOSApiFp(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} reportId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Test Results are searchable using attributes &#x60;score&#x60;, &#x60;supported&#x60;, &#x60;system_id&#x60;, &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;security_guide_version&#x60;, &#x60;compliant&#x60;, &#x60;group_name&#x60;, and &#x60;failed_rule_severity&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        reportTestResultsOS(reportId: any, xRHIDENTITY?: any, filter?: any, options?: any): AxiosPromise<any> {
            return localVarFp.reportTestResultsOS(reportId, xRHIDENTITY, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportTestResultsOSApi - object-oriented interface
 * @export
 * @class ReportTestResultsOSApi
 * @extends {BaseAPI}
 */
export class ReportTestResultsOSApi extends BaseAPI {
    /**
     * This feature is exclusively used by the frontend
     * @summary Request the list of available OS versions
     * @param {any} reportId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Test Results are searchable using attributes &#x60;score&#x60;, &#x60;supported&#x60;, &#x60;system_id&#x60;, &#x60;display_name&#x60;, &#x60;os_minor_version&#x60;, &#x60;security_guide_version&#x60;, &#x60;compliant&#x60;, &#x60;group_name&#x60;, and &#x60;failed_rule_severity&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ReportTestResultsOSApi
     */
    public reportTestResultsOS(reportId: any, xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig) {
        return ReportTestResultsOSApiFp(this.configuration).reportTestResultsOS(reportId, xRHIDENTITY, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Reports
         * @summary Request Reports
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;with_reported_systems&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reports: async (xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Reports
         * @summary Request Reports
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;with_reported_systems&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reports(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reports200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reports(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Lists Reports
         * @summary Request Reports
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;with_reported_systems&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reports(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Reports200Response> {
            return localVarFp.reports(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * Lists Reports
     * @summary Request Reports
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;with_reported_systems&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public reports(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return ReportsApiFp(this.configuration).reports(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReportsOSApi - axios parameter creator
 * @export
 */
export const ReportsOSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;with_reported_systems&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        reportsOS: async (xRHIDENTITY?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/reports/os_versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsOSApi - functional programming interface
 * @export
 */
export const ReportsOSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsOSApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;with_reported_systems&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async reportsOS(xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reportsOS(xRHIDENTITY, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsOSApi - factory interface
 * @export
 */
export const ReportsOSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsOSApiFp(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;with_reported_systems&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        reportsOS(xRHIDENTITY?: any, filter?: any, options?: any): AxiosPromise<any> {
            return localVarFp.reportsOS(xRHIDENTITY, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportsOSApi - object-oriented interface
 * @export
 * @class ReportsOSApi
 * @extends {BaseAPI}
 */
export class ReportsOSApi extends BaseAPI {
    /**
     * This feature is exclusively used by the frontend
     * @summary Request the list of available OS versions
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;, &#x60;os_major_version&#x60;, and &#x60;with_reported_systems&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof ReportsOSApi
     */
    public reportsOS(xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig) {
        return ReportsOSApiFp(this.configuration).reportsOS(xRHIDENTITY, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RuleApi - axios parameter creator
 * @export
 */
export const RuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Rule
         * @summary Request a Rule
         * @param {any} securityGuideId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rule: async (securityGuideId: any, ruleId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('rule', 'securityGuideId', securityGuideId)
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('rule', 'ruleId', ruleId)
            const localVarPath = `/security_guides/{security_guide_id}/rules/{rule_id}`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)))
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RuleApi - functional programming interface
 * @export
 */
export const RuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RuleApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Rule
         * @summary Request a Rule
         * @param {any} securityGuideId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rule(securityGuideId: any, ruleId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rule200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rule(securityGuideId, ruleId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RuleApi - factory interface
 * @export
 */
export const RuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RuleApiFp(configuration)
    return {
        /**
         * Returns a Rule
         * @summary Request a Rule
         * @param {any} securityGuideId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rule(securityGuideId: any, ruleId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<Rule200Response> {
            return localVarFp.rule(securityGuideId, ruleId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RuleApi - object-oriented interface
 * @export
 * @class RuleApi
 * @extends {BaseAPI}
 */
export class RuleApi extends BaseAPI {
    /**
     * Returns a Rule
     * @summary Request a Rule
     * @param {any} securityGuideId
     * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public rule(securityGuideId: any, ruleId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return RuleApiFp(this.configuration).rule(securityGuideId, ruleId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RuleGroupApi - axios parameter creator
 * @export
 */
export const RuleGroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Rule Group
         * @summary Request a Rule Group
         * @param {any} securityGuideId
         * @param {any} ruleGroupId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleGroup: async (securityGuideId: any, ruleGroupId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('ruleGroup', 'securityGuideId', securityGuideId)
            // verify required parameter 'ruleGroupId' is not null or undefined
            assertParamExists('ruleGroup', 'ruleGroupId', ruleGroupId)
            const localVarPath = `/security_guides/{security_guide_id}/rule_groups/{rule_group_id}`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)))
                .replace(`{${"rule_group_id"}}`, encodeURIComponent(String(ruleGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RuleGroupApi - functional programming interface
 * @export
 */
export const RuleGroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RuleGroupApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Rule Group
         * @summary Request a Rule Group
         * @param {any} securityGuideId
         * @param {any} ruleGroupId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ruleGroup(securityGuideId: any, ruleGroupId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleGroup200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ruleGroup(securityGuideId, ruleGroupId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RuleGroupApi - factory interface
 * @export
 */
export const RuleGroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RuleGroupApiFp(configuration)
    return {
        /**
         * Returns a Rule Group
         * @summary Request a Rule Group
         * @param {any} securityGuideId
         * @param {any} ruleGroupId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleGroup(securityGuideId: any, ruleGroupId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<RuleGroup200Response> {
            return localVarFp.ruleGroup(securityGuideId, ruleGroupId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RuleGroupApi - object-oriented interface
 * @export
 * @class RuleGroupApi
 * @extends {BaseAPI}
 */
export class RuleGroupApi extends BaseAPI {
    /**
     * Returns a Rule Group
     * @summary Request a Rule Group
     * @param {any} securityGuideId
     * @param {any} ruleGroupId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleGroupApi
     */
    public ruleGroup(securityGuideId: any, ruleGroupId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return RuleGroupApiFp(this.configuration).ruleGroup(securityGuideId, ruleGroupId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RuleGroupsApi - axios parameter creator
 * @export
 */
export const RuleGroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Rule Groups
         * @summary Request Rule Groups
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rule Groups are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleGroups: async (securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('ruleGroups', 'securityGuideId', securityGuideId)
            const localVarPath = `/security_guides/{security_guide_id}/rule_groups`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RuleGroupsApi - functional programming interface
 * @export
 */
export const RuleGroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RuleGroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Rule Groups
         * @summary Request Rule Groups
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rule Groups are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ruleGroups(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleGroups200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ruleGroups(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RuleGroupsApi - factory interface
 * @export
 */
export const RuleGroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RuleGroupsApiFp(configuration)
    return {
        /**
         * Lists Rule Groups
         * @summary Request Rule Groups
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rule Groups are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleGroups(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<RuleGroups200Response> {
            return localVarFp.ruleGroups(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RuleGroupsApi - object-oriented interface
 * @export
 * @class RuleGroupsApi
 * @extends {BaseAPI}
 */
export class RuleGroupsApi extends BaseAPI {
    /**
     * Lists Rule Groups
     * @summary Request Rule Groups
     * @param {any} securityGuideId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rule Groups are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleGroupsApi
     */
    public ruleGroups(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return RuleGroupsApiFp(this.configuration).ruleGroups(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RulesApi - axios parameter creator
 * @export
 */
export const RulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Rules assigned
         * @summary Request Rules
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rules: async (securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('rules', 'securityGuideId', securityGuideId)
            const localVarPath = `/security_guides/{security_guide_id}/rules`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RulesApi - functional programming interface
 * @export
 */
export const RulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Rules assigned
         * @summary Request Rules
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rules(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rules200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rules(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RulesApi - factory interface
 * @export
 */
export const RulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RulesApiFp(configuration)
    return {
        /**
         * Lists Rules assigned
         * @summary Request Rules
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rules(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Rules200Response> {
            return localVarFp.rules(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RulesApi - object-oriented interface
 * @export
 * @class RulesApi
 * @extends {BaseAPI}
 */
export class RulesApi extends BaseAPI {
    /**
     * Lists Rules assigned
     * @summary Request Rules
     * @param {any} securityGuideId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulesApi
     */
    public rules(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return RulesApiFp(this.configuration).rules(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SecurityGuideApi - axios parameter creator
 * @export
 */
export const SecurityGuideApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Security Guide
         * @summary Request a Security Guide
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGuide: async (securityGuideId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('securityGuide', 'securityGuideId', securityGuideId)
            const localVarPath = `/security_guides/{security_guide_id}`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityGuideApi - functional programming interface
 * @export
 */
export const SecurityGuideApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityGuideApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Security Guide
         * @summary Request a Security Guide
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async securityGuide(securityGuideId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGuide200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.securityGuide(securityGuideId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityGuideApi - factory interface
 * @export
 */
export const SecurityGuideApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityGuideApiFp(configuration)
    return {
        /**
         * Returns a Security Guide
         * @summary Request a Security Guide
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGuide(securityGuideId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<SecurityGuide200Response> {
            return localVarFp.securityGuide(securityGuideId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityGuideApi - object-oriented interface
 * @export
 * @class SecurityGuideApi
 * @extends {BaseAPI}
 */
export class SecurityGuideApi extends BaseAPI {
    /**
     * Returns a Security Guide
     * @summary Request a Security Guide
     * @param {any} securityGuideId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGuideApi
     */
    public securityGuide(securityGuideId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return SecurityGuideApiFp(this.configuration).securityGuide(securityGuideId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SecurityGuideRuleTreeApi - axios parameter creator
 * @export
 */
export const SecurityGuideRuleTreeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the Rule Tree of a Security Guide
         * @summary Request the Rule Tree of a Security Guide
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGuideRuleTree: async (securityGuideId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('securityGuideRuleTree', 'securityGuideId', securityGuideId)
            const localVarPath = `/security_guides/{security_guide_id}/rule_tree`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityGuideRuleTreeApi - functional programming interface
 * @export
 */
export const SecurityGuideRuleTreeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityGuideRuleTreeApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the Rule Tree of a Security Guide
         * @summary Request the Rule Tree of a Security Guide
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async securityGuideRuleTree(securityGuideId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.securityGuideRuleTree(securityGuideId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityGuideRuleTreeApi - factory interface
 * @export
 */
export const SecurityGuideRuleTreeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityGuideRuleTreeApiFp(configuration)
    return {
        /**
         * Returns the Rule Tree of a Security Guide
         * @summary Request the Rule Tree of a Security Guide
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGuideRuleTree(securityGuideId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<any> {
            return localVarFp.securityGuideRuleTree(securityGuideId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityGuideRuleTreeApi - object-oriented interface
 * @export
 * @class SecurityGuideRuleTreeApi
 * @extends {BaseAPI}
 */
export class SecurityGuideRuleTreeApi extends BaseAPI {
    /**
     * Returns the Rule Tree of a Security Guide
     * @summary Request the Rule Tree of a Security Guide
     * @param {any} securityGuideId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGuideRuleTreeApi
     */
    public securityGuideRuleTree(securityGuideId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return SecurityGuideRuleTreeApiFp(this.configuration).securityGuideRuleTree(securityGuideId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SecurityGuidesApi - axios parameter creator
 * @export
 */
export const SecurityGuidesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Security Guides
         * @summary Request Security Guides
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Security Guides are searchable using attributes &#x60;title&#x60;, &#x60;version&#x60;, &#x60;ref_id&#x60;, &#x60;os_major_version&#x60;, &#x60;profile_ref_id&#x60;, and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGuides: async (xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/security_guides`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityGuidesApi - functional programming interface
 * @export
 */
export const SecurityGuidesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityGuidesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Security Guides
         * @summary Request Security Guides
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Security Guides are searchable using attributes &#x60;title&#x60;, &#x60;version&#x60;, &#x60;ref_id&#x60;, &#x60;os_major_version&#x60;, &#x60;profile_ref_id&#x60;, and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async securityGuides(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityGuides200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.securityGuides(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityGuidesApi - factory interface
 * @export
 */
export const SecurityGuidesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityGuidesApiFp(configuration)
    return {
        /**
         * Lists Security Guides
         * @summary Request Security Guides
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Security Guides are searchable using attributes &#x60;title&#x60;, &#x60;version&#x60;, &#x60;ref_id&#x60;, &#x60;os_major_version&#x60;, &#x60;profile_ref_id&#x60;, and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        securityGuides(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<SecurityGuides200Response> {
            return localVarFp.securityGuides(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityGuidesApi - object-oriented interface
 * @export
 * @class SecurityGuidesApi
 * @extends {BaseAPI}
 */
export class SecurityGuidesApi extends BaseAPI {
    /**
     * Lists Security Guides
     * @summary Request Security Guides
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Security Guides are searchable using attributes &#x60;title&#x60;, &#x60;version&#x60;, &#x60;ref_id&#x60;, &#x60;os_major_version&#x60;, &#x60;profile_ref_id&#x60;, and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGuidesApi
     */
    public securityGuides(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return SecurityGuidesApiFp(this.configuration).securityGuides(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SecurityGuidesOSApi - axios parameter creator
 * @export
 */
export const SecurityGuidesOSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        securityGuidesOS: async (xRHIDENTITY?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/security_guides/os_versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecurityGuidesOSApi - functional programming interface
 * @export
 */
export const SecurityGuidesOSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SecurityGuidesOSApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async securityGuidesOS(xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.securityGuidesOS(xRHIDENTITY, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SecurityGuidesOSApi - factory interface
 * @export
 */
export const SecurityGuidesOSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SecurityGuidesOSApiFp(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        securityGuidesOS(xRHIDENTITY?: any, filter?: any, options?: any): AxiosPromise<any> {
            return localVarFp.securityGuidesOS(xRHIDENTITY, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SecurityGuidesOSApi - object-oriented interface
 * @export
 * @class SecurityGuidesOSApi
 * @extends {BaseAPI}
 */
export class SecurityGuidesOSApi extends BaseAPI {
    /**
     * This feature is exclusively used by the frontend
     * @summary Request the list of available OS versions
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SecurityGuidesOSApi
     */
    public securityGuidesOS(xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig) {
        return SecurityGuidesOSApiFp(this.configuration).securityGuidesOS(xRHIDENTITY, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SupportedProfilesApi - axios parameter creator
 * @export
 */
export const SupportedProfilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Supported Profiles
         * @summary Request Supported Profiles
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Supported Profiles are searchable using attributes &#x60;os_major_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportedProfiles: async (xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/security_guides/supported_profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SupportedProfilesApi - functional programming interface
 * @export
 */
export const SupportedProfilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SupportedProfilesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Supported Profiles
         * @summary Request Supported Profiles
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Supported Profiles are searchable using attributes &#x60;os_major_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supportedProfiles(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportedProfiles200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supportedProfiles(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SupportedProfilesApi - factory interface
 * @export
 */
export const SupportedProfilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SupportedProfilesApiFp(configuration)
    return {
        /**
         * Lists Supported Profiles
         * @summary Request Supported Profiles
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Supported Profiles are searchable using attributes &#x60;os_major_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supportedProfiles(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<SupportedProfiles200Response> {
            return localVarFp.supportedProfiles(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SupportedProfilesApi - object-oriented interface
 * @export
 * @class SupportedProfilesApi
 * @extends {BaseAPI}
 */
export class SupportedProfilesApi extends BaseAPI {
    /**
     * Lists Supported Profiles
     * @summary Request Supported Profiles
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Supported Profiles are searchable using attributes &#x60;os_major_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportedProfilesApi
     */
    public supportedProfiles(xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return SupportedProfilesApiFp(this.configuration).supportedProfiles(xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a System
         * @summary Request a System
         * @param {any} systemId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        system: async (systemId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('system', 'systemId', systemId)
            const localVarPath = `/systems/{system_id}`
                .replace(`{${"system_id"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a System
         * @summary Request a System
         * @param {any} systemId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async system(systemId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<System200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.system(systemId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemApiFp(configuration)
    return {
        /**
         * Returns a System
         * @summary Request a System
         * @param {any} systemId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        system(systemId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<System200Response> {
            return localVarFp.system(systemId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Returns a System
     * @summary Request a System
     * @param {any} systemId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public system(systemId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return SystemApiFp(this.configuration).system(systemId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemReportsApi - axios parameter creator
 * @export
 */
export const SystemReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Reports
         * @summary Request Reports
         * @param {any} systemId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemReports: async (systemId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('systemReports', 'systemId', systemId)
            const localVarPath = `/systems/{system_id}/reports`
                .replace(`{${"system_id"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemReportsApi - functional programming interface
 * @export
 */
export const SystemReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Reports
         * @summary Request Reports
         * @param {any} systemId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemReports(systemId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reports200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemReports(systemId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemReportsApi - factory interface
 * @export
 */
export const SystemReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemReportsApiFp(configuration)
    return {
        /**
         * Lists Reports
         * @summary Request Reports
         * @param {any} systemId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemReports(systemId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Reports200Response> {
            return localVarFp.systemReports(systemId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemReportsApi - object-oriented interface
 * @export
 * @class SystemReportsApi
 * @extends {BaseAPI}
 */
export class SystemReportsApi extends BaseAPI {
    /**
     * Lists Reports
     * @summary Request Reports
     * @param {any} systemId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Reports are searchable using attributes &#x60;title&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemReportsApi
     */
    public systemReports(systemId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return SystemReportsApiFp(this.configuration).systemReports(systemId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemsApi - axios parameter creator
 * @export
 */
export const SystemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Systems
         * @summary Request Systems
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systems: async (xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/systems`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tags !== undefined) {
                localVarQueryParameter['tags'] = tags;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemsApi - functional programming interface
 * @export
 */
export const SystemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Systems
         * @summary Request Systems
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systems(xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Systems200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systems(xRHIDENTITY, tags, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemsApi - factory interface
 * @export
 */
export const SystemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemsApiFp(configuration)
    return {
        /**
         * Lists Systems
         * @summary Request Systems
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systems(xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Systems200Response> {
            return localVarFp.systems(xRHIDENTITY, tags, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemsApi - object-oriented interface
 * @export
 * @class SystemsApi
 * @extends {BaseAPI}
 */
export class SystemsApi extends BaseAPI {
    /**
     * Lists Systems
     * @summary Request Systems
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [tags] An array of tags to narrow down the search results. In case the value contains symbols used for separators (&#x60;/&#x60; or &#x60;&#x3D;&#x60;), they need to be encoded.&lt;br&gt;e.g.: &#x60;namespace/key&#x3D;value&#x60;, &#x60;insights-client/selinux-config&#x3D;SELINUX%3Denforcing&#x60;
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsApi
     */
    public systems(xRHIDENTITY?: any, tags?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return SystemsApiFp(this.configuration).systems(xRHIDENTITY, tags, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemsOSApi - axios parameter creator
 * @export
 */
export const SystemsOSApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        systemsOS: async (xRHIDENTITY?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/systems/os_versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemsOSApi - functional programming interface
 * @export
 */
export const SystemsOSApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemsOSApiAxiosParamCreator(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async systemsOS(xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemsOS(xRHIDENTITY, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemsOSApi - factory interface
 * @export
 */
export const SystemsOSApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemsOSApiFp(configuration)
    return {
        /**
         * This feature is exclusively used by the frontend
         * @summary Request the list of available OS versions
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        systemsOS(xRHIDENTITY?: any, filter?: any, options?: any): AxiosPromise<any> {
            return localVarFp.systemsOS(xRHIDENTITY, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemsOSApi - object-oriented interface
 * @export
 * @class SystemsOSApi
 * @extends {BaseAPI}
 */
export class SystemsOSApi extends BaseAPI {
    /**
     * This feature is exclusively used by the frontend
     * @summary Request the list of available OS versions
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Systems are searchable using attributes &#x60;display_name&#x60;, &#x60;os_major_version&#x60;, &#x60;os_minor_version&#x60;, &#x60;assigned_or_scanned&#x60;, &#x60;never_reported&#x60;, &#x60;group_name&#x60;, &#x60;policies&#x60;, and &#x60;profile_ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof SystemsOSApi
     */
    public systemsOS(xRHIDENTITY?: any, filter?: any, options?: AxiosRequestConfig) {
        return SystemsOSApiFp(this.configuration).systemsOS(xRHIDENTITY, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SystemsPoliciesApi - axios parameter creator
 * @export
 */
export const SystemsPoliciesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Policies under a System
         * @summary Request Policies assigned to a System
         * @param {any} systemId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Policies are searchable using attributes &#x60;title&#x60; and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemsPolicies: async (systemId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('systemsPolicies', 'systemId', systemId)
            const localVarPath = `/systems/{system_id}/policies`
                .replace(`{${"system_id"}}`, encodeURIComponent(String(systemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemsPoliciesApi - functional programming interface
 * @export
 */
export const SystemsPoliciesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SystemsPoliciesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Policies under a System
         * @summary Request Policies assigned to a System
         * @param {any} systemId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Policies are searchable using attributes &#x60;title&#x60; and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async systemsPolicies(systemId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policies200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.systemsPolicies(systemId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SystemsPoliciesApi - factory interface
 * @export
 */
export const SystemsPoliciesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SystemsPoliciesApiFp(configuration)
    return {
        /**
         * Lists Policies under a System
         * @summary Request Policies assigned to a System
         * @param {any} systemId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Policies are searchable using attributes &#x60;title&#x60; and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemsPolicies(systemId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Policies200Response> {
            return localVarFp.systemsPolicies(systemId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SystemsPoliciesApi - object-oriented interface
 * @export
 * @class SystemsPoliciesApi
 * @extends {BaseAPI}
 */
export class SystemsPoliciesApi extends BaseAPI {
    /**
     * Lists Policies under a System
     * @summary Request Policies assigned to a System
     * @param {any} systemId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Policies are searchable using attributes &#x60;title&#x60; and &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemsPoliciesApi
     */
    public systemsPolicies(systemId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return SystemsPoliciesApiFp(this.configuration).systemsPolicies(systemId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TailoringApi - axios parameter creator
 * @export
 */
export const TailoringApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Tailoring
         * @summary Request a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId UUID or OS minor version number
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tailoring: async (policyId: any, tailoringId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('tailoring', 'policyId', policyId)
            // verify required parameter 'tailoringId' is not null or undefined
            assertParamExists('tailoring', 'tailoringId', tailoringId)
            const localVarPath = `/policies/{policy_id}/tailorings/{tailoring_id}`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)))
                .replace(`{${"tailoring_id"}}`, encodeURIComponent(String(tailoringId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TailoringApi - functional programming interface
 * @export
 */
export const TailoringApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TailoringApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Tailoring
         * @summary Request a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId UUID or OS minor version number
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tailoring(policyId: any, tailoringId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tailoring200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tailoring(policyId, tailoringId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TailoringApi - factory interface
 * @export
 */
export const TailoringApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TailoringApiFp(configuration)
    return {
        /**
         * Returns a Tailoring
         * @summary Request a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId UUID or OS minor version number
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tailoring(policyId: any, tailoringId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<Tailoring200Response> {
            return localVarFp.tailoring(policyId, tailoringId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TailoringApi - object-oriented interface
 * @export
 * @class TailoringApi
 * @extends {BaseAPI}
 */
export class TailoringApi extends BaseAPI {
    /**
     * Returns a Tailoring
     * @summary Request a Tailoring
     * @param {any} policyId
     * @param {any} tailoringId UUID or OS minor version number
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TailoringApi
     */
    public tailoring(policyId: any, tailoringId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return TailoringApiFp(this.configuration).tailoring(policyId, tailoringId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TailoringFileApi - axios parameter creator
 * @export
 */
export const TailoringFileApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Tailoring File
         * @summary Request a Tailoring file
         * @param {any} policyId
         * @param {any} tailoringId UUID or OS minor version number
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tailoringFile: async (policyId: any, tailoringId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('tailoringFile', 'policyId', policyId)
            // verify required parameter 'tailoringId' is not null or undefined
            assertParamExists('tailoringFile', 'tailoringId', tailoringId)
            const localVarPath = `/policies/{policy_id}/tailorings/{tailoring_id}/tailoring_file.json`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)))
                .replace(`{${"tailoring_id"}}`, encodeURIComponent(String(tailoringId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TailoringFileApi - functional programming interface
 * @export
 */
export const TailoringFileApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TailoringFileApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Tailoring File
         * @summary Request a Tailoring file
         * @param {any} policyId
         * @param {any} tailoringId UUID or OS minor version number
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tailoringFile(policyId: any, tailoringId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TailoringFile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tailoringFile(policyId, tailoringId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TailoringFileApi - factory interface
 * @export
 */
export const TailoringFileApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TailoringFileApiFp(configuration)
    return {
        /**
         * Returns a Tailoring File
         * @summary Request a Tailoring file
         * @param {any} policyId
         * @param {any} tailoringId UUID or OS minor version number
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tailoringFile(policyId: any, tailoringId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<TailoringFile> {
            return localVarFp.tailoringFile(policyId, tailoringId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TailoringFileApi - object-oriented interface
 * @export
 * @class TailoringFileApi
 * @extends {BaseAPI}
 */
export class TailoringFileApi extends BaseAPI {
    /**
     * Returns a Tailoring File
     * @summary Request a Tailoring file
     * @param {any} policyId
     * @param {any} tailoringId UUID or OS minor version number
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TailoringFileApi
     */
    public tailoringFile(policyId: any, tailoringId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return TailoringFileApiFp(this.configuration).tailoringFile(policyId, tailoringId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TailoringRulesApi - axios parameter creator
 * @export
 */
export const TailoringRulesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Rules assigned to a Tailoring
         * @summary Request Rules assigned to a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tailoringRules: async (policyId: any, tailoringId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('tailoringRules', 'policyId', policyId)
            // verify required parameter 'tailoringId' is not null or undefined
            assertParamExists('tailoringRules', 'tailoringId', tailoringId)
            const localVarPath = `/policies/{policy_id}/tailorings/{tailoring_id}/rules`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)))
                .replace(`{${"tailoring_id"}}`, encodeURIComponent(String(tailoringId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TailoringRulesApi - functional programming interface
 * @export
 */
export const TailoringRulesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TailoringRulesApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Rules assigned to a Tailoring
         * @summary Request Rules assigned to a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tailoringRules(policyId: any, tailoringId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rules200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tailoringRules(policyId, tailoringId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TailoringRulesApi - factory interface
 * @export
 */
export const TailoringRulesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TailoringRulesApiFp(configuration)
    return {
        /**
         * Lists Rules assigned to a Tailoring
         * @summary Request Rules assigned to a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tailoringRules(policyId: any, tailoringId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Rules200Response> {
            return localVarFp.tailoringRules(policyId, tailoringId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TailoringRulesApi - object-oriented interface
 * @export
 * @class TailoringRulesApi
 * @extends {BaseAPI}
 */
export class TailoringRulesApi extends BaseAPI {
    /**
     * Lists Rules assigned to a Tailoring
     * @summary Request Rules assigned to a Tailoring
     * @param {any} policyId
     * @param {any} tailoringId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Rules are searchable using attributes &#x60;title&#x60;, &#x60;severity&#x60;, &#x60;remediation_available&#x60;, and &#x60;rule_group_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TailoringRulesApi
     */
    public tailoringRules(policyId: any, tailoringId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return TailoringRulesApiFp(this.configuration).tailoringRules(policyId, tailoringId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TailoringsApi - axios parameter creator
 * @export
 */
export const TailoringsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Tailorings
         * @summary Request Tailorings
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Tailorings are searchable using attributes &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tailorings: async (policyId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('tailorings', 'policyId', policyId)
            const localVarPath = `/policies/{policy_id}/tailorings`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TailoringsApi - functional programming interface
 * @export
 */
export const TailoringsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TailoringsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Tailorings
         * @summary Request Tailorings
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Tailorings are searchable using attributes &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tailorings(policyId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tailorings200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tailorings(policyId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TailoringsApi - factory interface
 * @export
 */
export const TailoringsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TailoringsApiFp(configuration)
    return {
        /**
         * Lists Tailorings
         * @summary Request Tailorings
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Tailorings are searchable using attributes &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tailorings(policyId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<Tailorings200Response> {
            return localVarFp.tailorings(policyId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TailoringsApi - object-oriented interface
 * @export
 * @class TailoringsApi
 * @extends {BaseAPI}
 */
export class TailoringsApi extends BaseAPI {
    /**
     * Lists Tailorings
     * @summary Request Tailorings
     * @param {any} policyId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Tailorings are searchable using attributes &#x60;os_minor_version&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TailoringsApi
     */
    public tailorings(policyId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return TailoringsApiFp(this.configuration).tailorings(policyId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UnassignRuleApi - axios parameter creator
 * @export
 */
export const UnassignRuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Unassigns a Rule from a Tailoring
         * @summary Unassign a Rule from a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignRule: async (policyId: any, tailoringId: any, ruleId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('unassignRule', 'policyId', policyId)
            // verify required parameter 'tailoringId' is not null or undefined
            assertParamExists('unassignRule', 'tailoringId', tailoringId)
            // verify required parameter 'ruleId' is not null or undefined
            assertParamExists('unassignRule', 'ruleId', ruleId)
            const localVarPath = `/policies/{policy_id}/tailorings/{tailoring_id}/rules/{rule_id}`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)))
                .replace(`{${"tailoring_id"}}`, encodeURIComponent(String(tailoringId)))
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnassignRuleApi - functional programming interface
 * @export
 */
export const UnassignRuleApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnassignRuleApiAxiosParamCreator(configuration)
    return {
        /**
         * Unassigns a Rule from a Tailoring
         * @summary Unassign a Rule from a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignRule(policyId: any, tailoringId: any, ruleId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignRule(policyId, tailoringId, ruleId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnassignRuleApi - factory interface
 * @export
 */
export const UnassignRuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnassignRuleApiFp(configuration)
    return {
        /**
         * Unassigns a Rule from a Tailoring
         * @summary Unassign a Rule from a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId
         * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignRule(policyId: any, tailoringId: any, ruleId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<void> {
            return localVarFp.unassignRule(policyId, tailoringId, ruleId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UnassignRuleApi - object-oriented interface
 * @export
 * @class UnassignRuleApi
 * @extends {BaseAPI}
 */
export class UnassignRuleApi extends BaseAPI {
    /**
     * Unassigns a Rule from a Tailoring
     * @summary Unassign a Rule from a Tailoring
     * @param {any} policyId
     * @param {any} tailoringId
     * @param {any} ruleId UUID or a ref_id with \&#39;.\&#39; characters replaced with \&#39;-\&#39;
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnassignRuleApi
     */
    public unassignRule(policyId: any, tailoringId: any, ruleId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return UnassignRuleApiFp(this.configuration).unassignRule(policyId, tailoringId, ruleId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UnassignSystemApi - axios parameter creator
 * @export
 */
export const UnassignSystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Unassigns a System from a Policy
         * @summary Unassign a System from a Policy
         * @param {any} systemId
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignSystem: async (systemId: any, policyId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'systemId' is not null or undefined
            assertParamExists('unassignSystem', 'systemId', systemId)
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('unassignSystem', 'policyId', policyId)
            const localVarPath = `/policies/{policy_id}/systems/{system_id}`
                .replace(`{${"system_id"}}`, encodeURIComponent(String(systemId)))
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnassignSystemApi - functional programming interface
 * @export
 */
export const UnassignSystemApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnassignSystemApiAxiosParamCreator(configuration)
    return {
        /**
         * Unassigns a System from a Policy
         * @summary Unassign a System from a Policy
         * @param {any} systemId
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unassignSystem(systemId: any, policyId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<System200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unassignSystem(systemId, policyId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UnassignSystemApi - factory interface
 * @export
 */
export const UnassignSystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnassignSystemApiFp(configuration)
    return {
        /**
         * Unassigns a System from a Policy
         * @summary Unassign a System from a Policy
         * @param {any} systemId
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unassignSystem(systemId: any, policyId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<System200Response> {
            return localVarFp.unassignSystem(systemId, policyId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UnassignSystemApi - object-oriented interface
 * @export
 * @class UnassignSystemApi
 * @extends {BaseAPI}
 */
export class UnassignSystemApi extends BaseAPI {
    /**
     * Unassigns a System from a Policy
     * @summary Unassign a System from a Policy
     * @param {any} systemId
     * @param {any} policyId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnassignSystemApi
     */
    public unassignSystem(systemId: any, policyId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return UnassignSystemApiFp(this.configuration).unassignSystem(systemId, policyId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UpdatePolicyApi - axios parameter creator
 * @export
 */
export const UpdatePolicyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates a Policy with the provided attributes
         * @summary Update a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {PolicyUpdate} [policyUpdate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy: async (policyId: any, xRHIDENTITY?: any, policyUpdate?: PolicyUpdate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('updatePolicy', 'policyId', policyId)
            const localVarPath = `/policies/{policy_id}`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(policyUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdatePolicyApi - functional programming interface
 * @export
 */
export const UpdatePolicyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpdatePolicyApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates a Policy with the provided attributes
         * @summary Update a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {PolicyUpdate} [policyUpdate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePolicy(policyId: any, xRHIDENTITY?: any, policyUpdate?: PolicyUpdate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePolicy201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePolicy(policyId, xRHIDENTITY, policyUpdate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpdatePolicyApi - factory interface
 * @export
 */
export const UpdatePolicyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpdatePolicyApiFp(configuration)
    return {
        /**
         * Updates a Policy with the provided attributes
         * @summary Update a Policy
         * @param {any} policyId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {PolicyUpdate} [policyUpdate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy(policyId: any, xRHIDENTITY?: any, policyUpdate?: PolicyUpdate, options?: any): AxiosPromise<CreatePolicy201Response> {
            return localVarFp.updatePolicy(policyId, xRHIDENTITY, policyUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UpdatePolicyApi - object-oriented interface
 * @export
 * @class UpdatePolicyApi
 * @extends {BaseAPI}
 */
export class UpdatePolicyApi extends BaseAPI {
    /**
     * Updates a Policy with the provided attributes
     * @summary Update a Policy
     * @param {any} policyId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {PolicyUpdate} [policyUpdate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdatePolicyApi
     */
    public updatePolicy(policyId: any, xRHIDENTITY?: any, policyUpdate?: PolicyUpdate, options?: AxiosRequestConfig) {
        return UpdatePolicyApiFp(this.configuration).updatePolicy(policyId, xRHIDENTITY, policyUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UpdateTailoringApi - axios parameter creator
 * @export
 */
export const UpdateTailoringApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates a Tailoring with the provided value_overrides
         * @summary Update a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId UUID or OS minor version number
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {Tailoring} [tailoring]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTailoring: async (policyId: any, tailoringId: any, xRHIDENTITY?: any, tailoring?: Tailoring, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyId' is not null or undefined
            assertParamExists('updateTailoring', 'policyId', policyId)
            // verify required parameter 'tailoringId' is not null or undefined
            assertParamExists('updateTailoring', 'tailoringId', tailoringId)
            const localVarPath = `/policies/{policy_id}/tailorings/{tailoring_id}`
                .replace(`{${"policy_id"}}`, encodeURIComponent(String(policyId)))
                .replace(`{${"tailoring_id"}}`, encodeURIComponent(String(tailoringId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tailoring, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdateTailoringApi - functional programming interface
 * @export
 */
export const UpdateTailoringApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpdateTailoringApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates a Tailoring with the provided value_overrides
         * @summary Update a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId UUID or OS minor version number
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {Tailoring} [tailoring]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTailoring(policyId: any, tailoringId: any, xRHIDENTITY?: any, tailoring?: Tailoring, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tailoring200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTailoring(policyId, tailoringId, xRHIDENTITY, tailoring, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpdateTailoringApi - factory interface
 * @export
 */
export const UpdateTailoringApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpdateTailoringApiFp(configuration)
    return {
        /**
         * Updates a Tailoring with the provided value_overrides
         * @summary Update a Tailoring
         * @param {any} policyId
         * @param {any} tailoringId UUID or OS minor version number
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {Tailoring} [tailoring]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTailoring(policyId: any, tailoringId: any, xRHIDENTITY?: any, tailoring?: Tailoring, options?: any): AxiosPromise<Tailoring200Response> {
            return localVarFp.updateTailoring(policyId, tailoringId, xRHIDENTITY, tailoring, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UpdateTailoringApi - object-oriented interface
 * @export
 * @class UpdateTailoringApi
 * @extends {BaseAPI}
 */
export class UpdateTailoringApi extends BaseAPI {
    /**
     * Updates a Tailoring with the provided value_overrides
     * @summary Update a Tailoring
     * @param {any} policyId
     * @param {any} tailoringId UUID or OS minor version number
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {Tailoring} [tailoring]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateTailoringApi
     */
    public updateTailoring(policyId: any, tailoringId: any, xRHIDENTITY?: any, tailoring?: Tailoring, options?: AxiosRequestConfig) {
        return UpdateTailoringApiFp(this.configuration).updateTailoring(policyId, tailoringId, xRHIDENTITY, tailoring, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ValueDefinitionApi - axios parameter creator
 * @export
 */
export const ValueDefinitionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a Value Definition
         * @summary Request a Value Definition
         * @param {any} securityGuideId
         * @param {any} valueDefinitionId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valueDefinition: async (securityGuideId: any, valueDefinitionId: any, xRHIDENTITY?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('valueDefinition', 'securityGuideId', securityGuideId)
            // verify required parameter 'valueDefinitionId' is not null or undefined
            assertParamExists('valueDefinition', 'valueDefinitionId', valueDefinitionId)
            const localVarPath = `/security_guides/{security_guide_id}/value_definitions/{value_definition_id}`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)))
                .replace(`{${"value_definition_id"}}`, encodeURIComponent(String(valueDefinitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValueDefinitionApi - functional programming interface
 * @export
 */
export const ValueDefinitionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ValueDefinitionApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a Value Definition
         * @summary Request a Value Definition
         * @param {any} securityGuideId
         * @param {any} valueDefinitionId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async valueDefinition(securityGuideId: any, valueDefinitionId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValueDefinition200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.valueDefinition(securityGuideId, valueDefinitionId, xRHIDENTITY, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ValueDefinitionApi - factory interface
 * @export
 */
export const ValueDefinitionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ValueDefinitionApiFp(configuration)
    return {
        /**
         * Returns a Value Definition
         * @summary Request a Value Definition
         * @param {any} securityGuideId
         * @param {any} valueDefinitionId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valueDefinition(securityGuideId: any, valueDefinitionId: any, xRHIDENTITY?: any, options?: any): AxiosPromise<ValueDefinition200Response> {
            return localVarFp.valueDefinition(securityGuideId, valueDefinitionId, xRHIDENTITY, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ValueDefinitionApi - object-oriented interface
 * @export
 * @class ValueDefinitionApi
 * @extends {BaseAPI}
 */
export class ValueDefinitionApi extends BaseAPI {
    /**
     * Returns a Value Definition
     * @summary Request a Value Definition
     * @param {any} securityGuideId
     * @param {any} valueDefinitionId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValueDefinitionApi
     */
    public valueDefinition(securityGuideId: any, valueDefinitionId: any, xRHIDENTITY?: any, options?: AxiosRequestConfig) {
        return ValueDefinitionApiFp(this.configuration).valueDefinition(securityGuideId, valueDefinitionId, xRHIDENTITY, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ValueDefinitionsApi - axios parameter creator
 * @export
 */
export const ValueDefinitionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Lists Value Definitions
         * @summary Request Value Definitions
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Value Definitions are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valueDefinitions: async (securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'securityGuideId' is not null or undefined
            assertParamExists('valueDefinitions', 'securityGuideId', securityGuideId)
            const localVarPath = `/security_guides/{security_guide_id}/value_definitions`
                .replace(`{${"security_guide_id"}}`, encodeURIComponent(String(securityGuideId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (idsOnly !== undefined) {
                localVarQueryParameter['ids_only'] = idsOnly;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sort_by'] = sortBy;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (xRHIDENTITY != null) {
                localVarHeaderParameter['X-RH-IDENTITY'] = typeof xRHIDENTITY === 'string'
                    ? xRHIDENTITY
                    : JSON.stringify(xRHIDENTITY);
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValueDefinitionsApi - functional programming interface
 * @export
 */
export const ValueDefinitionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ValueDefinitionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Lists Value Definitions
         * @summary Request Value Definitions
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Value Definitions are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async valueDefinitions(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValueDefinitions200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.valueDefinitions(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ValueDefinitionsApi - factory interface
 * @export
 */
export const ValueDefinitionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ValueDefinitionsApiFp(configuration)
    return {
        /**
         * Lists Value Definitions
         * @summary Request Value Definitions
         * @param {any} securityGuideId
         * @param {any} [xRHIDENTITY] For internal use only
         * @param {any} [limit] Number of items to return per page
         * @param {any} [offset] Offset of first item of paginated response
         * @param {any} [idsOnly] Indicates whether to return only resource IDs.
         * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
         * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Value Definitions are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        valueDefinitions(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: any): AxiosPromise<ValueDefinitions200Response> {
            return localVarFp.valueDefinitions(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ValueDefinitionsApi - object-oriented interface
 * @export
 * @class ValueDefinitionsApi
 * @extends {BaseAPI}
 */
export class ValueDefinitionsApi extends BaseAPI {
    /**
     * Lists Value Definitions
     * @summary Request Value Definitions
     * @param {any} securityGuideId
     * @param {any} [xRHIDENTITY] For internal use only
     * @param {any} [limit] Number of items to return per page
     * @param {any} [offset] Offset of first item of paginated response
     * @param {any} [idsOnly] Indicates whether to return only resource IDs.
     * @param {any} [sortBy] Attribute and direction to sort the items by. Represented by an array of fields with an optional direction (&#x60;&lt;key&gt;:asc&#x60; or &#x60;&lt;key&gt;:desc&#x60;).&lt;br&gt;&lt;br&gt;If no direction is selected, &#x60;&lt;key&gt;:asc&#x60; is used by default.
     * @param {any} [filter] Query string to filter items by their attributes. Compliant with &lt;a href&#x3D;\&quot;https://github.com/wvanbergen/scoped_search/wiki/Query-language\&quot; target&#x3D;\&quot;_blank\&quot; title&#x3D;\&quot;github.com/wvanbergen/scoped_search\&quot;&gt;scoped_search query language&lt;/a&gt;. However, only &#x60;&#x3D;&#x60; or &#x60;!&#x3D;&#x60; (resp. &#x60;&lt;&gt;&#x60;) operators are supported.&lt;br&gt;&lt;br&gt;Value Definitions are searchable using attributes &#x60;title&#x60; and &#x60;ref_id&#x60;&lt;br&gt;&lt;br&gt;(e.g.: &#x60;(field_1&#x3D;something AND field_2!&#x3D;\&quot;something else\&quot;) OR field_3&gt;40&#x60;)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValueDefinitionsApi
     */
    public valueDefinitions(securityGuideId: any, xRHIDENTITY?: any, limit?: any, offset?: any, idsOnly?: any, sortBy?: any, filter?: any, options?: AxiosRequestConfig) {
        return ValueDefinitionsApiFp(this.configuration).valueDefinitions(securityGuideId, xRHIDENTITY, limit, offset, idsOnly, sortBy, filter, options).then((request) => request(this.axios, this.basePath));
    }
}


